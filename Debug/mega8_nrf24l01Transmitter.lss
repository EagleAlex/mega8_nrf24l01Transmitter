
mega8_nrf24l01Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00000e3e  00000ed2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  00800180  00800180  00000ff2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ff2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001050  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018d6  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b5  00000000  00000000  00002a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ae  00000000  00000000  00003047  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  000036f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047c  00000000  00000000  00003a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c23  00000000  00000000  00003ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004b13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	36 c0       	rjmp	.+108    	; 0x70 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e3       	ldi	r30, 0x3E	; 62
  3a:	fe e0       	ldi	r31, 0x0E	; 14
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 38       	cpi	r26, 0x80	; 128
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a0 e8       	ldi	r26, 0x80	; 128
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 3f       	cpi	r26, 0xFC	; 252
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	71 d0       	rcall	.+226    	; 0x13c <main>
  5a:	ef c6       	rjmp	.+3550   	; 0xe3a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <InitInterrupts>:
uint8_t addrtx5[5]=ADDRP5;

void InitInterrupts(void){
	// INT0: On
	// INT1: Off
	PORTD &=~(1<<INT0);
  5e:	96 98       	cbi	0x12, 6	; 18
	GICR|= 0x40;
  60:	8b b7       	in	r24, 0x3b	; 59
  62:	80 64       	ori	r24, 0x40	; 64
  64:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 0x02; //falling edge of INT0
  66:	82 e0       	ldi	r24, 0x02	; 2
  68:	85 bf       	out	0x35, r24	; 53
	GIFR = 0x40;
  6a:	80 e4       	ldi	r24, 0x40	; 64
  6c:	8a bf       	out	0x3a, r24	; 58
  6e:	08 95       	ret

00000070 <__vector_1>:
}

ISR(INT0_vect){
  70:	1f 92       	push	r1
  72:	0f 92       	push	r0
  74:	0f b6       	in	r0, 0x3f	; 63
  76:	0f 92       	push	r0
  78:	11 24       	eor	r1, r1
  7a:	2f 93       	push	r18
  7c:	3f 93       	push	r19
  7e:	4f 93       	push	r20
  80:	5f 93       	push	r21
  82:	6f 93       	push	r22
  84:	7f 93       	push	r23
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	af 93       	push	r26
  8c:	bf 93       	push	r27
  8e:	cf 93       	push	r28
  90:	ef 93       	push	r30
  92:	ff 93       	push	r31
	cli();
  94:	f8 94       	cli
	uint8_t status = 0;
	SetBit(LED1_port, LED1_pin);
  96:	ad 9a       	sbi	0x15, 5	; 21

	status = nRFGetStatus();
  98:	19 d1       	rcall	.+562    	; 0x2cc <nRFGetStatus>
  9a:	c8 2f       	mov	r28, r24
	sprintf(TextBuffer,"Int. STATUS: 0x%02X \r\n",status);
  9c:	1f 92       	push	r1
  9e:	8f 93       	push	r24
  a0:	82 e9       	ldi	r24, 0x92	; 146
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	9f 93       	push	r25
  a6:	8f 93       	push	r24
  a8:	81 e8       	ldi	r24, 0x81	; 129
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	9f 93       	push	r25
  ae:	8f 93       	push	r24
  b0:	fe d3       	rcall	.+2044   	; 0x8ae <sprintf>
	TransmitStringToUART(TextBuffer);
  b2:	81 e8       	ldi	r24, 0x81	; 129
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	58 d3       	rcall	.+1712   	; 0x768 <TransmitStringToUART>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f e1       	ldi	r24, 0x1F	; 31
  ba:	9e e4       	ldi	r25, 0x4E	; 78
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <__vector_1+0x4c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <__vector_1+0x52>
  c2:	00 00       	nop
	_delay_ms(5);
	ClearBit(LED1_port, LED1_pin);
  c4:	ad 98       	cbi	0x15, 5	; 21
	sei();
  c6:	78 94       	sei
	if (status & (1<<TX_DS)){ // 0x2e
  c8:	0f 90       	pop	r0
  ca:	0f 90       	pop	r0
  cc:	0f 90       	pop	r0
  ce:	0f 90       	pop	r0
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	c5 ff       	sbrs	r28, 5
  d6:	18 c0       	rjmp	.+48     	; 0x108 <__vector_1+0x98>
			
			NrfFlushTXfifo();
  d8:	1b d2       	rcall	.+1078   	; 0x510 <NrfFlushTXfifo>
			reset_interrupts();
  da:	0a d2       	rcall	.+1044   	; 0x4f0 <reset_interrupts>
			sprintf(TextBuffer,"Transmitted: %s \r\n", buff);
  dc:	85 ee       	ldi	r24, 0xE5	; 229
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	9f 93       	push	r25
  e2:	8f 93       	push	r24
  e4:	89 ea       	ldi	r24, 0xA9	; 169
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	9f 93       	push	r25
  ea:	8f 93       	push	r24
  ec:	81 e8       	ldi	r24, 0x81	; 129
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	9f 93       	push	r25
  f2:	8f 93       	push	r24
  f4:	dc d3       	rcall	.+1976   	; 0x8ae <sprintf>
			TransmitStringToUART(TextBuffer);
  f6:	81 e8       	ldi	r24, 0x81	; 129
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	36 d3       	rcall	.+1644   	; 0x768 <TransmitStringToUART>
  fc:	0f 90       	pop	r0
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
	}		
	
	if (status & (1<<MAX_RT)){ // 0x1e
 108:	c4 ff       	sbrs	r28, 4
 10a:	06 c0       	rjmp	.+12     	; 0x118 <__vector_1+0xa8>
			// RF choose frequency (channel) - 3 (?? GHz)
			WriteReg(RF_CH, 76);
 10c:	6c e4       	ldi	r22, 0x4C	; 76
 10e:	85 e0       	ldi	r24, 0x05	; 5
 110:	2a d1       	rcall	.+596    	; 0x366 <WriteReg>
			reuse_payload();
 112:	0f d3       	rcall	.+1566   	; 0x732 <reuse_payload>
			reset_interrupts();
 114:	ed d1       	rcall	.+986    	; 0x4f0 <reset_interrupts>
			send_payload();
 116:	f1 d1       	rcall	.+994    	; 0x4fa <send_payload>
	}
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	cf 91       	pop	r28
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <main>:

int main(void){
	uint8_t p=0;
	SetBit(LED2_port, LED2_pin);
 13c:	aa 9a       	sbi	0x15, 2	; 21
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	89 e6       	ldi	r24, 0x69	; 105
 142:	98 e1       	ldi	r25, 0x18	; 24
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x8>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x12>
 14e:	00 00       	nop
	_delay_ms(500);
	InitializeUART(19200,0,8,1,1);
 150:	01 e0       	ldi	r16, 0x01	; 1
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	48 e0       	ldi	r20, 0x08	; 8
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	9b e4       	ldi	r25, 0x4B	; 75
 15c:	21 d3       	rcall	.+1602   	; 0x7a0 <InitializeUART>
	TransmitStringToUART("\r\n");
 15e:	80 ef       	ldi	r24, 0xF0	; 240
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 d3       	rcall	.+1540   	; 0x768 <TransmitStringToUART>
	TransmitStringToUART("Mega8 started \r\n");
 164:	8c eb       	ldi	r24, 0xBC	; 188
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	ff d2       	rcall	.+1534   	; 0x768 <TransmitStringToUART>
	
	InitInterrupts();
 16a:	79 df       	rcall	.-270    	; 0x5e <InitInterrupts>
	
	NrfPortInit();
 16c:	97 d0       	rcall	.+302    	; 0x29c <NrfPortInit>
 16e:	8f e1       	ldi	r24, 0x1F	; 31
 170:	9e e4       	ldi	r25, 0x4E	; 78
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0x36>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x3c>
 178:	00 00       	nop
	_delay_ms(5);

	if(NrfConfig() == 1){
 17a:	3a d2       	rcall	.+1140   	; 0x5f0 <NrfConfig>
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	21 f4       	brne	.+8      	; 0x188 <main+0x4c>
		TransmitStringToUART("nRF24 configuration is finished... \r\n");
 180:	8d ec       	ldi	r24, 0xCD	; 205
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	f1 d2       	rcall	.+1506   	; 0x768 <TransmitStringToUART>
 186:	03 c0       	rjmp	.+6      	; 0x18e <main+0x52>
	}else{
		TransmitStringToUART("Error in nRF24 configuration... \r\n");
 188:	83 ef       	ldi	r24, 0xF3	; 243
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	ed d2       	rcall	.+1498   	; 0x768 <TransmitStringToUART>
	}	
	
	
	sprintf(TextBuffer,"STATUS: 0x%02X\r\n",nRFGetStatus());
 18e:	9e d0       	rcall	.+316    	; 0x2cc <nRFGetStatus>
 190:	1f 92       	push	r1
 192:	8f 93       	push	r24
 194:	86 e1       	ldi	r24, 0x16	; 22
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	9f 93       	push	r25
 19a:	8f 93       	push	r24
 19c:	c1 e8       	ldi	r28, 0x81	; 129
 19e:	d1 e0       	ldi	r29, 0x01	; 1
 1a0:	df 93       	push	r29
 1a2:	cf 93       	push	r28
 1a4:	84 d3       	rcall	.+1800   	; 0x8ae <sprintf>
	TransmitStringToUART(TextBuffer);
 1a6:	ce 01       	movw	r24, r28
 1a8:	df d2       	rcall	.+1470   	; 0x768 <TransmitStringToUART>
	
	sprintf(TextBuffer,"CONFIG: 0x%02X\r\n",ReadFromNrf(CONFIG));
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	94 d0       	rcall	.+296    	; 0x2d6 <ReadFromNrf>
 1ae:	1f 92       	push	r1
 1b0:	8f 93       	push	r24
 1b2:	87 e2       	ldi	r24, 0x27	; 39
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	9f 93       	push	r25
 1b8:	8f 93       	push	r24
 1ba:	df 93       	push	r29
 1bc:	cf 93       	push	r28
 1be:	77 d3       	rcall	.+1774   	; 0x8ae <sprintf>
	TransmitStringToUART(TextBuffer);
 1c0:	ce 01       	movw	r24, r28
 1c2:	d2 d2       	rcall	.+1444   	; 0x768 <TransmitStringToUART>
	
	sprintf(TextBuffer,"RF_SETUP: 0x%02X\r\n",ReadFromNrf(RF_SETUP));
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	87 d0       	rcall	.+270    	; 0x2d6 <ReadFromNrf>
 1c8:	1f 92       	push	r1
 1ca:	8f 93       	push	r24
 1cc:	88 e3       	ldi	r24, 0x38	; 56
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	9f 93       	push	r25
 1d2:	8f 93       	push	r24
 1d4:	df 93       	push	r29
 1d6:	cf 93       	push	r28
 1d8:	6a d3       	rcall	.+1748   	; 0x8ae <sprintf>
	TransmitStringToUART(TextBuffer);
 1da:	ce 01       	movw	r24, r28
 1dc:	c5 d2       	rcall	.+1418   	; 0x768 <TransmitStringToUART>
	
	sprintf(TextBuffer,"RF_CH: 0x%02X\r\n",ReadFromNrf(RF_CH));
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	7a d0       	rcall	.+244    	; 0x2d6 <ReadFromNrf>
 1e2:	1f 92       	push	r1
 1e4:	8f 93       	push	r24
 1e6:	8b e4       	ldi	r24, 0x4B	; 75
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	9f 93       	push	r25
 1ec:	8f 93       	push	r24
 1ee:	df 93       	push	r29
 1f0:	cf 93       	push	r28
 1f2:	5d d3       	rcall	.+1722   	; 0x8ae <sprintf>
	TransmitStringToUART(TextBuffer);
 1f4:	ce 01       	movw	r24, r28
 1f6:	b8 d2       	rcall	.+1392   	; 0x768 <TransmitStringToUART>
	
	sprintf(TextBuffer,"EN_AA: 0x%02X\r\n",ReadFromNrf(EN_AA));
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	6d d0       	rcall	.+218    	; 0x2d6 <ReadFromNrf>
 1fc:	1f 92       	push	r1
 1fe:	8f 93       	push	r24
 200:	8b e5       	ldi	r24, 0x5B	; 91
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	9f 93       	push	r25
 206:	8f 93       	push	r24
 208:	df 93       	push	r29
 20a:	cf 93       	push	r28
 20c:	50 d3       	rcall	.+1696   	; 0x8ae <sprintf>
	TransmitStringToUART(TextBuffer);
 20e:	ce 01       	movw	r24, r28
 210:	ab d2       	rcall	.+1366   	; 0x768 <TransmitStringToUART>
	
	sprintf(TextBuffer,"EN_RXADDR: 0x%02X\r\n",ReadFromNrf(EN_RXADDR));
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	60 d0       	rcall	.+192    	; 0x2d6 <ReadFromNrf>
 216:	1f 92       	push	r1
 218:	8f 93       	push	r24
 21a:	8b e6       	ldi	r24, 0x6B	; 107
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	9f 93       	push	r25
 220:	8f 93       	push	r24
 222:	df 93       	push	r29
 224:	cf 93       	push	r28
 226:	43 d3       	rcall	.+1670   	; 0x8ae <sprintf>
	TransmitStringToUART(TextBuffer);
 228:	8d b7       	in	r24, 0x3d	; 61
 22a:	9e b7       	in	r25, 0x3e	; 62
 22c:	84 96       	adiw	r24, 0x24	; 36
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	f8 94       	cli
 232:	9e bf       	out	0x3e, r25	; 62
 234:	0f be       	out	0x3f, r0	; 63
 236:	8d bf       	out	0x3d, r24	; 61
 238:	ce 01       	movw	r24, r28
 23a:	96 d2       	rcall	.+1324   	; 0x768 <TransmitStringToUART>
 23c:	e5 ee       	ldi	r30, 0xE5	; 229
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	8b e6       	ldi	r24, 0x6B	; 107
	buff1=WriteToNrf(R, RX_ADDR_P5, buff, 5);
	sprintf(TextBuffer, "RX_ADDP5: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x \r\n", buff1[0], buff1[1], buff1[2], buff1[3], buff1[4]);
	TransmitStringToUART(TextBuffer);
	*/
	
	for (uint8_t ii=0;ii<buffsize;ii++){ buff[ii]='k'+ii;}
 242:	81 93       	st	Z+, r24
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	8b 37       	cpi	r24, 0x7B	; 123
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0x106>
		//sprintf(TextBuffer, "Buff addr: %i \r\n", &buff[0]);
		//TransmitStringToUART(TextBuffer);
		
	
	sei();
 24a:	78 94       	sei
			send_payload();
	}
}

int main(void){
	uint8_t p=0;
 24c:	c0 e0       	ldi	r28, 0x00	; 0
			transmit_payload(addrtx1, &buff[0], PAYLOAD_LENGTH);
		}else if(p==2){
			transmit_payload(addrtx2, &buff[0], PAYLOAD_LENGTH);
		}else if(p==3){
			transmit_payload(addrtx3, &buff[0], PAYLOAD_LENGTH);
			p=0;
 24e:	d0 e0       	ldi	r29, 0x00	; 0
		
	
	sei();
	
    while(1){
		p++;
 250:	cf 5f       	subi	r28, 0xFF	; 255
		if(p==1){
 252:	c1 30       	cpi	r28, 0x01	; 1
 254:	39 f4       	brne	.+14     	; 0x264 <main+0x128>
			transmit_payload(addrtx1, &buff[0], PAYLOAD_LENGTH);
 256:	40 e1       	ldi	r20, 0x10	; 16
 258:	65 ee       	ldi	r22, 0xE5	; 229
 25a:	71 e0       	ldi	r23, 0x01	; 1
 25c:	8a e6       	ldi	r24, 0x6A	; 106
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	80 d1       	rcall	.+768    	; 0x562 <transmit_payload>
 262:	12 c0       	rjmp	.+36     	; 0x288 <main+0x14c>
		}else if(p==2){
 264:	c2 30       	cpi	r28, 0x02	; 2
 266:	39 f4       	brne	.+14     	; 0x276 <main+0x13a>
			transmit_payload(addrtx2, &buff[0], PAYLOAD_LENGTH);
 268:	40 e1       	ldi	r20, 0x10	; 16
 26a:	65 ee       	ldi	r22, 0xE5	; 229
 26c:	71 e0       	ldi	r23, 0x01	; 1
 26e:	85 e6       	ldi	r24, 0x65	; 101
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	77 d1       	rcall	.+750    	; 0x562 <transmit_payload>
 274:	09 c0       	rjmp	.+18     	; 0x288 <main+0x14c>
		}else if(p==3){
 276:	c3 30       	cpi	r28, 0x03	; 3
 278:	39 f4       	brne	.+14     	; 0x288 <main+0x14c>
			transmit_payload(addrtx3, &buff[0], PAYLOAD_LENGTH);
 27a:	40 e1       	ldi	r20, 0x10	; 16
 27c:	65 ee       	ldi	r22, 0xE5	; 229
 27e:	71 e0       	ldi	r23, 0x01	; 1
 280:	80 e6       	ldi	r24, 0x60	; 96
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	6e d1       	rcall	.+732    	; 0x562 <transmit_payload>
			p=0;
 286:	cd 2f       	mov	r28, r29
 288:	9f ef       	ldi	r25, 0xFF	; 255
 28a:	29 e6       	ldi	r18, 0x69	; 105
 28c:	88 e1       	ldi	r24, 0x18	; 24
 28e:	91 50       	subi	r25, 0x01	; 1
 290:	20 40       	sbci	r18, 0x00	; 0
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <main+0x152>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0x15c>
 298:	00 00       	nop
 29a:	da cf       	rjmp	.-76     	; 0x250 <main+0x114>

0000029c <NrfPortInit>:
static uint8_t addr4[5] = ADDRP4;
static uint8_t addr5[5] = ADDRP5;
static uint8_t addrtx[5] = ADDRTX;

void NrfPortInit(void){
	SPIInit();
 29c:	4f d2       	rcall	.+1182   	; 0x73c <SPIInit>
	IRQ_ddr &= ~(1<<IRQ_pin);
 29e:	8a 98       	cbi	0x11, 2	; 17
    LED1_ddr |=(1<<LED1_pin);
 2a0:	a5 9a       	sbi	0x14, 5	; 20
	LED2_ddr |=(1<<LED2_pin);
 2a2:	a2 9a       	sbi	0x14, 2	; 20
	
	SetBit(LED1_port, LED1_pin);
 2a4:	ad 9a       	sbi	0x15, 5	; 21
	SetBit(LED2_port, LED2_pin);
 2a6:	aa 9a       	sbi	0x15, 2	; 21
	CE_lo;
 2a8:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2aa:	87 e5       	ldi	r24, 0x57	; 87
 2ac:	92 e0       	ldi	r25, 0x02	; 2
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <NrfPortInit+0x12>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <NrfPortInit+0x18>
 2b4:	00 00       	nop
	_delay_us(150);
	CSN_hi;
 2b6:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	9f ef       	ldi	r25, 0xFF	; 255
 2ba:	20 e7       	ldi	r18, 0x70	; 112
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	91 50       	subi	r25, 0x01	; 1
 2c0:	20 40       	sbci	r18, 0x00	; 0
 2c2:	80 40       	sbci	r24, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <NrfPortInit+0x22>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <NrfPortInit+0x2c>
 2c8:	00 00       	nop
 2ca:	08 95       	ret

000002cc <nRFGetStatus>:
	_delay_ms(50);
}

uint8_t nRFGetStatus(void){
	uint8_t status=0;
	CSN_lo;
 2cc:	c1 98       	cbi	0x18, 1	; 24
	status=SPIWriteRead(NOP);
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	42 d2       	rcall	.+1156   	; 0x756 <SPIWriteRead>
	CSN_hi;
 2d2:	c1 9a       	sbi	0x18, 1	; 24
	return status;
}
 2d4:	08 95       	ret

000002d6 <ReadFromNrf>:

//read data
uint8_t ReadFromNrf(uint8_t reg){
    CSN_lo;
 2d6:	c1 98       	cbi	0x18, 1	; 24
	reg=SPIWriteRead(reg);
 2d8:	3e d2       	rcall	.+1148   	; 0x756 <SPIWriteRead>
	reg=SPIWriteRead(NOP);
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	3c d2       	rcall	.+1144   	; 0x756 <SPIWriteRead>
	CSN_hi;
 2de:	c1 9a       	sbi	0x18, 1	; 24
    return reg;
}
 2e0:	08 95       	ret

000002e2 <WriteToNrf>:

void WriteToNrf(uint8_t ReadWrite,uint8_t reg, uint8_t *val, uint8_t antVal){
 2e2:	af 92       	push	r10
 2e4:	bf 92       	push	r11
 2e6:	cf 92       	push	r12
 2e8:	df 92       	push	r13
 2ea:	ef 92       	push	r14
 2ec:	ff 92       	push	r15
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	b8 2e       	mov	r11, r24
 2f8:	a6 2e       	mov	r10, r22
 2fa:	8a 01       	movw	r16, r20
 2fc:	e2 2e       	mov	r14, r18
    int i, l_status;
	//uint8_t ret[antVal];
	//sprintf(TextBuffer, "val addr: %i, value: %u \r\n", val, *val);
	//TransmitStringToUART(TextBuffer);
	//SetBit(LED1_port,LED1_pin);
    if(ReadWrite == W){
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	b8 12       	cpse	r11, r24
 302:	04 c0       	rjmp	.+8      	; 0x30c <WriteToNrf+0x2a>
        reg = (W_REGISTER | (REGISTER_MASK & reg));
 304:	86 2f       	mov	r24, r22
 306:	8f 71       	andi	r24, 0x1F	; 31
 308:	80 62       	ori	r24, 0x20	; 32
 30a:	a8 2e       	mov	r10, r24
    }
    CSN_lo;
 30c:	c1 98       	cbi	0x18, 1	; 24
	//_delay_us(250);
    l_status = SPIWriteRead(reg);
 30e:	8a 2d       	mov	r24, r10
 310:	22 d2       	rcall	.+1092   	; 0x756 <SPIWriteRead>
    for(i=0;i<antVal;i++){
 312:	f1 2c       	mov	r15, r1
 314:	1e 14       	cp	r1, r14
 316:	1f 04       	cpc	r1, r15
 318:	b4 f4       	brge	.+44     	; 0x346 <WriteToNrf+0x64>
 31a:	c0 e0       	ldi	r28, 0x00	; 0
 31c:	d0 e0       	ldi	r29, 0x00	; 0
        if(ReadWrite == R && reg != W_TX_PAYLOAD){
 31e:	b1 10       	cpse	r11, r1
 320:	06 c0       	rjmp	.+12     	; 0x32e <WriteToNrf+0x4c>
 322:	e0 ea       	ldi	r30, 0xA0	; 160
 324:	ae 16       	cp	r10, r30
 326:	19 f0       	breq	.+6      	; 0x32e <WriteToNrf+0x4c>
            SPIWriteRead(NOP);
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	15 d2       	rcall	.+1066   	; 0x756 <SPIWriteRead>
 32c:	08 c0       	rjmp	.+16     	; 0x33e <WriteToNrf+0x5c>
        }else{
            SPIWriteRead(*(val++));
 32e:	68 01       	movw	r12, r16
 330:	ff ef       	ldi	r31, 0xFF	; 255
 332:	cf 1a       	sub	r12, r31
 334:	df 0a       	sbc	r13, r31
 336:	f8 01       	movw	r30, r16
 338:	80 81       	ld	r24, Z
 33a:	0d d2       	rcall	.+1050   	; 0x756 <SPIWriteRead>
 33c:	86 01       	movw	r16, r12
        reg = (W_REGISTER | (REGISTER_MASK & reg));
    }
    CSN_lo;
	//_delay_us(250);
    l_status = SPIWriteRead(reg);
    for(i=0;i<antVal;i++){
 33e:	21 96       	adiw	r28, 0x01	; 1
 340:	ce 15       	cp	r28, r14
 342:	df 05       	cpc	r29, r15
 344:	61 f7       	brne	.-40     	; 0x31e <WriteToNrf+0x3c>
			//sprintf(TextBuffer, "val addr: %i, value: %u \r\n", val, *val);
			//TransmitStringToUART(TextBuffer);
			//val++;
        }
    }
	CSN_hi;
 346:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 348:	f5 e3       	ldi	r31, 0x35	; 53
 34a:	fa 95       	dec	r31
 34c:	f1 f7       	brne	.-4      	; 0x34a <WriteToNrf+0x68>
 34e:	00 00       	nop
	//ClearBit(LED1_port,LED1_pin);
	_delay_us(10);
    //return val;
}
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	df 90       	pop	r13
 35e:	cf 90       	pop	r12
 360:	bf 90       	pop	r11
 362:	af 90       	pop	r10
 364:	08 95       	ret

00000366 <WriteReg>:

void WriteReg(uint8_t reg, uint8_t val){
 366:	cf 93       	push	r28
 368:	c6 2f       	mov	r28, r22
	CSN_lo;
 36a:	c1 98       	cbi	0x18, 1	; 24
	reg=SPIWriteRead(W_REGISTER | (REGISTER_MASK & reg));
 36c:	8f 71       	andi	r24, 0x1F	; 31
 36e:	80 62       	ori	r24, 0x20	; 32
 370:	f2 d1       	rcall	.+996    	; 0x756 <SPIWriteRead>
	SPIWriteRead(val);
 372:	8c 2f       	mov	r24, r28
 374:	f0 d1       	rcall	.+992    	; 0x756 <SPIWriteRead>
	CSN_hi;
 376:	c1 9a       	sbi	0x18, 1	; 24
}	
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	ec 01       	movw	r28, r24
 382:	20 e0       	ldi	r18, 0x00	; 0
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	44 e0       	ldi	r20, 0x04	; 4
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	db 01       	movw	r26, r22
 38c:	a2 0f       	add	r26, r18
 38e:	b3 1f       	adc	r27, r19
 390:	fa 01       	movw	r30, r20
 392:	e2 1b       	sub	r30, r18
 394:	f3 0b       	sbc	r31, r19
 396:	ec 0f       	add	r30, r28
 398:	fd 1f       	adc	r31, r29
	//reverse address
	uint8_t i = 0;
	for(i=0; i<5; i++)
		memcpy(&addrrev[i], &addr[5-1-i], 1);
 39a:	90 81       	ld	r25, Z
 39c:	9c 93       	st	X, r25
 39e:	2f 5f       	subi	r18, 0xFF	; 255
 3a0:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<5; i++)
 3a2:	25 30       	cpi	r18, 0x05	; 5
 3a4:	31 05       	cpc	r19, r1
 3a6:	89 f7       	brne	.-30     	; 0x38a <nrf24l01_revaddress+0xe>
		memcpy(&addrrev[i], &addr[5-1-i], 1);
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <NrfSetRXAddr>:
	
}

//************************************************************/
// RX RF_Adress setup 5 byte - Set Receiver Address
void NrfSetRXAddr(uint8_t channel, uint8_t *addr){
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	00 d0       	rcall	.+0      	; 0x3b4 <NrfSetRXAddr+0x6>
 3b4:	00 d0       	rcall	.+0      	; 0x3b6 <NrfSetRXAddr+0x8>
 3b6:	1f 92       	push	r1
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
 3bc:	9b 01       	movw	r18, r22
	if(channel == 0){
 3be:	81 11       	cpse	r24, r1
 3c0:	15 c0       	rjmp	.+42     	; 0x3ec <NrfSetRXAddr+0x3e>
			memcpy(&addr0, addr, 5);
 3c2:	85 e0       	ldi	r24, 0x05	; 5
 3c4:	fb 01       	movw	r30, r22
 3c6:	ad e8       	ldi	r26, 0x8D	; 141
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	01 90       	ld	r0, Z+
 3cc:	0d 92       	st	X+, r0
 3ce:	8a 95       	dec	r24
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <NrfSetRXAddr+0x1c>
			uint8_t revaddr[5];
			nrf24l01_revaddress(addr, (uint8_t *)revaddr);
 3d2:	be 01       	movw	r22, r28
 3d4:	6f 5f       	subi	r22, 0xFF	; 255
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	c9 01       	movw	r24, r18
 3da:	d0 df       	rcall	.-96     	; 0x37c <nrf24l01_revaddress>
			WriteToNrf(W, RX_ADDR_P0, revaddr, 5);
 3dc:	25 e0       	ldi	r18, 0x05	; 5
 3de:	ae 01       	movw	r20, r28
 3e0:	4f 5f       	subi	r20, 0xFF	; 255
 3e2:	5f 4f       	sbci	r21, 0xFF	; 255
 3e4:	6a e0       	ldi	r22, 0x0A	; 10
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	7c df       	rcall	.-264    	; 0x2e2 <WriteToNrf>
 3ea:	51 c0       	rjmp	.+162    	; 0x48e <__stack+0x2f>
	}else if(channel == 1){	
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	a9 f4       	brne	.+42     	; 0x41a <NrfSetRXAddr+0x6c>
			memcpy(&addr1, addr, 5);
 3f0:	85 e0       	ldi	r24, 0x05	; 5
 3f2:	fb 01       	movw	r30, r22
 3f4:	a8 e8       	ldi	r26, 0x88	; 136
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	01 90       	ld	r0, Z+
 3fa:	0d 92       	st	X+, r0
 3fc:	8a 95       	dec	r24
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <NrfSetRXAddr+0x4a>
			uint8_t revaddr[5];
			nrf24l01_revaddress(addr, (uint8_t *)revaddr);
 400:	be 01       	movw	r22, r28
 402:	6f 5f       	subi	r22, 0xFF	; 255
 404:	7f 4f       	sbci	r23, 0xFF	; 255
 406:	c9 01       	movw	r24, r18
 408:	b9 df       	rcall	.-142    	; 0x37c <nrf24l01_revaddress>
			WriteToNrf(W, RX_ADDR_P1, revaddr, 5);
 40a:	25 e0       	ldi	r18, 0x05	; 5
 40c:	ae 01       	movw	r20, r28
 40e:	4f 5f       	subi	r20, 0xFF	; 255
 410:	5f 4f       	sbci	r21, 0xFF	; 255
 412:	6b e0       	ldi	r22, 0x0B	; 11
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	65 df       	rcall	.-310    	; 0x2e2 <WriteToNrf>
 418:	3a c0       	rjmp	.+116    	; 0x48e <__stack+0x2f>
	}else if(channel == 2){
 41a:	82 30       	cpi	r24, 0x02	; 2
 41c:	69 f4       	brne	.+26     	; 0x438 <NrfSetRXAddr+0x8a>
			memcpy(&addr2, addr, 5);
 41e:	85 e0       	ldi	r24, 0x05	; 5
 420:	fb 01       	movw	r30, r22
 422:	a3 e8       	ldi	r26, 0x83	; 131
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	01 90       	ld	r0, Z+
 428:	0d 92       	st	X+, r0
 42a:	8a 95       	dec	r24
 42c:	e1 f7       	brne	.-8      	; 0x426 <NrfSetRXAddr+0x78>
			WriteReg(RX_ADDR_P2, addr[4]);
 42e:	fb 01       	movw	r30, r22
 430:	64 81       	ldd	r22, Z+4	; 0x04
 432:	8c e0       	ldi	r24, 0x0C	; 12
 434:	98 df       	rcall	.-208    	; 0x366 <WriteReg>
 436:	2b c0       	rjmp	.+86     	; 0x48e <__stack+0x2f>
	}else if(channel == 3){
 438:	83 30       	cpi	r24, 0x03	; 3
 43a:	69 f4       	brne	.+26     	; 0x456 <NrfSetRXAddr+0xa8>
			memcpy(&addr3, addr, 5);
 43c:	85 e0       	ldi	r24, 0x05	; 5
 43e:	fb 01       	movw	r30, r22
 440:	ae e7       	ldi	r26, 0x7E	; 126
 442:	b0 e0       	ldi	r27, 0x00	; 0
 444:	01 90       	ld	r0, Z+
 446:	0d 92       	st	X+, r0
 448:	8a 95       	dec	r24
 44a:	e1 f7       	brne	.-8      	; 0x444 <NrfSetRXAddr+0x96>
			WriteReg(RX_ADDR_P3, addr[4]);
 44c:	fb 01       	movw	r30, r22
 44e:	64 81       	ldd	r22, Z+4	; 0x04
 450:	8d e0       	ldi	r24, 0x0D	; 13
 452:	89 df       	rcall	.-238    	; 0x366 <WriteReg>
 454:	1c c0       	rjmp	.+56     	; 0x48e <__stack+0x2f>
	}else if(channel == 4){
 456:	84 30       	cpi	r24, 0x04	; 4
 458:	69 f4       	brne	.+26     	; 0x474 <__stack+0x15>
			memcpy(&addr4, addr, 5);
 45a:	85 e0       	ldi	r24, 0x05	; 5
 45c:	fb 01       	movw	r30, r22
 45e:	a9 e7       	ldi	r26, 0x79	; 121
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	01 90       	ld	r0, Z+
 464:	0d 92       	st	X+, r0
 466:	8a 95       	dec	r24
 468:	e1 f7       	brne	.-8      	; 0x462 <__stack+0x3>
			WriteReg(RX_ADDR_P4, addr[4]);
 46a:	fb 01       	movw	r30, r22
 46c:	64 81       	ldd	r22, Z+4	; 0x04
 46e:	8e e0       	ldi	r24, 0x0E	; 14
 470:	7a df       	rcall	.-268    	; 0x366 <WriteReg>
 472:	0d c0       	rjmp	.+26     	; 0x48e <__stack+0x2f>
	}else if(channel == 5){
 474:	85 30       	cpi	r24, 0x05	; 5
 476:	59 f4       	brne	.+22     	; 0x48e <__stack+0x2f>
			memcpy(&addr5, addr, 5);
 478:	fb 01       	movw	r30, r22
 47a:	a4 e7       	ldi	r26, 0x74	; 116
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	01 90       	ld	r0, Z+
 480:	0d 92       	st	X+, r0
 482:	8a 95       	dec	r24
 484:	e1 f7       	brne	.-8      	; 0x47e <__stack+0x1f>
			WriteReg(RX_ADDR_P5, addr[4]);
 486:	fb 01       	movw	r30, r22
 488:	64 81       	ldd	r22, Z+4	; 0x04
 48a:	8f e0       	ldi	r24, 0x0F	; 15
 48c:	6c df       	rcall	.-296    	; 0x366 <WriteReg>
	}
}
 48e:	0f 90       	pop	r0
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	08 95       	ret

0000049e <NrfSetTXAddr>:

/***************************************************************/
// TX RF_Address setup 5 byte - Set Transmitter address
void NrfSetTXAddr(uint8_t *addr){
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <NrfSetTXAddr+0x6>
 4a4:	00 d0       	rcall	.+0      	; 0x4a6 <NrfSetTXAddr+0x8>
 4a6:	1f 92       	push	r1
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
	memcpy(&addrtx, addr, 5);
 4ac:	25 e0       	ldi	r18, 0x05	; 5
 4ae:	fc 01       	movw	r30, r24
 4b0:	af e6       	ldi	r26, 0x6F	; 111
 4b2:	b0 e0       	ldi	r27, 0x00	; 0
 4b4:	01 90       	ld	r0, Z+
 4b6:	0d 92       	st	X+, r0
 4b8:	2a 95       	dec	r18
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <NrfSetTXAddr+0x16>
	uint8_t revaddr[5];
	nrf24l01_revaddress(addr, (uint8_t *)revaddr);
 4bc:	be 01       	movw	r22, r28
 4be:	6f 5f       	subi	r22, 0xFF	; 255
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255
 4c2:	5c df       	rcall	.-328    	; 0x37c <nrf24l01_revaddress>
	WriteToNrf(W, RX_ADDR_P0, revaddr, 5);
 4c4:	25 e0       	ldi	r18, 0x05	; 5
 4c6:	ae 01       	movw	r20, r28
 4c8:	4f 5f       	subi	r20, 0xFF	; 255
 4ca:	5f 4f       	sbci	r21, 0xFF	; 255
 4cc:	6a e0       	ldi	r22, 0x0A	; 10
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	08 df       	rcall	.-496    	; 0x2e2 <WriteToNrf>
	WriteToNrf(W, TX_ADDR, revaddr, 5);
 4d2:	25 e0       	ldi	r18, 0x05	; 5
 4d4:	ae 01       	movw	r20, r28
 4d6:	4f 5f       	subi	r20, 0xFF	; 255
 4d8:	5f 4f       	sbci	r21, 0xFF	; 255
 4da:	60 e1       	ldi	r22, 0x10	; 16
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	01 df       	rcall	.-510    	; 0x2e2 <WriteToNrf>
}	
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <reset_interrupts>:

/****************************************************************/
void reset_interrupts(void){
    WriteReg(STATUS, nRFGetStatus());
 4f0:	ed de       	rcall	.-550    	; 0x2cc <nRFGetStatus>
 4f2:	68 2f       	mov	r22, r24
 4f4:	87 e0       	ldi	r24, 0x07	; 7
 4f6:	37 df       	rcall	.-402    	; 0x366 <WriteReg>
 4f8:	08 95       	ret

000004fa <send_payload>:
	//start transmittion
	send_payload();
}

void send_payload(void){
	CE_hi;
 4fa:	c0 9a       	sbi	0x18, 0	; 24
 4fc:	80 e5       	ldi	r24, 0x50	; 80
 4fe:	8a 95       	dec	r24
 500:	f1 f7       	brne	.-4      	; 0x4fe <send_payload+0x4>
	_delay_us(15);
	CE_lo;
 502:	c0 98       	cbi	0x18, 0	; 24
 504:	08 95       	ret

00000506 <NrfFlushRXfifo>:
	CE_hi;
	_delay_ms(150);
}

void NrfFlushRXfifo(void){
	CSN_lo;
 506:	c1 98       	cbi	0x18, 1	; 24
	SPIWriteRead(FLUSH_RX);
 508:	82 ee       	ldi	r24, 0xE2	; 226
 50a:	25 d1       	rcall	.+586    	; 0x756 <SPIWriteRead>
	CSN_hi;
 50c:	c1 9a       	sbi	0x18, 1	; 24
 50e:	08 95       	ret

00000510 <NrfFlushTXfifo>:
}

void NrfFlushTXfifo(void){
	CSN_lo;
 510:	c1 98       	cbi	0x18, 1	; 24
	SPIWriteRead(FLUSH_TX);
 512:	81 ee       	ldi	r24, 0xE1	; 225
 514:	20 d1       	rcall	.+576    	; 0x756 <SPIWriteRead>
	CSN_hi;
 516:	c1 9a       	sbi	0x18, 1	; 24
 518:	08 95       	ret

0000051a <NrfSetTX>:
	CE_lo;
}


void NrfSetTX(void){
	CE_lo;
 51a:	c0 98       	cbi	0x18, 0	; 24
 51c:	87 e5       	ldi	r24, 0x57	; 87
 51e:	92 e0       	ldi	r25, 0x02	; 2
 520:	01 97       	sbiw	r24, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <NrfSetTX+0x6>
 524:	00 c0       	rjmp	.+0      	; 0x526 <NrfSetTX+0xc>
 526:	00 00       	nop
	_delay_us(150);
	WriteReg(CONFIG, ReadFromNrf(CONFIG) & ~(1<<PRIM_RX));// | (1<<EN_CRC) | (1<<CRCO));
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	d5 de       	rcall	.-598    	; 0x2d6 <ReadFromNrf>
 52c:	68 2f       	mov	r22, r24
 52e:	6e 7f       	andi	r22, 0xFE	; 254
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	19 df       	rcall	.-462    	; 0x366 <WriteReg>
 534:	87 e5       	ldi	r24, 0x57	; 87
 536:	92 e0       	ldi	r25, 0x02	; 2
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	f1 f7       	brne	.-4      	; 0x538 <NrfSetTX+0x1e>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <NrfSetTX+0x24>
 53e:	00 00       	nop
	_delay_us(150);
	WriteReg(CONFIG, ReadFromNrf(CONFIG) | (1<<PWR_UP));
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	c9 de       	rcall	.-622    	; 0x2d6 <ReadFromNrf>
 544:	68 2f       	mov	r22, r24
 546:	62 60       	ori	r22, 0x02	; 2
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	0d df       	rcall	.-486    	; 0x366 <WriteReg>
	WriteReg(STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
 54c:	60 e7       	ldi	r22, 0x70	; 112
 54e:	87 e0       	ldi	r24, 0x07	; 7
 550:	0a df       	rcall	.-492    	; 0x366 <WriteReg>
	NrfFlushTXfifo();
 552:	de df       	rcall	.-68     	; 0x510 <NrfFlushTXfifo>
 554:	87 e5       	ldi	r24, 0x57	; 87
 556:	92 e0       	ldi	r25, 0x02	; 2
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <NrfSetTX+0x3e>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <NrfSetTX+0x44>
 55e:	00 00       	nop
 560:	08 95       	ret

00000562 <transmit_payload>:
    WriteReg(STATUS, nRFGetStatus());
}

/************************************************************************/

void transmit_payload(uint8_t *addr, uint8_t *W_buff, uint8_t num){
 562:	ff 92       	push	r15
 564:	0f 93       	push	r16
 566:	1f 93       	push	r17
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	ec 01       	movw	r28, r24
 56e:	8b 01       	movw	r16, r22
 570:	f4 2e       	mov	r15, r20
    CE_lo;
 572:	c0 98       	cbi	0x18, 0	; 24
 574:	87 e5       	ldi	r24, 0x57	; 87
 576:	92 e0       	ldi	r25, 0x02	; 2
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	f1 f7       	brne	.-4      	; 0x578 <transmit_payload+0x16>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <transmit_payload+0x1c>
 57e:	00 00       	nop
	_delay_us(150);
	NrfSetTX();
 580:	cc df       	rcall	.-104    	; 0x51a <NrfSetTX>
	NrfSetRXAddr(0, addr);
 582:	be 01       	movw	r22, r28
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	13 df       	rcall	.-474    	; 0x3ae <NrfSetRXAddr>
	NrfSetTXAddr(addr);
 588:	ce 01       	movw	r24, r28
 58a:	89 df       	rcall	.-238    	; 0x49e <NrfSetTXAddr>
	//sprintf(TextBuffer, "W_buff addr: %i \r\n", W_buff);
	//TransmitStringToUART(TextBuffer);
    WriteToNrf(R, W_TX_PAYLOAD, W_buff, num);
 58c:	2f 2d       	mov	r18, r15
 58e:	a8 01       	movw	r20, r16
 590:	60 ea       	ldi	r22, 0xA0	; 160
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	a6 de       	rcall	.-692    	; 0x2e2 <WriteToNrf>
	//start transmittion
	send_payload();
 596:	b1 df       	rcall	.-158    	; 0x4fa <send_payload>
}
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	1f 91       	pop	r17
 59e:	0f 91       	pop	r16
 5a0:	ff 90       	pop	r15
 5a2:	08 95       	ret

000005a4 <NrfSetRX>:
	NrfFlushTXfifo();
	_delay_us(150);
}

void NrfSetRX(void){
	NrfSetRXAddr(1, addr1);
 5a4:	68 e8       	ldi	r22, 0x88	; 136
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	01 df       	rcall	.-510    	; 0x3ae <NrfSetRXAddr>
	
	WriteReg(CONFIG, ReadFromNrf(CONFIG) | (1<<PRIM_RX) | (1<<EN_CRC) | (1<<CRCO));
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	93 de       	rcall	.-730    	; 0x2d6 <ReadFromNrf>
 5b0:	68 2f       	mov	r22, r24
 5b2:	6d 60       	ori	r22, 0x0D	; 13
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	d7 de       	rcall	.-594    	; 0x366 <WriteReg>
 5b8:	87 e5       	ldi	r24, 0x57	; 87
 5ba:	92 e0       	ldi	r25, 0x02	; 2
 5bc:	01 97       	sbiw	r24, 0x01	; 1
 5be:	f1 f7       	brne	.-4      	; 0x5bc <NrfSetRX+0x18>
 5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <NrfSetRX+0x1e>
 5c2:	00 00       	nop
	_delay_us(150);
	WriteReg(CONFIG, ReadFromNrf(CONFIG) | (1<<PWR_UP));
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	87 de       	rcall	.-754    	; 0x2d6 <ReadFromNrf>
 5c8:	68 2f       	mov	r22, r24
 5ca:	62 60       	ori	r22, 0x02	; 2
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	cb de       	rcall	.-618    	; 0x366 <WriteReg>
	WriteReg(STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
 5d0:	60 e7       	ldi	r22, 0x70	; 112
 5d2:	87 e0       	ldi	r24, 0x07	; 7
 5d4:	c8 de       	rcall	.-624    	; 0x366 <WriteReg>
	NrfFlushRXfifo();
 5d6:	97 df       	rcall	.-210    	; 0x506 <NrfFlushRXfifo>
	NrfFlushTXfifo();
 5d8:	9b df       	rcall	.-202    	; 0x510 <NrfFlushTXfifo>
	CE_hi;
 5da:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5dc:	9f ef       	ldi	r25, 0xFF	; 255
 5de:	22 e5       	ldi	r18, 0x52	; 82
 5e0:	87 e0       	ldi	r24, 0x07	; 7
 5e2:	91 50       	subi	r25, 0x01	; 1
 5e4:	20 40       	sbci	r18, 0x00	; 0
 5e6:	80 40       	sbci	r24, 0x00	; 0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <NrfSetRX+0x3e>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <NrfSetRX+0x48>
 5ec:	00 00       	nop
 5ee:	08 95       	ret

000005f0 <NrfConfig>:
// Init nFR24L01+

uint8_t NrfConfig(void){
	//setup port
	
	CSN_hi;
 5f0:	c1 9a       	sbi	0x18, 1	; 24
	CE_lo;
 5f2:	c0 98       	cbi	0x18, 0	; 24
 5f4:	8f e1       	ldi	r24, 0x1F	; 31
 5f6:	9e e4       	ldi	r25, 0x4E	; 78
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <NrfConfig+0x8>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <NrfConfig+0xe>
 5fe:	00 00       	nop
	_delay_ms(5);
	
	// RF power mode and data speed - 1 Mbps, 0 dB
    WriteReg(RF_SETUP,  ReadFromNrf(RF_SETUP) | (3<<RF_PWR));
 600:	86 e0       	ldi	r24, 0x06	; 6
 602:	69 de       	rcall	.-814    	; 0x2d6 <ReadFromNrf>
 604:	68 2f       	mov	r22, r24
 606:	63 60       	ori	r22, 0x03	; 3
 608:	86 e0       	ldi	r24, 0x06	; 6
 60a:	ad de       	rcall	.-678    	; 0x366 <WriteReg>
	WriteReg(RF_SETUP, ReadFromNrf(RF_SETUP) & ~((1<<RF_DR_HIGH) | (1<<RF_DR_LOW)));
 60c:	86 e0       	ldi	r24, 0x06	; 6
 60e:	63 de       	rcall	.-826    	; 0x2d6 <ReadFromNrf>
 610:	68 2f       	mov	r22, r24
 612:	67 7d       	andi	r22, 0xD7	; 215
 614:	86 e0       	ldi	r24, 0x06	; 6
 616:	a7 de       	rcall	.-690    	; 0x366 <WriteReg>
	
	//Enable CRC with 2 bytes
	WriteReg(CONFIG, ReadFromNrf(CONFIG) | (1<<EN_CRC) | (1<<CRCO));
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	5d de       	rcall	.-838    	; 0x2d6 <ReadFromNrf>
 61c:	68 2f       	mov	r22, r24
 61e:	6c 60       	ori	r22, 0x0C	; 12
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	a1 de       	rcall	.-702    	; 0x366 <WriteReg>
	
	// Retry setup number and delay between them ??
    WriteReg(SETUP_RETR, (2<<ARD) | (10<<ARC));
 624:	6a e2       	ldi	r22, 0x2A	; 42
 626:	84 e0       	ldi	r24, 0x04	; 4
 628:	9e de       	rcall	.-708    	; 0x366 <WriteReg>
	
	// Allow the arbitrary payload length
	//WriteReg(FEATURE, 0x04); // disabled
	
	// Set arbitrary length for channels: in first channel
	WriteReg(DYNPD, 0);
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	8c e1       	ldi	r24, 0x1C	; 28
 62e:	9b de       	rcall	.-714    	; 0x366 <WriteReg>
	
	// RF choose frequency (channel) - 3 (?? GHz)
    WriteReg(RF_CH, 76); 
 630:	6c e4       	ldi	r22, 0x4C	; 76
 632:	85 e0       	ldi	r24, 0x05	; 5
 634:	98 de       	rcall	.-720    	; 0x366 <WriteReg>
	
	//Payload Width Setup 1-32 (How many bytes to send per transmission)
    WriteReg(RX_PW_P0, PAYLOAD_LENGTH);
 636:	60 e1       	ldi	r22, 0x10	; 16
 638:	81 e1       	ldi	r24, 0x11	; 17
 63a:	95 de       	rcall	.-726    	; 0x366 <WriteReg>
	WriteReg(RX_PW_P1, PAYLOAD_LENGTH);
 63c:	60 e1       	ldi	r22, 0x10	; 16
 63e:	82 e1       	ldi	r24, 0x12	; 18
 640:	92 de       	rcall	.-732    	; 0x366 <WriteReg>
	WriteReg(RX_PW_P2, PAYLOAD_LENGTH);
 642:	60 e1       	ldi	r22, 0x10	; 16
 644:	83 e1       	ldi	r24, 0x13	; 19
 646:	8f de       	rcall	.-738    	; 0x366 <WriteReg>
	WriteReg(RX_PW_P3, PAYLOAD_LENGTH);
 648:	60 e1       	ldi	r22, 0x10	; 16
 64a:	84 e1       	ldi	r24, 0x14	; 20
 64c:	8c de       	rcall	.-744    	; 0x366 <WriteReg>
	WriteReg(RX_PW_P4, PAYLOAD_LENGTH);
 64e:	60 e1       	ldi	r22, 0x10	; 16
 650:	85 e1       	ldi	r24, 0x15	; 21
 652:	89 de       	rcall	.-750    	; 0x366 <WriteReg>
	WriteReg(RX_PW_P5, PAYLOAD_LENGTH);
 654:	60 e1       	ldi	r22, 0x10	; 16
 656:	86 e1       	ldi	r24, 0x16	; 22
 658:	86 de       	rcall	.-756    	; 0x366 <WriteReg>
	
	// Enabling data pipes
    WriteReg(EN_RXADDR, 0);
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	82 e0       	ldi	r24, 0x02	; 2
 65e:	83 de       	rcall	.-762    	; 0x366 <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P0));
 660:	82 e0       	ldi	r24, 0x02	; 2
 662:	39 de       	rcall	.-910    	; 0x2d6 <ReadFromNrf>
 664:	68 2f       	mov	r22, r24
 666:	61 60       	ori	r22, 0x01	; 1
 668:	82 e0       	ldi	r24, 0x02	; 2
 66a:	7d de       	rcall	.-774    	; 0x366 <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P1));
 66c:	82 e0       	ldi	r24, 0x02	; 2
 66e:	33 de       	rcall	.-922    	; 0x2d6 <ReadFromNrf>
 670:	68 2f       	mov	r22, r24
 672:	62 60       	ori	r22, 0x02	; 2
 674:	82 e0       	ldi	r24, 0x02	; 2
 676:	77 de       	rcall	.-786    	; 0x366 <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P2));
 678:	82 e0       	ldi	r24, 0x02	; 2
 67a:	2d de       	rcall	.-934    	; 0x2d6 <ReadFromNrf>
 67c:	68 2f       	mov	r22, r24
 67e:	64 60       	ori	r22, 0x04	; 4
 680:	82 e0       	ldi	r24, 0x02	; 2
 682:	71 de       	rcall	.-798    	; 0x366 <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P3));
 684:	82 e0       	ldi	r24, 0x02	; 2
 686:	27 de       	rcall	.-946    	; 0x2d6 <ReadFromNrf>
 688:	68 2f       	mov	r22, r24
 68a:	68 60       	ori	r22, 0x08	; 8
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	6b de       	rcall	.-810    	; 0x366 <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P4));
 690:	82 e0       	ldi	r24, 0x02	; 2
 692:	21 de       	rcall	.-958    	; 0x2d6 <ReadFromNrf>
 694:	68 2f       	mov	r22, r24
 696:	60 61       	ori	r22, 0x10	; 16
 698:	82 e0       	ldi	r24, 0x02	; 2
 69a:	65 de       	rcall	.-822    	; 0x366 <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P5));
 69c:	82 e0       	ldi	r24, 0x02	; 2
 69e:	1b de       	rcall	.-970    	; 0x2d6 <ReadFromNrf>
 6a0:	68 2f       	mov	r22, r24
 6a2:	60 62       	ori	r22, 0x20	; 32
 6a4:	82 e0       	ldi	r24, 0x02	; 2
 6a6:	5f de       	rcall	.-834    	; 0x366 <WriteReg>
	
    // Enable Auto-acknowledgment
    WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P0));
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	15 de       	rcall	.-982    	; 0x2d6 <ReadFromNrf>
 6ac:	68 2f       	mov	r22, r24
 6ae:	61 60       	ori	r22, 0x01	; 1
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	59 de       	rcall	.-846    	; 0x366 <WriteReg>
	WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P1));
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	0f de       	rcall	.-994    	; 0x2d6 <ReadFromNrf>
 6b8:	68 2f       	mov	r22, r24
 6ba:	62 60       	ori	r22, 0x02	; 2
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	53 de       	rcall	.-858    	; 0x366 <WriteReg>
	WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P2));
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	09 de       	rcall	.-1006   	; 0x2d6 <ReadFromNrf>
 6c4:	68 2f       	mov	r22, r24
 6c6:	64 60       	ori	r22, 0x04	; 4
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	4d de       	rcall	.-870    	; 0x366 <WriteReg>
	WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P3));
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	03 de       	rcall	.-1018   	; 0x2d6 <ReadFromNrf>
 6d0:	68 2f       	mov	r22, r24
 6d2:	68 60       	ori	r22, 0x08	; 8
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	47 de       	rcall	.-882    	; 0x366 <WriteReg>
	WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P4));
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	fd dd       	rcall	.-1030   	; 0x2d6 <ReadFromNrf>
 6dc:	68 2f       	mov	r22, r24
 6de:	60 61       	ori	r22, 0x10	; 16
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	41 de       	rcall	.-894    	; 0x366 <WriteReg>
	WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P5));
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	f7 dd       	rcall	.-1042   	; 0x2d6 <ReadFromNrf>
 6e8:	68 2f       	mov	r22, r24
 6ea:	60 62       	ori	r22, 0x20	; 32
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	3b de       	rcall	.-906    	; 0x366 <WriteReg>
	
	// Address width - 5 bytes
    WriteReg(SETUP_AW, 0x03);
 6f0:	63 e0       	ldi	r22, 0x03	; 3
 6f2:	83 e0       	ldi	r24, 0x03	; 3
 6f4:	38 de       	rcall	.-912    	; 0x366 <WriteReg>
	
	// Set RX address
	NrfSetRXAddr(0,addr0);
 6f6:	6d e8       	ldi	r22, 0x8D	; 141
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	58 de       	rcall	.-848    	; 0x3ae <NrfSetRXAddr>
	NrfSetRXAddr(1,addr1);
 6fe:	68 e8       	ldi	r22, 0x88	; 136
 700:	70 e0       	ldi	r23, 0x00	; 0
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	54 de       	rcall	.-856    	; 0x3ae <NrfSetRXAddr>
	NrfSetRXAddr(2,addr2);
 706:	63 e8       	ldi	r22, 0x83	; 131
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	82 e0       	ldi	r24, 0x02	; 2
 70c:	50 de       	rcall	.-864    	; 0x3ae <NrfSetRXAddr>
	NrfSetRXAddr(3,addr3);
 70e:	6e e7       	ldi	r22, 0x7E	; 126
 710:	70 e0       	ldi	r23, 0x00	; 0
 712:	83 e0       	ldi	r24, 0x03	; 3
 714:	4c de       	rcall	.-872    	; 0x3ae <NrfSetRXAddr>
	NrfSetRXAddr(4,addr4);
 716:	69 e7       	ldi	r22, 0x79	; 121
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	84 e0       	ldi	r24, 0x04	; 4
 71c:	48 de       	rcall	.-880    	; 0x3ae <NrfSetRXAddr>
	NrfSetRXAddr(5,addr5);
 71e:	64 e7       	ldi	r22, 0x74	; 116
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	85 e0       	ldi	r24, 0x05	; 5
 724:	44 de       	rcall	.-888    	; 0x3ae <NrfSetRXAddr>
	
	
	// Set TX address
	NrfSetTXAddr(addrtx);
 726:	8f e6       	ldi	r24, 0x6F	; 111
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	b9 de       	rcall	.-654    	; 0x49e <NrfSetTXAddr>

	// Set RX mode
	NrfSetRX();
 72c:	3b df       	rcall	.-394    	; 0x5a4 <NrfSetRX>
	return 1;//(ReadFromNrf(CONFIG) == ((1<<EN_CRC) | (1<<CRCO) | (1<<PWR_UP) | (1<<PRIM_RX))) ? 1 : 0;
	
}
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	08 95       	ret

00000732 <reuse_payload>:
	SPIWriteRead(FLUSH_TX);
	CSN_hi;
}

void reuse_payload(void){
	CSN_lo;
 732:	c1 98       	cbi	0x18, 1	; 24
	SPIWriteRead(REUSE_TX_PL);
 734:	83 ee       	ldi	r24, 0xE3	; 227
 736:	0f d0       	rcall	.+30     	; 0x756 <SPIWriteRead>
	CSN_hi;
 738:	c1 9a       	sbi	0x18, 1	; 24
 73a:	08 95       	ret

0000073c <SPIInit>:
#include "SPIMethods.h"
#include "macros.h"
// SPI Init
void SPIInit(void){
	
	DDR_SPI &= ~((1<<SPI_MISO) | (1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); // input
 73c:	87 b3       	in	r24, 0x17	; 23
 73e:	83 7c       	andi	r24, 0xC3	; 195
 740:	87 bb       	out	0x17, r24	; 23
    DDR_SPI |= ( (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<SPI_SS)); //output
 742:	87 b3       	in	r24, 0x17	; 23
 744:	8c 62       	ori	r24, 0x2C	; 44
 746:	87 bb       	out	0x17, r24	; 23
	
	CSN_ddr |=(1<<CSN_pin); // output
 748:	b9 9a       	sbi	0x17, 1	; 23
    CE_ddr |=(1<<CE_pin); // output
 74a:	b8 9a       	sbi	0x17, 0	; 23
	
	SPCR = ((0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(1<<SPR0));
 74c:	81 e5       	ldi	r24, 0x51	; 81
 74e:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	8e b9       	out	0x0e, r24	; 14
 754:	08 95       	ret

00000756 <SPIWriteRead>:
}

//Send data via SPI to nRF
uint8_t SPIWriteRead(uint8_t data){
    SPDR=data;
 756:	8f b9       	out	0x0f, r24	; 15
    while((SPSR & (1<<SPIF)) == 0);
 758:	77 9b       	sbis	0x0e, 7	; 14
 75a:	fe cf       	rjmp	.-4      	; 0x758 <SPIWriteRead+0x2>
    return SPDR;
 75c:	8f b1       	in	r24, 0x0f	; 15
}
 75e:	08 95       	ret

00000760 <TransmitUART>:
}

void TransmitUART(unsigned char data)
{
	//Wait until the Transmitter is ready
	while (! (UCSRA & (1 << UDRE)) ); 
 760:	5d 9b       	sbis	0x0b, 5	; 11
 762:	fe cf       	rjmp	.-4      	; 0x760 <TransmitUART>

	//Put data to UDR register
	UDR = data;
 764:	8c b9       	out	0x0c, r24	; 12
 766:	08 95       	ret

00000768 <TransmitStringToUART>:
}

void TransmitStringToUART(char *MyString)
{
 768:	1f 93       	push	r17
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	ec 01       	movw	r28, r24
	
	   for(unsigned char i=0;i<strlen(MyString);i++)
 770:	10 e0       	ldi	r17, 0x00	; 0
 772:	06 c0       	rjmp	.+12     	; 0x780 <TransmitStringToUART+0x18>
	   { 
			TransmitUART(MyString[i]);
 774:	fe 01       	movw	r30, r28
 776:	e2 0f       	add	r30, r18
 778:	f3 1f       	adc	r31, r19
 77a:	80 81       	ld	r24, Z
 77c:	f1 df       	rcall	.-30     	; 0x760 <TransmitUART>
}

void TransmitStringToUART(char *MyString)
{
	
	   for(unsigned char i=0;i<strlen(MyString);i++)
 77e:	1f 5f       	subi	r17, 0xFF	; 255
 780:	21 2f       	mov	r18, r17
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	fe 01       	movw	r30, r28
 786:	01 90       	ld	r0, Z+
 788:	00 20       	and	r0, r0
 78a:	e9 f7       	brne	.-6      	; 0x786 <TransmitStringToUART+0x1e>
 78c:	31 97       	sbiw	r30, 0x01	; 1
 78e:	ec 1b       	sub	r30, r28
 790:	fd 0b       	sbc	r31, r29
 792:	2e 17       	cp	r18, r30
 794:	3f 07       	cpc	r19, r31
 796:	70 f3       	brcs	.-36     	; 0x774 <TransmitStringToUART+0xc>
	   { 
			TransmitUART(MyString[i]);
	   }		
}
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	1f 91       	pop	r17
 79e:	08 95       	ret

000007a0 <InitializeUART>:

//InitializeUART(19200,0,8,1,1);
void InitializeUART(uint16_t baud, char AsyncDoubleSpeed, char DataSizeInBits, char ParityEVENorODD, char StopBits)
{
 7a0:	0f 93       	push	r16
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	d4 2f       	mov	r29, r20
 7a8:	c2 2f       	mov	r28, r18
	//UCSRC=0x86;
	uint16_t UBBRValue= ((F_CPU/16/baud))-1;
 7aa:	9c 01       	movw	r18, r24
 7ac:	40 e0       	ldi	r20, 0x00	; 0
 7ae:	50 e0       	ldi	r21, 0x00	; 0
	
	if (AsyncDoubleSpeed == 1) 
 7b0:	61 30       	cpi	r22, 0x01	; 1
 7b2:	41 f0       	breq	.+16     	; 0x7c4 <InitializeUART+0x24>

//InitializeUART(19200,0,8,1,1);
void InitializeUART(uint16_t baud, char AsyncDoubleSpeed, char DataSizeInBits, char ParityEVENorODD, char StopBits)
{
	//UCSRC=0x86;
	uint16_t UBBRValue= ((F_CPU/16/baud))-1;
 7b4:	60 e4       	ldi	r22, 0x40	; 64
 7b6:	72 e4       	ldi	r23, 0x42	; 66
 7b8:	8f e0       	ldi	r24, 0x0F	; 15
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	3a d0       	rcall	.+116    	; 0x832 <__divmodsi4>
 7be:	21 50       	subi	r18, 0x01	; 1
 7c0:	31 09       	sbc	r19, r1
 7c2:	09 c0       	rjmp	.+18     	; 0x7d6 <InitializeUART+0x36>
	
	if (AsyncDoubleSpeed == 1) 
	{
		UBBRValue = ((F_CPU /8/baud))-1;
 7c4:	60 e8       	ldi	r22, 0x80	; 128
 7c6:	74 e8       	ldi	r23, 0x84	; 132
 7c8:	8e e1       	ldi	r24, 0x1E	; 30
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	32 d0       	rcall	.+100    	; 0x832 <__divmodsi4>
 7ce:	21 50       	subi	r18, 0x01	; 1
 7d0:	31 09       	sbc	r19, r1
		UCSRA = (1 << U2X); //setting the U2X bit to 1 for double speed asynchronous
 7d2:	82 e0       	ldi	r24, 0x02	; 2
 7d4:	8b b9       	out	0x0b, r24	; 11
	}	

	//Enable the receiver and transmitter
	UCSRB = (1 << RXEN) | (1 << TXEN);
 7d6:	88 e1       	ldi	r24, 0x18	; 24
 7d8:	8a b9       	out	0x0a, r24	; 10

	//UCSRC |= (1<<URSEL);

	//Set 2 stop bits
	if(StopBits ==2) UCSRC = (1 << USBS);
 7da:	02 30       	cpi	r16, 0x02	; 2
 7dc:	11 f4       	brne	.+4      	; 0x7e2 <InitializeUART+0x42>
 7de:	88 e0       	ldi	r24, 0x08	; 8
 7e0:	80 bd       	out	0x20, r24	; 32
	
	if(ParityEVENorODD == EVEN) UCSRC |= (1 << UPM1); //Sets parity to EVEN
 7e2:	c1 11       	cpse	r28, r1
 7e4:	04 c0       	rjmp	.+8      	; 0x7ee <InitializeUART+0x4e>
 7e6:	80 b5       	in	r24, 0x20	; 32
 7e8:	80 62       	ori	r24, 0x20	; 32
 7ea:	80 bd       	out	0x20, r24	; 32
 7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <InitializeUART+0x58>
	if(ParityEVENorODD == ODD) UCSRC |= (3 << UPM0); //Sets parity to ODD	
 7ee:	c1 30       	cpi	r28, 0x01	; 1
 7f0:	19 f4       	brne	.+6      	; 0x7f8 <InitializeUART+0x58>
 7f2:	80 b5       	in	r24, 0x20	; 32
 7f4:	80 63       	ori	r24, 0x30	; 48
 7f6:	80 bd       	out	0x20, r24	; 32
	
	
	if(DataSizeInBits == 6) UCSRC |= (1 << UCSZ0); //6-bit data length
 7f8:	d6 30       	cpi	r29, 0x06	; 6
 7fa:	21 f4       	brne	.+8      	; 0x804 <InitializeUART+0x64>
 7fc:	80 b5       	in	r24, 0x20	; 32
 7fe:	82 60       	ori	r24, 0x02	; 2
 800:	80 bd       	out	0x20, r24	; 32
 802:	0c c0       	rjmp	.+24     	; 0x81c <InitializeUART+0x7c>
	if(DataSizeInBits == 7) UCSRC |= (2 << UCSZ0); //7-bit data length
 804:	d7 30       	cpi	r29, 0x07	; 7
 806:	21 f4       	brne	.+8      	; 0x810 <InitializeUART+0x70>
 808:	80 b5       	in	r24, 0x20	; 32
 80a:	84 60       	ori	r24, 0x04	; 4
 80c:	80 bd       	out	0x20, r24	; 32
 80e:	0b c0       	rjmp	.+22     	; 0x826 <InitializeUART+0x86>
	if(DataSizeInBits == 8) UCSRC |= (3 << UCSZ0); //8-bit data length
 810:	d8 30       	cpi	r29, 0x08	; 8
 812:	21 f4       	brne	.+8      	; 0x81c <InitializeUART+0x7c>
 814:	80 b5       	in	r24, 0x20	; 32
 816:	86 60       	ori	r24, 0x06	; 6
 818:	80 bd       	out	0x20, r24	; 32
 81a:	05 c0       	rjmp	.+10     	; 0x826 <InitializeUART+0x86>
	if(DataSizeInBits == 9) UCSRC |= (7 << UCSZ0); //9-bit data length	
 81c:	d9 30       	cpi	r29, 0x09	; 9
 81e:	19 f4       	brne	.+6      	; 0x826 <InitializeUART+0x86>
 820:	80 b5       	in	r24, 0x20	; 32
 822:	8e 60       	ori	r24, 0x0E	; 14
 824:	80 bd       	out	0x20, r24	; 32
	
	//Put the upper part of the baud number here (bits 8 to 11)
	UBRRH =(unsigned char) (UBBRValue >> 8);
 826:	30 bd       	out	0x20, r19	; 32

	//Put the remaining part of the baud number here
	UBRRL = (unsigned char) UBBRValue; 
 828:	29 b9       	out	0x09, r18	; 9
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	0f 91       	pop	r16
 830:	08 95       	ret

00000832 <__divmodsi4>:
 832:	05 2e       	mov	r0, r21
 834:	97 fb       	bst	r25, 7
 836:	16 f4       	brtc	.+4      	; 0x83c <__divmodsi4+0xa>
 838:	00 94       	com	r0
 83a:	0f d0       	rcall	.+30     	; 0x85a <__negsi2>
 83c:	57 fd       	sbrc	r21, 7
 83e:	05 d0       	rcall	.+10     	; 0x84a <__divmodsi4_neg2>
 840:	14 d0       	rcall	.+40     	; 0x86a <__udivmodsi4>
 842:	07 fc       	sbrc	r0, 7
 844:	02 d0       	rcall	.+4      	; 0x84a <__divmodsi4_neg2>
 846:	46 f4       	brtc	.+16     	; 0x858 <__divmodsi4_exit>
 848:	08 c0       	rjmp	.+16     	; 0x85a <__negsi2>

0000084a <__divmodsi4_neg2>:
 84a:	50 95       	com	r21
 84c:	40 95       	com	r20
 84e:	30 95       	com	r19
 850:	21 95       	neg	r18
 852:	3f 4f       	sbci	r19, 0xFF	; 255
 854:	4f 4f       	sbci	r20, 0xFF	; 255
 856:	5f 4f       	sbci	r21, 0xFF	; 255

00000858 <__divmodsi4_exit>:
 858:	08 95       	ret

0000085a <__negsi2>:
 85a:	90 95       	com	r25
 85c:	80 95       	com	r24
 85e:	70 95       	com	r23
 860:	61 95       	neg	r22
 862:	7f 4f       	sbci	r23, 0xFF	; 255
 864:	8f 4f       	sbci	r24, 0xFF	; 255
 866:	9f 4f       	sbci	r25, 0xFF	; 255
 868:	08 95       	ret

0000086a <__udivmodsi4>:
 86a:	a1 e2       	ldi	r26, 0x21	; 33
 86c:	1a 2e       	mov	r1, r26
 86e:	aa 1b       	sub	r26, r26
 870:	bb 1b       	sub	r27, r27
 872:	fd 01       	movw	r30, r26
 874:	0d c0       	rjmp	.+26     	; 0x890 <__udivmodsi4_ep>

00000876 <__udivmodsi4_loop>:
 876:	aa 1f       	adc	r26, r26
 878:	bb 1f       	adc	r27, r27
 87a:	ee 1f       	adc	r30, r30
 87c:	ff 1f       	adc	r31, r31
 87e:	a2 17       	cp	r26, r18
 880:	b3 07       	cpc	r27, r19
 882:	e4 07       	cpc	r30, r20
 884:	f5 07       	cpc	r31, r21
 886:	20 f0       	brcs	.+8      	; 0x890 <__udivmodsi4_ep>
 888:	a2 1b       	sub	r26, r18
 88a:	b3 0b       	sbc	r27, r19
 88c:	e4 0b       	sbc	r30, r20
 88e:	f5 0b       	sbc	r31, r21

00000890 <__udivmodsi4_ep>:
 890:	66 1f       	adc	r22, r22
 892:	77 1f       	adc	r23, r23
 894:	88 1f       	adc	r24, r24
 896:	99 1f       	adc	r25, r25
 898:	1a 94       	dec	r1
 89a:	69 f7       	brne	.-38     	; 0x876 <__udivmodsi4_loop>
 89c:	60 95       	com	r22
 89e:	70 95       	com	r23
 8a0:	80 95       	com	r24
 8a2:	90 95       	com	r25
 8a4:	9b 01       	movw	r18, r22
 8a6:	ac 01       	movw	r20, r24
 8a8:	bd 01       	movw	r22, r26
 8aa:	cf 01       	movw	r24, r30
 8ac:	08 95       	ret

000008ae <sprintf>:
 8ae:	ae e0       	ldi	r26, 0x0E	; 14
 8b0:	b0 e0       	ldi	r27, 0x00	; 0
 8b2:	ec e5       	ldi	r30, 0x5C	; 92
 8b4:	f4 e0       	ldi	r31, 0x04	; 4
 8b6:	98 c2       	rjmp	.+1328   	; 0xde8 <__prologue_saves__+0x1c>
 8b8:	0d 89       	ldd	r16, Y+21	; 0x15
 8ba:	1e 89       	ldd	r17, Y+22	; 0x16
 8bc:	86 e0       	ldi	r24, 0x06	; 6
 8be:	8c 83       	std	Y+4, r24	; 0x04
 8c0:	1a 83       	std	Y+2, r17	; 0x02
 8c2:	09 83       	std	Y+1, r16	; 0x01
 8c4:	8f ef       	ldi	r24, 0xFF	; 255
 8c6:	9f e7       	ldi	r25, 0x7F	; 127
 8c8:	9e 83       	std	Y+6, r25	; 0x06
 8ca:	8d 83       	std	Y+5, r24	; 0x05
 8cc:	ae 01       	movw	r20, r28
 8ce:	47 5e       	subi	r20, 0xE7	; 231
 8d0:	5f 4f       	sbci	r21, 0xFF	; 255
 8d2:	6f 89       	ldd	r22, Y+23	; 0x17
 8d4:	78 8d       	ldd	r23, Y+24	; 0x18
 8d6:	ce 01       	movw	r24, r28
 8d8:	01 96       	adiw	r24, 0x01	; 1
 8da:	09 d0       	rcall	.+18     	; 0x8ee <vfprintf>
 8dc:	2f 81       	ldd	r18, Y+7	; 0x07
 8de:	38 85       	ldd	r19, Y+8	; 0x08
 8e0:	f8 01       	movw	r30, r16
 8e2:	e2 0f       	add	r30, r18
 8e4:	f3 1f       	adc	r31, r19
 8e6:	10 82       	st	Z, r1
 8e8:	2e 96       	adiw	r28, 0x0e	; 14
 8ea:	e4 e0       	ldi	r30, 0x04	; 4
 8ec:	99 c2       	rjmp	.+1330   	; 0xe20 <__epilogue_restores__+0x1c>

000008ee <vfprintf>:
 8ee:	ac e0       	ldi	r26, 0x0C	; 12
 8f0:	b0 e0       	ldi	r27, 0x00	; 0
 8f2:	ec e7       	ldi	r30, 0x7C	; 124
 8f4:	f4 e0       	ldi	r31, 0x04	; 4
 8f6:	6a c2       	rjmp	.+1236   	; 0xdcc <__prologue_saves__>
 8f8:	7c 01       	movw	r14, r24
 8fa:	6b 01       	movw	r12, r22
 8fc:	8a 01       	movw	r16, r20
 8fe:	fc 01       	movw	r30, r24
 900:	17 82       	std	Z+7, r1	; 0x07
 902:	16 82       	std	Z+6, r1	; 0x06
 904:	83 81       	ldd	r24, Z+3	; 0x03
 906:	81 ff       	sbrs	r24, 1
 908:	b0 c1       	rjmp	.+864    	; 0xc6a <vfprintf+0x37c>
 90a:	ce 01       	movw	r24, r28
 90c:	01 96       	adiw	r24, 0x01	; 1
 90e:	4c 01       	movw	r8, r24
 910:	f7 01       	movw	r30, r14
 912:	93 81       	ldd	r25, Z+3	; 0x03
 914:	f6 01       	movw	r30, r12
 916:	93 fd       	sbrc	r25, 3
 918:	85 91       	lpm	r24, Z+
 91a:	93 ff       	sbrs	r25, 3
 91c:	81 91       	ld	r24, Z+
 91e:	6f 01       	movw	r12, r30
 920:	88 23       	and	r24, r24
 922:	09 f4       	brne	.+2      	; 0x926 <vfprintf+0x38>
 924:	9e c1       	rjmp	.+828    	; 0xc62 <vfprintf+0x374>
 926:	85 32       	cpi	r24, 0x25	; 37
 928:	39 f4       	brne	.+14     	; 0x938 <vfprintf+0x4a>
 92a:	93 fd       	sbrc	r25, 3
 92c:	85 91       	lpm	r24, Z+
 92e:	93 ff       	sbrs	r25, 3
 930:	81 91       	ld	r24, Z+
 932:	6f 01       	movw	r12, r30
 934:	85 32       	cpi	r24, 0x25	; 37
 936:	21 f4       	brne	.+8      	; 0x940 <vfprintf+0x52>
 938:	b7 01       	movw	r22, r14
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	b1 d1       	rcall	.+866    	; 0xca0 <fputc>
 93e:	e8 cf       	rjmp	.-48     	; 0x910 <vfprintf+0x22>
 940:	51 2c       	mov	r5, r1
 942:	31 2c       	mov	r3, r1
 944:	20 e0       	ldi	r18, 0x00	; 0
 946:	20 32       	cpi	r18, 0x20	; 32
 948:	a0 f4       	brcc	.+40     	; 0x972 <vfprintf+0x84>
 94a:	8b 32       	cpi	r24, 0x2B	; 43
 94c:	69 f0       	breq	.+26     	; 0x968 <vfprintf+0x7a>
 94e:	30 f4       	brcc	.+12     	; 0x95c <vfprintf+0x6e>
 950:	80 32       	cpi	r24, 0x20	; 32
 952:	59 f0       	breq	.+22     	; 0x96a <vfprintf+0x7c>
 954:	83 32       	cpi	r24, 0x23	; 35
 956:	69 f4       	brne	.+26     	; 0x972 <vfprintf+0x84>
 958:	20 61       	ori	r18, 0x10	; 16
 95a:	2c c0       	rjmp	.+88     	; 0x9b4 <vfprintf+0xc6>
 95c:	8d 32       	cpi	r24, 0x2D	; 45
 95e:	39 f0       	breq	.+14     	; 0x96e <vfprintf+0x80>
 960:	80 33       	cpi	r24, 0x30	; 48
 962:	39 f4       	brne	.+14     	; 0x972 <vfprintf+0x84>
 964:	21 60       	ori	r18, 0x01	; 1
 966:	26 c0       	rjmp	.+76     	; 0x9b4 <vfprintf+0xc6>
 968:	22 60       	ori	r18, 0x02	; 2
 96a:	24 60       	ori	r18, 0x04	; 4
 96c:	23 c0       	rjmp	.+70     	; 0x9b4 <vfprintf+0xc6>
 96e:	28 60       	ori	r18, 0x08	; 8
 970:	21 c0       	rjmp	.+66     	; 0x9b4 <vfprintf+0xc6>
 972:	27 fd       	sbrc	r18, 7
 974:	27 c0       	rjmp	.+78     	; 0x9c4 <vfprintf+0xd6>
 976:	30 ed       	ldi	r19, 0xD0	; 208
 978:	38 0f       	add	r19, r24
 97a:	3a 30       	cpi	r19, 0x0A	; 10
 97c:	78 f4       	brcc	.+30     	; 0x99c <vfprintf+0xae>
 97e:	26 ff       	sbrs	r18, 6
 980:	06 c0       	rjmp	.+12     	; 0x98e <vfprintf+0xa0>
 982:	fa e0       	ldi	r31, 0x0A	; 10
 984:	5f 9e       	mul	r5, r31
 986:	30 0d       	add	r19, r0
 988:	11 24       	eor	r1, r1
 98a:	53 2e       	mov	r5, r19
 98c:	13 c0       	rjmp	.+38     	; 0x9b4 <vfprintf+0xc6>
 98e:	8a e0       	ldi	r24, 0x0A	; 10
 990:	38 9e       	mul	r3, r24
 992:	30 0d       	add	r19, r0
 994:	11 24       	eor	r1, r1
 996:	33 2e       	mov	r3, r19
 998:	20 62       	ori	r18, 0x20	; 32
 99a:	0c c0       	rjmp	.+24     	; 0x9b4 <vfprintf+0xc6>
 99c:	8e 32       	cpi	r24, 0x2E	; 46
 99e:	21 f4       	brne	.+8      	; 0x9a8 <vfprintf+0xba>
 9a0:	26 fd       	sbrc	r18, 6
 9a2:	5f c1       	rjmp	.+702    	; 0xc62 <vfprintf+0x374>
 9a4:	20 64       	ori	r18, 0x40	; 64
 9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <vfprintf+0xc6>
 9a8:	8c 36       	cpi	r24, 0x6C	; 108
 9aa:	11 f4       	brne	.+4      	; 0x9b0 <vfprintf+0xc2>
 9ac:	20 68       	ori	r18, 0x80	; 128
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <vfprintf+0xc6>
 9b0:	88 36       	cpi	r24, 0x68	; 104
 9b2:	41 f4       	brne	.+16     	; 0x9c4 <vfprintf+0xd6>
 9b4:	f6 01       	movw	r30, r12
 9b6:	93 fd       	sbrc	r25, 3
 9b8:	85 91       	lpm	r24, Z+
 9ba:	93 ff       	sbrs	r25, 3
 9bc:	81 91       	ld	r24, Z+
 9be:	6f 01       	movw	r12, r30
 9c0:	81 11       	cpse	r24, r1
 9c2:	c1 cf       	rjmp	.-126    	; 0x946 <vfprintf+0x58>
 9c4:	98 2f       	mov	r25, r24
 9c6:	9f 7d       	andi	r25, 0xDF	; 223
 9c8:	95 54       	subi	r25, 0x45	; 69
 9ca:	93 30       	cpi	r25, 0x03	; 3
 9cc:	28 f4       	brcc	.+10     	; 0x9d8 <vfprintf+0xea>
 9ce:	0c 5f       	subi	r16, 0xFC	; 252
 9d0:	1f 4f       	sbci	r17, 0xFF	; 255
 9d2:	ff e3       	ldi	r31, 0x3F	; 63
 9d4:	f9 83       	std	Y+1, r31	; 0x01
 9d6:	0d c0       	rjmp	.+26     	; 0x9f2 <vfprintf+0x104>
 9d8:	83 36       	cpi	r24, 0x63	; 99
 9da:	31 f0       	breq	.+12     	; 0x9e8 <vfprintf+0xfa>
 9dc:	83 37       	cpi	r24, 0x73	; 115
 9de:	71 f0       	breq	.+28     	; 0x9fc <vfprintf+0x10e>
 9e0:	83 35       	cpi	r24, 0x53	; 83
 9e2:	09 f0       	breq	.+2      	; 0x9e6 <vfprintf+0xf8>
 9e4:	57 c0       	rjmp	.+174    	; 0xa94 <vfprintf+0x1a6>
 9e6:	21 c0       	rjmp	.+66     	; 0xa2a <vfprintf+0x13c>
 9e8:	f8 01       	movw	r30, r16
 9ea:	80 81       	ld	r24, Z
 9ec:	89 83       	std	Y+1, r24	; 0x01
 9ee:	0e 5f       	subi	r16, 0xFE	; 254
 9f0:	1f 4f       	sbci	r17, 0xFF	; 255
 9f2:	44 24       	eor	r4, r4
 9f4:	43 94       	inc	r4
 9f6:	51 2c       	mov	r5, r1
 9f8:	54 01       	movw	r10, r8
 9fa:	14 c0       	rjmp	.+40     	; 0xa24 <vfprintf+0x136>
 9fc:	38 01       	movw	r6, r16
 9fe:	f2 e0       	ldi	r31, 0x02	; 2
 a00:	6f 0e       	add	r6, r31
 a02:	71 1c       	adc	r7, r1
 a04:	f8 01       	movw	r30, r16
 a06:	a0 80       	ld	r10, Z
 a08:	b1 80       	ldd	r11, Z+1	; 0x01
 a0a:	26 ff       	sbrs	r18, 6
 a0c:	03 c0       	rjmp	.+6      	; 0xa14 <vfprintf+0x126>
 a0e:	65 2d       	mov	r22, r5
 a10:	70 e0       	ldi	r23, 0x00	; 0
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <vfprintf+0x12a>
 a14:	6f ef       	ldi	r22, 0xFF	; 255
 a16:	7f ef       	ldi	r23, 0xFF	; 255
 a18:	c5 01       	movw	r24, r10
 a1a:	2c 87       	std	Y+12, r18	; 0x0c
 a1c:	36 d1       	rcall	.+620    	; 0xc8a <strnlen>
 a1e:	2c 01       	movw	r4, r24
 a20:	83 01       	movw	r16, r6
 a22:	2c 85       	ldd	r18, Y+12	; 0x0c
 a24:	2f 77       	andi	r18, 0x7F	; 127
 a26:	22 2e       	mov	r2, r18
 a28:	16 c0       	rjmp	.+44     	; 0xa56 <vfprintf+0x168>
 a2a:	38 01       	movw	r6, r16
 a2c:	f2 e0       	ldi	r31, 0x02	; 2
 a2e:	6f 0e       	add	r6, r31
 a30:	71 1c       	adc	r7, r1
 a32:	f8 01       	movw	r30, r16
 a34:	a0 80       	ld	r10, Z
 a36:	b1 80       	ldd	r11, Z+1	; 0x01
 a38:	26 ff       	sbrs	r18, 6
 a3a:	03 c0       	rjmp	.+6      	; 0xa42 <vfprintf+0x154>
 a3c:	65 2d       	mov	r22, r5
 a3e:	70 e0       	ldi	r23, 0x00	; 0
 a40:	02 c0       	rjmp	.+4      	; 0xa46 <vfprintf+0x158>
 a42:	6f ef       	ldi	r22, 0xFF	; 255
 a44:	7f ef       	ldi	r23, 0xFF	; 255
 a46:	c5 01       	movw	r24, r10
 a48:	2c 87       	std	Y+12, r18	; 0x0c
 a4a:	14 d1       	rcall	.+552    	; 0xc74 <strnlen_P>
 a4c:	2c 01       	movw	r4, r24
 a4e:	2c 85       	ldd	r18, Y+12	; 0x0c
 a50:	20 68       	ori	r18, 0x80	; 128
 a52:	22 2e       	mov	r2, r18
 a54:	83 01       	movw	r16, r6
 a56:	23 fc       	sbrc	r2, 3
 a58:	19 c0       	rjmp	.+50     	; 0xa8c <vfprintf+0x19e>
 a5a:	83 2d       	mov	r24, r3
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	48 16       	cp	r4, r24
 a60:	59 06       	cpc	r5, r25
 a62:	a0 f4       	brcc	.+40     	; 0xa8c <vfprintf+0x19e>
 a64:	b7 01       	movw	r22, r14
 a66:	80 e2       	ldi	r24, 0x20	; 32
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	1a d1       	rcall	.+564    	; 0xca0 <fputc>
 a6c:	3a 94       	dec	r3
 a6e:	f5 cf       	rjmp	.-22     	; 0xa5a <vfprintf+0x16c>
 a70:	f5 01       	movw	r30, r10
 a72:	27 fc       	sbrc	r2, 7
 a74:	85 91       	lpm	r24, Z+
 a76:	27 fe       	sbrs	r2, 7
 a78:	81 91       	ld	r24, Z+
 a7a:	5f 01       	movw	r10, r30
 a7c:	b7 01       	movw	r22, r14
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	0f d1       	rcall	.+542    	; 0xca0 <fputc>
 a82:	31 10       	cpse	r3, r1
 a84:	3a 94       	dec	r3
 a86:	f1 e0       	ldi	r31, 0x01	; 1
 a88:	4f 1a       	sub	r4, r31
 a8a:	51 08       	sbc	r5, r1
 a8c:	41 14       	cp	r4, r1
 a8e:	51 04       	cpc	r5, r1
 a90:	79 f7       	brne	.-34     	; 0xa70 <vfprintf+0x182>
 a92:	de c0       	rjmp	.+444    	; 0xc50 <vfprintf+0x362>
 a94:	84 36       	cpi	r24, 0x64	; 100
 a96:	11 f0       	breq	.+4      	; 0xa9c <vfprintf+0x1ae>
 a98:	89 36       	cpi	r24, 0x69	; 105
 a9a:	31 f5       	brne	.+76     	; 0xae8 <vfprintf+0x1fa>
 a9c:	f8 01       	movw	r30, r16
 a9e:	27 ff       	sbrs	r18, 7
 aa0:	07 c0       	rjmp	.+14     	; 0xab0 <vfprintf+0x1c2>
 aa2:	60 81       	ld	r22, Z
 aa4:	71 81       	ldd	r23, Z+1	; 0x01
 aa6:	82 81       	ldd	r24, Z+2	; 0x02
 aa8:	93 81       	ldd	r25, Z+3	; 0x03
 aaa:	0c 5f       	subi	r16, 0xFC	; 252
 aac:	1f 4f       	sbci	r17, 0xFF	; 255
 aae:	08 c0       	rjmp	.+16     	; 0xac0 <vfprintf+0x1d2>
 ab0:	60 81       	ld	r22, Z
 ab2:	71 81       	ldd	r23, Z+1	; 0x01
 ab4:	07 2e       	mov	r0, r23
 ab6:	00 0c       	add	r0, r0
 ab8:	88 0b       	sbc	r24, r24
 aba:	99 0b       	sbc	r25, r25
 abc:	0e 5f       	subi	r16, 0xFE	; 254
 abe:	1f 4f       	sbci	r17, 0xFF	; 255
 ac0:	2f 76       	andi	r18, 0x6F	; 111
 ac2:	72 2e       	mov	r7, r18
 ac4:	97 ff       	sbrs	r25, 7
 ac6:	09 c0       	rjmp	.+18     	; 0xada <vfprintf+0x1ec>
 ac8:	90 95       	com	r25
 aca:	80 95       	com	r24
 acc:	70 95       	com	r23
 ace:	61 95       	neg	r22
 ad0:	7f 4f       	sbci	r23, 0xFF	; 255
 ad2:	8f 4f       	sbci	r24, 0xFF	; 255
 ad4:	9f 4f       	sbci	r25, 0xFF	; 255
 ad6:	20 68       	ori	r18, 0x80	; 128
 ad8:	72 2e       	mov	r7, r18
 ada:	2a e0       	ldi	r18, 0x0A	; 10
 adc:	30 e0       	ldi	r19, 0x00	; 0
 ade:	a4 01       	movw	r20, r8
 ae0:	17 d1       	rcall	.+558    	; 0xd10 <__ultoa_invert>
 ae2:	a8 2e       	mov	r10, r24
 ae4:	a8 18       	sub	r10, r8
 ae6:	43 c0       	rjmp	.+134    	; 0xb6e <vfprintf+0x280>
 ae8:	85 37       	cpi	r24, 0x75	; 117
 aea:	29 f4       	brne	.+10     	; 0xaf6 <vfprintf+0x208>
 aec:	2f 7e       	andi	r18, 0xEF	; 239
 aee:	b2 2e       	mov	r11, r18
 af0:	2a e0       	ldi	r18, 0x0A	; 10
 af2:	30 e0       	ldi	r19, 0x00	; 0
 af4:	25 c0       	rjmp	.+74     	; 0xb40 <vfprintf+0x252>
 af6:	f2 2f       	mov	r31, r18
 af8:	f9 7f       	andi	r31, 0xF9	; 249
 afa:	bf 2e       	mov	r11, r31
 afc:	8f 36       	cpi	r24, 0x6F	; 111
 afe:	c1 f0       	breq	.+48     	; 0xb30 <vfprintf+0x242>
 b00:	18 f4       	brcc	.+6      	; 0xb08 <vfprintf+0x21a>
 b02:	88 35       	cpi	r24, 0x58	; 88
 b04:	79 f0       	breq	.+30     	; 0xb24 <vfprintf+0x236>
 b06:	ad c0       	rjmp	.+346    	; 0xc62 <vfprintf+0x374>
 b08:	80 37       	cpi	r24, 0x70	; 112
 b0a:	19 f0       	breq	.+6      	; 0xb12 <vfprintf+0x224>
 b0c:	88 37       	cpi	r24, 0x78	; 120
 b0e:	21 f0       	breq	.+8      	; 0xb18 <vfprintf+0x22a>
 b10:	a8 c0       	rjmp	.+336    	; 0xc62 <vfprintf+0x374>
 b12:	2f 2f       	mov	r18, r31
 b14:	20 61       	ori	r18, 0x10	; 16
 b16:	b2 2e       	mov	r11, r18
 b18:	b4 fe       	sbrs	r11, 4
 b1a:	0d c0       	rjmp	.+26     	; 0xb36 <vfprintf+0x248>
 b1c:	8b 2d       	mov	r24, r11
 b1e:	84 60       	ori	r24, 0x04	; 4
 b20:	b8 2e       	mov	r11, r24
 b22:	09 c0       	rjmp	.+18     	; 0xb36 <vfprintf+0x248>
 b24:	24 ff       	sbrs	r18, 4
 b26:	0a c0       	rjmp	.+20     	; 0xb3c <vfprintf+0x24e>
 b28:	9f 2f       	mov	r25, r31
 b2a:	96 60       	ori	r25, 0x06	; 6
 b2c:	b9 2e       	mov	r11, r25
 b2e:	06 c0       	rjmp	.+12     	; 0xb3c <vfprintf+0x24e>
 b30:	28 e0       	ldi	r18, 0x08	; 8
 b32:	30 e0       	ldi	r19, 0x00	; 0
 b34:	05 c0       	rjmp	.+10     	; 0xb40 <vfprintf+0x252>
 b36:	20 e1       	ldi	r18, 0x10	; 16
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	02 c0       	rjmp	.+4      	; 0xb40 <vfprintf+0x252>
 b3c:	20 e1       	ldi	r18, 0x10	; 16
 b3e:	32 e0       	ldi	r19, 0x02	; 2
 b40:	f8 01       	movw	r30, r16
 b42:	b7 fe       	sbrs	r11, 7
 b44:	07 c0       	rjmp	.+14     	; 0xb54 <vfprintf+0x266>
 b46:	60 81       	ld	r22, Z
 b48:	71 81       	ldd	r23, Z+1	; 0x01
 b4a:	82 81       	ldd	r24, Z+2	; 0x02
 b4c:	93 81       	ldd	r25, Z+3	; 0x03
 b4e:	0c 5f       	subi	r16, 0xFC	; 252
 b50:	1f 4f       	sbci	r17, 0xFF	; 255
 b52:	06 c0       	rjmp	.+12     	; 0xb60 <vfprintf+0x272>
 b54:	60 81       	ld	r22, Z
 b56:	71 81       	ldd	r23, Z+1	; 0x01
 b58:	80 e0       	ldi	r24, 0x00	; 0
 b5a:	90 e0       	ldi	r25, 0x00	; 0
 b5c:	0e 5f       	subi	r16, 0xFE	; 254
 b5e:	1f 4f       	sbci	r17, 0xFF	; 255
 b60:	a4 01       	movw	r20, r8
 b62:	d6 d0       	rcall	.+428    	; 0xd10 <__ultoa_invert>
 b64:	a8 2e       	mov	r10, r24
 b66:	a8 18       	sub	r10, r8
 b68:	fb 2d       	mov	r31, r11
 b6a:	ff 77       	andi	r31, 0x7F	; 127
 b6c:	7f 2e       	mov	r7, r31
 b6e:	76 fe       	sbrs	r7, 6
 b70:	0b c0       	rjmp	.+22     	; 0xb88 <vfprintf+0x29a>
 b72:	37 2d       	mov	r19, r7
 b74:	3e 7f       	andi	r19, 0xFE	; 254
 b76:	a5 14       	cp	r10, r5
 b78:	50 f4       	brcc	.+20     	; 0xb8e <vfprintf+0x2a0>
 b7a:	74 fe       	sbrs	r7, 4
 b7c:	0a c0       	rjmp	.+20     	; 0xb92 <vfprintf+0x2a4>
 b7e:	72 fc       	sbrc	r7, 2
 b80:	08 c0       	rjmp	.+16     	; 0xb92 <vfprintf+0x2a4>
 b82:	37 2d       	mov	r19, r7
 b84:	3e 7e       	andi	r19, 0xEE	; 238
 b86:	05 c0       	rjmp	.+10     	; 0xb92 <vfprintf+0x2a4>
 b88:	ba 2c       	mov	r11, r10
 b8a:	37 2d       	mov	r19, r7
 b8c:	03 c0       	rjmp	.+6      	; 0xb94 <vfprintf+0x2a6>
 b8e:	ba 2c       	mov	r11, r10
 b90:	01 c0       	rjmp	.+2      	; 0xb94 <vfprintf+0x2a6>
 b92:	b5 2c       	mov	r11, r5
 b94:	34 ff       	sbrs	r19, 4
 b96:	0d c0       	rjmp	.+26     	; 0xbb2 <vfprintf+0x2c4>
 b98:	fe 01       	movw	r30, r28
 b9a:	ea 0d       	add	r30, r10
 b9c:	f1 1d       	adc	r31, r1
 b9e:	80 81       	ld	r24, Z
 ba0:	80 33       	cpi	r24, 0x30	; 48
 ba2:	11 f4       	brne	.+4      	; 0xba8 <vfprintf+0x2ba>
 ba4:	39 7e       	andi	r19, 0xE9	; 233
 ba6:	09 c0       	rjmp	.+18     	; 0xbba <vfprintf+0x2cc>
 ba8:	32 ff       	sbrs	r19, 2
 baa:	06 c0       	rjmp	.+12     	; 0xbb8 <vfprintf+0x2ca>
 bac:	b3 94       	inc	r11
 bae:	b3 94       	inc	r11
 bb0:	04 c0       	rjmp	.+8      	; 0xbba <vfprintf+0x2cc>
 bb2:	83 2f       	mov	r24, r19
 bb4:	86 78       	andi	r24, 0x86	; 134
 bb6:	09 f0       	breq	.+2      	; 0xbba <vfprintf+0x2cc>
 bb8:	b3 94       	inc	r11
 bba:	33 fd       	sbrc	r19, 3
 bbc:	12 c0       	rjmp	.+36     	; 0xbe2 <vfprintf+0x2f4>
 bbe:	30 ff       	sbrs	r19, 0
 bc0:	06 c0       	rjmp	.+12     	; 0xbce <vfprintf+0x2e0>
 bc2:	5a 2c       	mov	r5, r10
 bc4:	b3 14       	cp	r11, r3
 bc6:	18 f4       	brcc	.+6      	; 0xbce <vfprintf+0x2e0>
 bc8:	53 0c       	add	r5, r3
 bca:	5b 18       	sub	r5, r11
 bcc:	b3 2c       	mov	r11, r3
 bce:	b3 14       	cp	r11, r3
 bd0:	60 f4       	brcc	.+24     	; 0xbea <vfprintf+0x2fc>
 bd2:	b7 01       	movw	r22, r14
 bd4:	80 e2       	ldi	r24, 0x20	; 32
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	3c 87       	std	Y+12, r19	; 0x0c
 bda:	62 d0       	rcall	.+196    	; 0xca0 <fputc>
 bdc:	b3 94       	inc	r11
 bde:	3c 85       	ldd	r19, Y+12	; 0x0c
 be0:	f6 cf       	rjmp	.-20     	; 0xbce <vfprintf+0x2e0>
 be2:	b3 14       	cp	r11, r3
 be4:	10 f4       	brcc	.+4      	; 0xbea <vfprintf+0x2fc>
 be6:	3b 18       	sub	r3, r11
 be8:	01 c0       	rjmp	.+2      	; 0xbec <vfprintf+0x2fe>
 bea:	31 2c       	mov	r3, r1
 bec:	34 ff       	sbrs	r19, 4
 bee:	11 c0       	rjmp	.+34     	; 0xc12 <vfprintf+0x324>
 bf0:	b7 01       	movw	r22, r14
 bf2:	80 e3       	ldi	r24, 0x30	; 48
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	3c 87       	std	Y+12, r19	; 0x0c
 bf8:	53 d0       	rcall	.+166    	; 0xca0 <fputc>
 bfa:	3c 85       	ldd	r19, Y+12	; 0x0c
 bfc:	32 ff       	sbrs	r19, 2
 bfe:	16 c0       	rjmp	.+44     	; 0xc2c <vfprintf+0x33e>
 c00:	31 fd       	sbrc	r19, 1
 c02:	03 c0       	rjmp	.+6      	; 0xc0a <vfprintf+0x31c>
 c04:	88 e7       	ldi	r24, 0x78	; 120
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	02 c0       	rjmp	.+4      	; 0xc0e <vfprintf+0x320>
 c0a:	88 e5       	ldi	r24, 0x58	; 88
 c0c:	90 e0       	ldi	r25, 0x00	; 0
 c0e:	b7 01       	movw	r22, r14
 c10:	0c c0       	rjmp	.+24     	; 0xc2a <vfprintf+0x33c>
 c12:	83 2f       	mov	r24, r19
 c14:	86 78       	andi	r24, 0x86	; 134
 c16:	51 f0       	breq	.+20     	; 0xc2c <vfprintf+0x33e>
 c18:	31 ff       	sbrs	r19, 1
 c1a:	02 c0       	rjmp	.+4      	; 0xc20 <vfprintf+0x332>
 c1c:	8b e2       	ldi	r24, 0x2B	; 43
 c1e:	01 c0       	rjmp	.+2      	; 0xc22 <vfprintf+0x334>
 c20:	80 e2       	ldi	r24, 0x20	; 32
 c22:	37 fd       	sbrc	r19, 7
 c24:	8d e2       	ldi	r24, 0x2D	; 45
 c26:	b7 01       	movw	r22, r14
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	3a d0       	rcall	.+116    	; 0xca0 <fputc>
 c2c:	a5 14       	cp	r10, r5
 c2e:	30 f4       	brcc	.+12     	; 0xc3c <vfprintf+0x34e>
 c30:	b7 01       	movw	r22, r14
 c32:	80 e3       	ldi	r24, 0x30	; 48
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	34 d0       	rcall	.+104    	; 0xca0 <fputc>
 c38:	5a 94       	dec	r5
 c3a:	f8 cf       	rjmp	.-16     	; 0xc2c <vfprintf+0x33e>
 c3c:	aa 94       	dec	r10
 c3e:	f4 01       	movw	r30, r8
 c40:	ea 0d       	add	r30, r10
 c42:	f1 1d       	adc	r31, r1
 c44:	80 81       	ld	r24, Z
 c46:	b7 01       	movw	r22, r14
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	2a d0       	rcall	.+84     	; 0xca0 <fputc>
 c4c:	a1 10       	cpse	r10, r1
 c4e:	f6 cf       	rjmp	.-20     	; 0xc3c <vfprintf+0x34e>
 c50:	33 20       	and	r3, r3
 c52:	09 f4       	brne	.+2      	; 0xc56 <vfprintf+0x368>
 c54:	5d ce       	rjmp	.-838    	; 0x910 <vfprintf+0x22>
 c56:	b7 01       	movw	r22, r14
 c58:	80 e2       	ldi	r24, 0x20	; 32
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	21 d0       	rcall	.+66     	; 0xca0 <fputc>
 c5e:	3a 94       	dec	r3
 c60:	f7 cf       	rjmp	.-18     	; 0xc50 <vfprintf+0x362>
 c62:	f7 01       	movw	r30, r14
 c64:	86 81       	ldd	r24, Z+6	; 0x06
 c66:	97 81       	ldd	r25, Z+7	; 0x07
 c68:	02 c0       	rjmp	.+4      	; 0xc6e <vfprintf+0x380>
 c6a:	8f ef       	ldi	r24, 0xFF	; 255
 c6c:	9f ef       	ldi	r25, 0xFF	; 255
 c6e:	2c 96       	adiw	r28, 0x0c	; 12
 c70:	e2 e1       	ldi	r30, 0x12	; 18
 c72:	c8 c0       	rjmp	.+400    	; 0xe04 <__epilogue_restores__>

00000c74 <strnlen_P>:
 c74:	fc 01       	movw	r30, r24
 c76:	05 90       	lpm	r0, Z+
 c78:	61 50       	subi	r22, 0x01	; 1
 c7a:	70 40       	sbci	r23, 0x00	; 0
 c7c:	01 10       	cpse	r0, r1
 c7e:	d8 f7       	brcc	.-10     	; 0xc76 <strnlen_P+0x2>
 c80:	80 95       	com	r24
 c82:	90 95       	com	r25
 c84:	8e 0f       	add	r24, r30
 c86:	9f 1f       	adc	r25, r31
 c88:	08 95       	ret

00000c8a <strnlen>:
 c8a:	fc 01       	movw	r30, r24
 c8c:	61 50       	subi	r22, 0x01	; 1
 c8e:	70 40       	sbci	r23, 0x00	; 0
 c90:	01 90       	ld	r0, Z+
 c92:	01 10       	cpse	r0, r1
 c94:	d8 f7       	brcc	.-10     	; 0xc8c <strnlen+0x2>
 c96:	80 95       	com	r24
 c98:	90 95       	com	r25
 c9a:	8e 0f       	add	r24, r30
 c9c:	9f 1f       	adc	r25, r31
 c9e:	08 95       	ret

00000ca0 <fputc>:
 ca0:	0f 93       	push	r16
 ca2:	1f 93       	push	r17
 ca4:	cf 93       	push	r28
 ca6:	df 93       	push	r29
 ca8:	fb 01       	movw	r30, r22
 caa:	23 81       	ldd	r18, Z+3	; 0x03
 cac:	21 fd       	sbrc	r18, 1
 cae:	03 c0       	rjmp	.+6      	; 0xcb6 <fputc+0x16>
 cb0:	8f ef       	ldi	r24, 0xFF	; 255
 cb2:	9f ef       	ldi	r25, 0xFF	; 255
 cb4:	28 c0       	rjmp	.+80     	; 0xd06 <fputc+0x66>
 cb6:	22 ff       	sbrs	r18, 2
 cb8:	16 c0       	rjmp	.+44     	; 0xce6 <fputc+0x46>
 cba:	46 81       	ldd	r20, Z+6	; 0x06
 cbc:	57 81       	ldd	r21, Z+7	; 0x07
 cbe:	24 81       	ldd	r18, Z+4	; 0x04
 cc0:	35 81       	ldd	r19, Z+5	; 0x05
 cc2:	42 17       	cp	r20, r18
 cc4:	53 07       	cpc	r21, r19
 cc6:	44 f4       	brge	.+16     	; 0xcd8 <fputc+0x38>
 cc8:	a0 81       	ld	r26, Z
 cca:	b1 81       	ldd	r27, Z+1	; 0x01
 ccc:	9d 01       	movw	r18, r26
 cce:	2f 5f       	subi	r18, 0xFF	; 255
 cd0:	3f 4f       	sbci	r19, 0xFF	; 255
 cd2:	31 83       	std	Z+1, r19	; 0x01
 cd4:	20 83       	st	Z, r18
 cd6:	8c 93       	st	X, r24
 cd8:	26 81       	ldd	r18, Z+6	; 0x06
 cda:	37 81       	ldd	r19, Z+7	; 0x07
 cdc:	2f 5f       	subi	r18, 0xFF	; 255
 cde:	3f 4f       	sbci	r19, 0xFF	; 255
 ce0:	37 83       	std	Z+7, r19	; 0x07
 ce2:	26 83       	std	Z+6, r18	; 0x06
 ce4:	10 c0       	rjmp	.+32     	; 0xd06 <fputc+0x66>
 ce6:	eb 01       	movw	r28, r22
 ce8:	09 2f       	mov	r16, r25
 cea:	18 2f       	mov	r17, r24
 cec:	00 84       	ldd	r0, Z+8	; 0x08
 cee:	f1 85       	ldd	r31, Z+9	; 0x09
 cf0:	e0 2d       	mov	r30, r0
 cf2:	09 95       	icall
 cf4:	89 2b       	or	r24, r25
 cf6:	e1 f6       	brne	.-72     	; 0xcb0 <fputc+0x10>
 cf8:	8e 81       	ldd	r24, Y+6	; 0x06
 cfa:	9f 81       	ldd	r25, Y+7	; 0x07
 cfc:	01 96       	adiw	r24, 0x01	; 1
 cfe:	9f 83       	std	Y+7, r25	; 0x07
 d00:	8e 83       	std	Y+6, r24	; 0x06
 d02:	81 2f       	mov	r24, r17
 d04:	90 2f       	mov	r25, r16
 d06:	df 91       	pop	r29
 d08:	cf 91       	pop	r28
 d0a:	1f 91       	pop	r17
 d0c:	0f 91       	pop	r16
 d0e:	08 95       	ret

00000d10 <__ultoa_invert>:
 d10:	fa 01       	movw	r30, r20
 d12:	aa 27       	eor	r26, r26
 d14:	28 30       	cpi	r18, 0x08	; 8
 d16:	51 f1       	breq	.+84     	; 0xd6c <__ultoa_invert+0x5c>
 d18:	20 31       	cpi	r18, 0x10	; 16
 d1a:	81 f1       	breq	.+96     	; 0xd7c <__ultoa_invert+0x6c>
 d1c:	e8 94       	clt
 d1e:	6f 93       	push	r22
 d20:	6e 7f       	andi	r22, 0xFE	; 254
 d22:	6e 5f       	subi	r22, 0xFE	; 254
 d24:	7f 4f       	sbci	r23, 0xFF	; 255
 d26:	8f 4f       	sbci	r24, 0xFF	; 255
 d28:	9f 4f       	sbci	r25, 0xFF	; 255
 d2a:	af 4f       	sbci	r26, 0xFF	; 255
 d2c:	b1 e0       	ldi	r27, 0x01	; 1
 d2e:	3e d0       	rcall	.+124    	; 0xdac <__ultoa_invert+0x9c>
 d30:	b4 e0       	ldi	r27, 0x04	; 4
 d32:	3c d0       	rcall	.+120    	; 0xdac <__ultoa_invert+0x9c>
 d34:	67 0f       	add	r22, r23
 d36:	78 1f       	adc	r23, r24
 d38:	89 1f       	adc	r24, r25
 d3a:	9a 1f       	adc	r25, r26
 d3c:	a1 1d       	adc	r26, r1
 d3e:	68 0f       	add	r22, r24
 d40:	79 1f       	adc	r23, r25
 d42:	8a 1f       	adc	r24, r26
 d44:	91 1d       	adc	r25, r1
 d46:	a1 1d       	adc	r26, r1
 d48:	6a 0f       	add	r22, r26
 d4a:	71 1d       	adc	r23, r1
 d4c:	81 1d       	adc	r24, r1
 d4e:	91 1d       	adc	r25, r1
 d50:	a1 1d       	adc	r26, r1
 d52:	20 d0       	rcall	.+64     	; 0xd94 <__ultoa_invert+0x84>
 d54:	09 f4       	brne	.+2      	; 0xd58 <__ultoa_invert+0x48>
 d56:	68 94       	set
 d58:	3f 91       	pop	r19
 d5a:	2a e0       	ldi	r18, 0x0A	; 10
 d5c:	26 9f       	mul	r18, r22
 d5e:	11 24       	eor	r1, r1
 d60:	30 19       	sub	r19, r0
 d62:	30 5d       	subi	r19, 0xD0	; 208
 d64:	31 93       	st	Z+, r19
 d66:	de f6       	brtc	.-74     	; 0xd1e <__ultoa_invert+0xe>
 d68:	cf 01       	movw	r24, r30
 d6a:	08 95       	ret
 d6c:	46 2f       	mov	r20, r22
 d6e:	47 70       	andi	r20, 0x07	; 7
 d70:	40 5d       	subi	r20, 0xD0	; 208
 d72:	41 93       	st	Z+, r20
 d74:	b3 e0       	ldi	r27, 0x03	; 3
 d76:	0f d0       	rcall	.+30     	; 0xd96 <__ultoa_invert+0x86>
 d78:	c9 f7       	brne	.-14     	; 0xd6c <__ultoa_invert+0x5c>
 d7a:	f6 cf       	rjmp	.-20     	; 0xd68 <__ultoa_invert+0x58>
 d7c:	46 2f       	mov	r20, r22
 d7e:	4f 70       	andi	r20, 0x0F	; 15
 d80:	40 5d       	subi	r20, 0xD0	; 208
 d82:	4a 33       	cpi	r20, 0x3A	; 58
 d84:	18 f0       	brcs	.+6      	; 0xd8c <__ultoa_invert+0x7c>
 d86:	49 5d       	subi	r20, 0xD9	; 217
 d88:	31 fd       	sbrc	r19, 1
 d8a:	40 52       	subi	r20, 0x20	; 32
 d8c:	41 93       	st	Z+, r20
 d8e:	02 d0       	rcall	.+4      	; 0xd94 <__ultoa_invert+0x84>
 d90:	a9 f7       	brne	.-22     	; 0xd7c <__ultoa_invert+0x6c>
 d92:	ea cf       	rjmp	.-44     	; 0xd68 <__ultoa_invert+0x58>
 d94:	b4 e0       	ldi	r27, 0x04	; 4
 d96:	a6 95       	lsr	r26
 d98:	97 95       	ror	r25
 d9a:	87 95       	ror	r24
 d9c:	77 95       	ror	r23
 d9e:	67 95       	ror	r22
 da0:	ba 95       	dec	r27
 da2:	c9 f7       	brne	.-14     	; 0xd96 <__ultoa_invert+0x86>
 da4:	00 97       	sbiw	r24, 0x00	; 0
 da6:	61 05       	cpc	r22, r1
 da8:	71 05       	cpc	r23, r1
 daa:	08 95       	ret
 dac:	9b 01       	movw	r18, r22
 dae:	ac 01       	movw	r20, r24
 db0:	0a 2e       	mov	r0, r26
 db2:	06 94       	lsr	r0
 db4:	57 95       	ror	r21
 db6:	47 95       	ror	r20
 db8:	37 95       	ror	r19
 dba:	27 95       	ror	r18
 dbc:	ba 95       	dec	r27
 dbe:	c9 f7       	brne	.-14     	; 0xdb2 <__ultoa_invert+0xa2>
 dc0:	62 0f       	add	r22, r18
 dc2:	73 1f       	adc	r23, r19
 dc4:	84 1f       	adc	r24, r20
 dc6:	95 1f       	adc	r25, r21
 dc8:	a0 1d       	adc	r26, r0
 dca:	08 95       	ret

00000dcc <__prologue_saves__>:
 dcc:	2f 92       	push	r2
 dce:	3f 92       	push	r3
 dd0:	4f 92       	push	r4
 dd2:	5f 92       	push	r5
 dd4:	6f 92       	push	r6
 dd6:	7f 92       	push	r7
 dd8:	8f 92       	push	r8
 dda:	9f 92       	push	r9
 ddc:	af 92       	push	r10
 dde:	bf 92       	push	r11
 de0:	cf 92       	push	r12
 de2:	df 92       	push	r13
 de4:	ef 92       	push	r14
 de6:	ff 92       	push	r15
 de8:	0f 93       	push	r16
 dea:	1f 93       	push	r17
 dec:	cf 93       	push	r28
 dee:	df 93       	push	r29
 df0:	cd b7       	in	r28, 0x3d	; 61
 df2:	de b7       	in	r29, 0x3e	; 62
 df4:	ca 1b       	sub	r28, r26
 df6:	db 0b       	sbc	r29, r27
 df8:	0f b6       	in	r0, 0x3f	; 63
 dfa:	f8 94       	cli
 dfc:	de bf       	out	0x3e, r29	; 62
 dfe:	0f be       	out	0x3f, r0	; 63
 e00:	cd bf       	out	0x3d, r28	; 61
 e02:	09 94       	ijmp

00000e04 <__epilogue_restores__>:
 e04:	2a 88       	ldd	r2, Y+18	; 0x12
 e06:	39 88       	ldd	r3, Y+17	; 0x11
 e08:	48 88       	ldd	r4, Y+16	; 0x10
 e0a:	5f 84       	ldd	r5, Y+15	; 0x0f
 e0c:	6e 84       	ldd	r6, Y+14	; 0x0e
 e0e:	7d 84       	ldd	r7, Y+13	; 0x0d
 e10:	8c 84       	ldd	r8, Y+12	; 0x0c
 e12:	9b 84       	ldd	r9, Y+11	; 0x0b
 e14:	aa 84       	ldd	r10, Y+10	; 0x0a
 e16:	b9 84       	ldd	r11, Y+9	; 0x09
 e18:	c8 84       	ldd	r12, Y+8	; 0x08
 e1a:	df 80       	ldd	r13, Y+7	; 0x07
 e1c:	ee 80       	ldd	r14, Y+6	; 0x06
 e1e:	fd 80       	ldd	r15, Y+5	; 0x05
 e20:	0c 81       	ldd	r16, Y+4	; 0x04
 e22:	1b 81       	ldd	r17, Y+3	; 0x03
 e24:	aa 81       	ldd	r26, Y+2	; 0x02
 e26:	b9 81       	ldd	r27, Y+1	; 0x01
 e28:	ce 0f       	add	r28, r30
 e2a:	d1 1d       	adc	r29, r1
 e2c:	0f b6       	in	r0, 0x3f	; 63
 e2e:	f8 94       	cli
 e30:	de bf       	out	0x3e, r29	; 62
 e32:	0f be       	out	0x3f, r0	; 63
 e34:	cd bf       	out	0x3d, r28	; 61
 e36:	ed 01       	movw	r28, r26
 e38:	08 95       	ret

00000e3a <_exit>:
 e3a:	f8 94       	cli

00000e3c <__stop_program>:
 e3c:	ff cf       	rjmp	.-2      	; 0xe3c <__stop_program>
