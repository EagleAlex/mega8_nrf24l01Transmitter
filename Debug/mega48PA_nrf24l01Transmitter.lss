
mega48PA_nrf24l01Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000c40  00000cd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  00800128  00800128  00000cfc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018f1  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000624  00000000  00000000  000027cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000867  00000000  00000000  00002df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e4  00000000  00000000  00003658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000492  00000000  00000000  00003a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009db  00000000  00000000  00003ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000048a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	4e c0       	rjmp	.+156    	; 0xa0 <__vector_1>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	b5 c0       	rjmp	.+362    	; 0x178 <__vector_6>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	99 c0       	rjmp	.+306    	; 0x164 <__vector_24>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 e4       	ldi	r30, 0x40	; 64
  48:	fc e0       	ldi	r31, 0x0C	; 12
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a8 32       	cpi	r26, 0x28	; 40
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a8 e2       	ldi	r26, 0x28	; 40
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a1 38       	cpi	r26, 0x81	; 129
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	4b d1       	rcall	.+662    	; 0x2fe <main>
  68:	e9 c5       	rjmp	.+3026   	; 0xc3c <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <InitInterrupts>:

void InitInterrupts(void){
	// INT0: On
	// INT1: Off
	//PORTD &=~(1<<INT0);
	EIMSK |= 0x01;
  6c:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0x02;
  6e:	e9 e6       	ldi	r30, 0x69	; 105
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	80 81       	ld	r24, Z
  74:	82 60       	ori	r24, 0x02	; 2
  76:	80 83       	st	Z, r24
	EIFR |= 0x01;
  78:	e0 9a       	sbi	0x1c, 0	; 28
  7a:	08 95       	ret

0000007c <DisableInterrupts>:
}

void DisableInterrupts(void){
	PORTD |= (1<<INT0);
  7c:	58 9a       	sbi	0x0b, 0	; 11
	PIND &= ~(1<<INT0);
  7e:	48 98       	cbi	0x09, 0	; 9
	EIMSK |= 0x00;
  80:	8d b3       	in	r24, 0x1d	; 29
  82:	8d bb       	out	0x1d, r24	; 29
	EICRA |= 0x00;
  84:	e9 e6       	ldi	r30, 0x69	; 105
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	80 83       	st	Z, r24
	EIFR |= 0x00;
  8c:	8c b3       	in	r24, 0x1c	; 28
  8e:	8c bb       	out	0x1c, r24	; 28
	//POWER_port &= ~(1<<POWER_pin);
	PORTC = 0x00;
  90:	18 b8       	out	0x08, r1	; 8
	//PORTC |= ~(1<<POWER_pin);
	PINC = 0x00;
  92:	16 b8       	out	0x06, r1	; 6
	PORTD = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8b b9       	out	0x0b, r24	; 11
	PIND = 0x00;
  98:	19 b8       	out	0x09, r1	; 9
	PORTB = 0xFF;
  9a:	85 b9       	out	0x05, r24	; 5
	PINB = 0x00;
  9c:	13 b8       	out	0x03, r1	; 3
  9e:	08 95       	ret

000000a0 <__vector_1>:
}


ISR(INT0_vect){
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	3f 93       	push	r19
  ae:	4f 93       	push	r20
  b0:	5f 93       	push	r21
  b2:	6f 93       	push	r22
  b4:	7f 93       	push	r23
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	af 93       	push	r26
  bc:	bf 93       	push	r27
  be:	cf 93       	push	r28
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	cli();
  c4:	f8 94       	cli
	uint8_t status = 0;

	status = nRFGetStatus();
  c6:	5b d1       	rcall	.+694    	; 0x37e <nRFGetStatus>
  c8:	c8 2f       	mov	r28, r24
	//sprintf(TextBuffer,"Int. STATUS: 0x%02X \r\n",status);
	//TransmitStringToUART(TextBuffer);
	//_delay_ms(5);
	if (status & (1<<TX_DS)){ // 0x2e
  ca:	85 ff       	sbrs	r24, 5
  cc:	30 c0       	rjmp	.+96     	; 0x12e <__vector_1+0x8e>
			// Data is transmitted
			NrfFlushTXfifo();
  ce:	11 d3       	rcall	.+1570   	; 0x6f2 <NrfFlushTXfifo>
			reset_interrupts();
  d0:	05 d3       	rcall	.+1546   	; 0x6dc <reset_interrupts>
			NrfPowerDown();
  d2:	52 d3       	rcall	.+1700   	; 0x778 <NrfPowerDown>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	89 ef       	ldi	r24, 0xF9	; 249
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <__vector_1+0x38>
  dc:	00 c0       	rjmp	.+0      	; 0xde <__vector_1+0x3e>
  de:	00 00       	nop
			_delay_ms(1);
			DisableInterrupts();
  e0:	cd df       	rcall	.-102    	; 0x7c <DisableInterrupts>
			//CE_lo;
			//CSN_lo;
			power_spi_disable();
  e2:	e4 e6       	ldi	r30, 0x64	; 100
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	80 83       	st	Z, r24
			//power_timer0_disable();
			//power_timer1_disable();
			power_twi_disable();
  ec:	80 81       	ld	r24, Z
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	80 83       	st	Z, r24
			wdt_reset();
  f2:	a8 95       	wdr
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
  f4:	99 e2       	ldi	r25, 0x29	; 41
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	a8 95       	wdr
  fe:	80 93 60 00 	sts	0x0060, r24
 102:	0f be       	out	0x3f, r0	; 63
 104:	90 93 60 00 	sts	0x0060, r25
			wdt_enable(WDTO_8S);
			WDTCSR |= (1<<WDIE);
 108:	e0 e6       	ldi	r30, 0x60	; 96
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
			sei();
 112:	78 94       	sei
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 114:	83 b7       	in	r24, 0x33	; 51
 116:	81 7f       	andi	r24, 0xF1	; 241
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	83 bf       	out	0x33, r24	; 51
			sleep_enable();
 11c:	83 b7       	in	r24, 0x33	; 51
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	83 bf       	out	0x33, r24	; 51
			sleep_bod_disable();
 122:	85 b7       	in	r24, 0x35	; 53
 124:	80 66       	ori	r24, 0x60	; 96
 126:	85 bf       	out	0x35, r24	; 53
 128:	8f 7d       	andi	r24, 0xDF	; 223
 12a:	85 bf       	out	0x35, r24	; 53
			sleep_cpu();
 12c:	88 95       	sleep
	}		
	
	if (status & (1<<MAX_RT)){ // 0x1e
 12e:	c4 ff       	sbrs	r28, 4
 130:	07 c0       	rjmp	.+14     	; 0x140 <__vector_1+0xa0>
			sei();
 132:	78 94       	sei
			// RF choose frequency (channel) - 3 (?? GHz)
			WriteReg(RF_CH, 76);
 134:	6c e4       	ldi	r22, 0x4C	; 76
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	6f d1       	rcall	.+734    	; 0x418 <WriteReg>
			reuse_payload();
 13a:	19 d3       	rcall	.+1586   	; 0x76e <reuse_payload>
			reset_interrupts();
 13c:	cf d2       	rcall	.+1438   	; 0x6dc <reset_interrupts>
			send_payload();
 13e:	d3 d2       	rcall	.+1446   	; 0x6e6 <send_payload>
	}
}
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	cf 91       	pop	r28
 146:	bf 91       	pop	r27
 148:	af 91       	pop	r26
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	7f 91       	pop	r23
 150:	6f 91       	pop	r22
 152:	5f 91       	pop	r21
 154:	4f 91       	pop	r20
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_24>:

ISR(TWI_vect){}
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_6>:
ISR(WDT_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	4f 92       	push	r4
 184:	5f 92       	push	r5
 186:	6f 92       	push	r6
 188:	7f 92       	push	r7
 18a:	bf 92       	push	r11
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	//cli();
	power_twi_enable();
 1b4:	04 e6       	ldi	r16, 0x64	; 100
 1b6:	10 e0       	ldi	r17, 0x00	; 0
 1b8:	f8 01       	movw	r30, r16
 1ba:	80 81       	ld	r24, Z
 1bc:	8f 77       	andi	r24, 0x7F	; 127
 1be:	80 83       	st	Z, r24
	//wdt_disable();
	
	twi_init();
 1c0:	fc d2       	rcall	.+1528   	; 0x7ba <twi_init>
	TT = twi_sht21_get(1); // temperature
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	18 d3       	rcall	.+1584   	; 0x7f6 <twi_sht21_get>
 1c6:	60 93 7d 01 	sts	0x017D, r22
 1ca:	70 93 7e 01 	sts	0x017E, r23
 1ce:	80 93 7f 01 	sts	0x017F, r24
 1d2:	90 93 80 01 	sts	0x0180, r25
	//_delay_ms(100);
	HH = twi_sht21_get(2); // humidity
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	0e d3       	rcall	.+1564   	; 0x7f6 <twi_sht21_get>
 1da:	6b 01       	movw	r12, r22
 1dc:	7c 01       	movw	r14, r24
 1de:	60 93 74 01 	sts	0x0174, r22
 1e2:	70 93 75 01 	sts	0x0175, r23
 1e6:	80 93 76 01 	sts	0x0176, r24
 1ea:	90 93 77 01 	sts	0x0177, r25

	buff[0]=0;
 1ee:	c4 e6       	ldi	r28, 0x64	; 100
 1f0:	d1 e0       	ldi	r29, 0x01	; 1
 1f2:	18 82       	st	Y, r1
	buff[1]=25;
 1f4:	89 e1       	ldi	r24, 0x19	; 25
 1f6:	89 83       	std	Y+1, r24	; 0x01
	buff[3]=1;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	8b 83       	std	Y+3, r24	; 0x03
	buff[4]=(uint8_t)(TT);
 1fc:	40 90 7d 01 	lds	r4, 0x017D
 200:	50 90 7e 01 	lds	r5, 0x017E
 204:	60 90 7f 01 	lds	r6, 0x017F
 208:	70 90 80 01 	lds	r7, 0x0180
 20c:	c3 01       	movw	r24, r6
 20e:	b2 01       	movw	r22, r4
 210:	f8 d3       	rcall	.+2032   	; 0xa02 <__fixunssfsi>
 212:	6c 83       	std	Y+4, r22	; 0x04
	buff[5]=(uint8_t)((int8_t)(TT*10)-((int8_t)(TT))*10);
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	40 e2       	ldi	r20, 0x20	; 32
 21a:	51 e4       	ldi	r21, 0x41	; 65
 21c:	c3 01       	movw	r24, r6
 21e:	b2 01       	movw	r22, r4
 220:	aa d4       	rcall	.+2388   	; 0xb76 <__mulsf3>
 222:	ea d3       	rcall	.+2004   	; 0x9f8 <__fixsfsi>
 224:	b6 2e       	mov	r11, r22
 226:	c3 01       	movw	r24, r6
 228:	b2 01       	movw	r22, r4
 22a:	e6 d3       	rcall	.+1996   	; 0x9f8 <__fixsfsi>
 22c:	86 2f       	mov	r24, r22
 22e:	88 0f       	add	r24, r24
 230:	68 2f       	mov	r22, r24
 232:	66 0f       	add	r22, r22
 234:	66 0f       	add	r22, r22
 236:	86 0f       	add	r24, r22
 238:	b8 1a       	sub	r11, r24
 23a:	bd 82       	std	Y+5, r11	; 0x05
	buff[6]=2;
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	8e 83       	std	Y+6, r24	; 0x06
	buff[7]=(uint8_t)(HH);
 240:	c7 01       	movw	r24, r14
 242:	b6 01       	movw	r22, r12
 244:	de d3       	rcall	.+1980   	; 0xa02 <__fixunssfsi>
 246:	6f 83       	std	Y+7, r22	; 0x07
	buff[8]=(uint8_t)((int8_t)(HH*10)-((int8_t)(HH))*10);
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	40 e2       	ldi	r20, 0x20	; 32
 24e:	51 e4       	ldi	r21, 0x41	; 65
 250:	c7 01       	movw	r24, r14
 252:	b6 01       	movw	r22, r12
 254:	90 d4       	rcall	.+2336   	; 0xb76 <__mulsf3>
 256:	d0 d3       	rcall	.+1952   	; 0x9f8 <__fixsfsi>
 258:	b6 2e       	mov	r11, r22
 25a:	c7 01       	movw	r24, r14
 25c:	b6 01       	movw	r22, r12
 25e:	cc d3       	rcall	.+1944   	; 0x9f8 <__fixsfsi>
 260:	86 2f       	mov	r24, r22
 262:	88 0f       	add	r24, r24
 264:	68 2f       	mov	r22, r24
 266:	66 0f       	add	r22, r22
 268:	66 0f       	add	r22, r22
 26a:	86 0f       	add	r24, r22
 26c:	b8 1a       	sub	r11, r24
 26e:	b8 86       	std	Y+8, r11	; 0x08
 270:	81 ee       	ldi	r24, 0xE1	; 225
 272:	94 e0       	ldi	r25, 0x04	; 4
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <__vector_6+0xfc>
 278:	00 c0       	rjmp	.+0      	; 0x27a <__vector_6+0x102>
 27a:	00 00       	nop

	_delay_ms(5);
	twi_disable();
 27c:	97 d2       	rcall	.+1326   	; 0x7ac <twi_disable>
	
	power_spi_enable();
 27e:	f8 01       	movw	r30, r16
 280:	80 81       	ld	r24, Z
 282:	8b 7f       	andi	r24, 0xFB	; 251
 284:	80 83       	st	Z, r24
	InitInterrupts();
 286:	f2 de       	rcall	.-540    	; 0x6c <InitInterrupts>
 288:	81 ee       	ldi	r24, 0xE1	; 225
 28a:	94 e0       	ldi	r25, 0x04	; 4
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <__vector_6+0x114>
 290:	00 c0       	rjmp	.+0      	; 0x292 <__vector_6+0x11a>
 292:	00 00       	nop
	_delay_ms(5);
	NrfPortInit();
 294:	64 d0       	rcall	.+200    	; 0x35e <NrfPortInit>
 296:	e1 ee       	ldi	r30, 0xE1	; 225
 298:	f4 e0       	ldi	r31, 0x04	; 4
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <__vector_6+0x122>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <__vector_6+0x128>
 2a0:	00 00       	nop
	_delay_ms(5);
	
	if(NrfConfig() == 1){
 2a2:	56 d1       	rcall	.+684    	; 0x550 <NrfConfig>
 2a4:	81 ee       	ldi	r24, 0xE1	; 225
 2a6:	94 e0       	ldi	r25, 0x04	; 4
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <__vector_6+0x130>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <__vector_6+0x136>
 2ae:	00 00       	nop
		}else{
		//TransmitStringToUART("Error in nRF24 configuration... \r\n");
	}
	
	_delay_ms(5);
	transmit_payload(addrtx1, &buff[0], PAYLOAD_LENGTH);
 2b0:	40 e1       	ldi	r20, 0x10	; 16
 2b2:	be 01       	movw	r22, r28
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	3c d2       	rcall	.+1144   	; 0x732 <transmit_payload>
	
	//_delay_ms(5000);
	//power_spi_disable();
	power_twi_disable();
 2ba:	f8 01       	movw	r30, r16
 2bc:	80 81       	ld	r24, Z
 2be:	80 68       	ori	r24, 0x80	; 128
 2c0:	80 83       	st	Z, r24
	//sei();
	//set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	//sleep_enable();
	//sleep_bod_disable();
	//sleep_cpu();
}
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	7f 91       	pop	r23
 2d4:	6f 91       	pop	r22
 2d6:	5f 91       	pop	r21
 2d8:	4f 91       	pop	r20
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	ff 90       	pop	r15
 2e4:	ef 90       	pop	r14
 2e6:	df 90       	pop	r13
 2e8:	cf 90       	pop	r12
 2ea:	bf 90       	pop	r11
 2ec:	7f 90       	pop	r7
 2ee:	6f 90       	pop	r6
 2f0:	5f 90       	pop	r5
 2f2:	4f 90       	pop	r4
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <main>:
 2fe:	83 ed       	ldi	r24, 0xD3	; 211
 300:	90 e3       	ldi	r25, 0x30	; 48
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <__stack+0x3>
 306:	00 c0       	rjmp	.+0      	; 0x308 <__stack+0x9>
 308:	00 00       	nop
	
int main(void){
	_delay_ms(50);
	power_spi_enable();
 30a:	e4 e6       	ldi	r30, 0x64	; 100
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	8b 7f       	andi	r24, 0xFB	; 251
 312:	80 83       	st	Z, r24
	power_timer0_disable();
 314:	80 81       	ld	r24, Z
 316:	80 62       	ori	r24, 0x20	; 32
 318:	80 83       	st	Z, r24
	power_timer1_disable();
 31a:	80 81       	ld	r24, Z
 31c:	88 60       	ori	r24, 0x08	; 8
 31e:	80 83       	st	Z, r24
	}else{
		//TransmitStringToUART("Error in nRF24 configuration... \r\n");
	}
	*/
	
	wdt_reset();
 320:	a8 95       	wdr
 322:	99 e2       	ldi	r25, 0x29	; 41
 324:	88 e1       	ldi	r24, 0x18	; 24
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	a8 95       	wdr
 32c:	80 93 60 00 	sts	0x0060, r24
 330:	0f be       	out	0x3f, r0	; 63
 332:	90 93 60 00 	sts	0x0060, r25
	wdt_enable(WDTO_8S);
	WDTCSR |= (1<<WDIE);
 336:	e0 e6       	ldi	r30, 0x60	; 96
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	80 64       	ori	r24, 0x40	; 64
 33e:	80 83       	st	Z, r24
	sei();
 340:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 342:	83 b7       	in	r24, 0x33	; 51
 344:	81 7f       	andi	r24, 0xF1	; 241
 346:	84 60       	ori	r24, 0x04	; 4
 348:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
 34a:	83 b7       	in	r24, 0x33	; 51
 34c:	81 60       	ori	r24, 0x01	; 1
 34e:	83 bf       	out	0x33, r24	; 51
	sleep_bod_disable();
 350:	85 b7       	in	r24, 0x35	; 53
 352:	80 66       	ori	r24, 0x60	; 96
 354:	85 bf       	out	0x35, r24	; 53
 356:	8f 7d       	andi	r24, 0xDF	; 223
 358:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
 35a:	88 95       	sleep
		//}else if(p==3){
			//transmit_payload(addrtx3, &buff[0], PAYLOAD_LENGTH);
			//p=0;
		//}
		//_delay_ms(5000);
    }
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stack+0x5d>

0000035e <NrfPortInit>:
static uint8_t addr4[5] = ADDRP4;
static uint8_t addr5[5] = ADDRP5;
static uint8_t addrtx[5] = ADDRTX;

void NrfPortInit(void){
	SPIInit();
 35e:	13 d2       	rcall	.+1062   	; 0x786 <SPIInit>
	IRQ_ddr &= ~(1<<IRQ_pin);
 360:	52 98       	cbi	0x0a, 2	; 10
	
	POWER_ddr |= (1<<POWER_pin);
 362:	3a 9a       	sbi	0x07, 2	; 7
	POWER_port |= (1<<POWER_pin);
 364:	42 9a       	sbi	0x08, 2	; 8
	
	CE_lo;
 366:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 368:	82 e3       	ldi	r24, 0x32	; 50
 36a:	8a 95       	dec	r24
 36c:	f1 f7       	brne	.-4      	; 0x36a <NrfPortInit+0xc>
	_delay_us(150);
	CSN_hi;
 36e:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 370:	83 ed       	ldi	r24, 0xD3	; 211
 372:	90 e3       	ldi	r25, 0x30	; 48
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <NrfPortInit+0x16>
 378:	00 c0       	rjmp	.+0      	; 0x37a <NrfPortInit+0x1c>
 37a:	00 00       	nop
 37c:	08 95       	ret

0000037e <nRFGetStatus>:
	_delay_ms(50);
}

uint8_t nRFGetStatus(void){
	uint8_t status=0;
	CSN_lo;
 37e:	29 98       	cbi	0x05, 1	; 5
	status=SPIWriteRead(NOP);
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	0e d2       	rcall	.+1052   	; 0x7a0 <SPIWriteRead>
	CSN_hi;
 384:	29 9a       	sbi	0x05, 1	; 5
	return status;
}
 386:	08 95       	ret

00000388 <ReadFromNrf>:

//read data
uint8_t ReadFromNrf(uint8_t reg){
    CSN_lo;
 388:	29 98       	cbi	0x05, 1	; 5
	reg=SPIWriteRead(reg);
 38a:	0a d2       	rcall	.+1044   	; 0x7a0 <SPIWriteRead>
	reg=SPIWriteRead(NOP);
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	08 d2       	rcall	.+1040   	; 0x7a0 <SPIWriteRead>
	CSN_hi;
 390:	29 9a       	sbi	0x05, 1	; 5
    return reg;
}
 392:	08 95       	ret

00000394 <WriteToNrf>:

void WriteToNrf(uint8_t ReadWrite,uint8_t reg, uint8_t *val, uint8_t antVal){
 394:	af 92       	push	r10
 396:	bf 92       	push	r11
 398:	cf 92       	push	r12
 39a:	df 92       	push	r13
 39c:	ef 92       	push	r14
 39e:	ff 92       	push	r15
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	b8 2e       	mov	r11, r24
 3aa:	a6 2e       	mov	r10, r22
 3ac:	8a 01       	movw	r16, r20
 3ae:	e2 2e       	mov	r14, r18
    int i;
    if(ReadWrite == W){
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	b8 12       	cpse	r11, r24
 3b4:	04 c0       	rjmp	.+8      	; 0x3be <WriteToNrf+0x2a>
        reg = (W_REGISTER | (REGISTER_MASK & reg));
 3b6:	86 2f       	mov	r24, r22
 3b8:	8f 71       	andi	r24, 0x1F	; 31
 3ba:	80 62       	ori	r24, 0x20	; 32
 3bc:	a8 2e       	mov	r10, r24
    }
    CSN_lo;
 3be:	29 98       	cbi	0x05, 1	; 5
	SPIWriteRead(reg);
 3c0:	8a 2d       	mov	r24, r10
 3c2:	ee d1       	rcall	.+988    	; 0x7a0 <SPIWriteRead>
    for(i=0;i<antVal;i++){
 3c4:	f1 2c       	mov	r15, r1
 3c6:	1e 14       	cp	r1, r14
 3c8:	1f 04       	cpc	r1, r15
 3ca:	b4 f4       	brge	.+44     	; 0x3f8 <WriteToNrf+0x64>
 3cc:	c0 e0       	ldi	r28, 0x00	; 0
 3ce:	d0 e0       	ldi	r29, 0x00	; 0
        if(ReadWrite == R && reg != W_TX_PAYLOAD){
 3d0:	b1 10       	cpse	r11, r1
 3d2:	06 c0       	rjmp	.+12     	; 0x3e0 <WriteToNrf+0x4c>
 3d4:	e0 ea       	ldi	r30, 0xA0	; 160
 3d6:	ae 16       	cp	r10, r30
 3d8:	19 f0       	breq	.+6      	; 0x3e0 <WriteToNrf+0x4c>
            SPIWriteRead(NOP);
 3da:	8f ef       	ldi	r24, 0xFF	; 255
 3dc:	e1 d1       	rcall	.+962    	; 0x7a0 <SPIWriteRead>
 3de:	08 c0       	rjmp	.+16     	; 0x3f0 <WriteToNrf+0x5c>
        }else{
            SPIWriteRead(*(val++));
 3e0:	68 01       	movw	r12, r16
 3e2:	ff ef       	ldi	r31, 0xFF	; 255
 3e4:	cf 1a       	sub	r12, r31
 3e6:	df 0a       	sbc	r13, r31
 3e8:	f8 01       	movw	r30, r16
 3ea:	80 81       	ld	r24, Z
 3ec:	d9 d1       	rcall	.+946    	; 0x7a0 <SPIWriteRead>
 3ee:	86 01       	movw	r16, r12
    if(ReadWrite == W){
        reg = (W_REGISTER | (REGISTER_MASK & reg));
    }
    CSN_lo;
	SPIWriteRead(reg);
    for(i=0;i<antVal;i++){
 3f0:	21 96       	adiw	r28, 0x01	; 1
 3f2:	ce 15       	cp	r28, r14
 3f4:	df 05       	cpc	r29, r15
 3f6:	61 f7       	brne	.-40     	; 0x3d0 <WriteToNrf+0x3c>
			//sprintf(TextBuffer, "val addr: %i, value: %u \r\n", val, *val);
			//TransmitStringToUART(TextBuffer);
			//val++;
        }
    }
	CSN_hi;
 3f8:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fa:	f3 e0       	ldi	r31, 0x03	; 3
 3fc:	fa 95       	dec	r31
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <WriteToNrf+0x68>
 400:	00 00       	nop
	//ClearBit(LED1_port,LED1_pin);
	_delay_us(10);
    //return val;
}
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	df 90       	pop	r13
 410:	cf 90       	pop	r12
 412:	bf 90       	pop	r11
 414:	af 90       	pop	r10
 416:	08 95       	ret

00000418 <WriteReg>:

void WriteReg(uint8_t reg, uint8_t val){
 418:	cf 93       	push	r28
 41a:	c6 2f       	mov	r28, r22
	CSN_lo;
 41c:	29 98       	cbi	0x05, 1	; 5
	reg=SPIWriteRead(W_REGISTER | (REGISTER_MASK & reg));
 41e:	8f 71       	andi	r24, 0x1F	; 31
 420:	80 62       	ori	r24, 0x20	; 32
 422:	be d1       	rcall	.+892    	; 0x7a0 <SPIWriteRead>
	SPIWriteRead(val);
 424:	8c 2f       	mov	r24, r28
 426:	bc d1       	rcall	.+888    	; 0x7a0 <SPIWriteRead>
	CSN_hi;
 428:	29 9a       	sbi	0x05, 1	; 5
}	
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	ec 01       	movw	r28, r24
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	44 e0       	ldi	r20, 0x04	; 4
 43a:	50 e0       	ldi	r21, 0x00	; 0
 43c:	db 01       	movw	r26, r22
 43e:	a2 0f       	add	r26, r18
 440:	b3 1f       	adc	r27, r19
 442:	fa 01       	movw	r30, r20
 444:	e2 1b       	sub	r30, r18
 446:	f3 0b       	sbc	r31, r19
 448:	ec 0f       	add	r30, r28
 44a:	fd 1f       	adc	r31, r29
	//reverse address
	uint8_t i = 0;
	for(i=0; i<5; i++)
		memcpy(&addrrev[i], &addr[5-1-i], 1);
 44c:	90 81       	ld	r25, Z
 44e:	9c 93       	st	X, r25
 450:	2f 5f       	subi	r18, 0xFF	; 255
 452:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<5; i++)
 454:	25 30       	cpi	r18, 0x05	; 5
 456:	31 05       	cpc	r19, r1
 458:	89 f7       	brne	.-30     	; 0x43c <nrf24l01_revaddress+0xe>
		memcpy(&addrrev[i], &addr[5-1-i], 1);
}
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <NrfSetRXAddr>:
	
}

//************************************************************/
// RX RF_Adress setup 5 byte - Set Receiver Address
void NrfSetRXAddr(uint8_t channel, uint8_t *addr){
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	00 d0       	rcall	.+0      	; 0x466 <NrfSetRXAddr+0x6>
 466:	00 d0       	rcall	.+0      	; 0x468 <NrfSetRXAddr+0x8>
 468:	1f 92       	push	r1
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	9b 01       	movw	r18, r22
	if(channel == 0){
 470:	81 11       	cpse	r24, r1
 472:	15 c0       	rjmp	.+42     	; 0x49e <NrfSetRXAddr+0x3e>
			memcpy(&addr0, addr, 5);
 474:	85 e0       	ldi	r24, 0x05	; 5
 476:	fb 01       	movw	r30, r22
 478:	a3 e2       	ldi	r26, 0x23	; 35
 47a:	b1 e0       	ldi	r27, 0x01	; 1
 47c:	01 90       	ld	r0, Z+
 47e:	0d 92       	st	X+, r0
 480:	8a 95       	dec	r24
 482:	e1 f7       	brne	.-8      	; 0x47c <NrfSetRXAddr+0x1c>
			uint8_t revaddr[5];
			nrf24l01_revaddress(addr, (uint8_t *)revaddr);
 484:	be 01       	movw	r22, r28
 486:	6f 5f       	subi	r22, 0xFF	; 255
 488:	7f 4f       	sbci	r23, 0xFF	; 255
 48a:	c9 01       	movw	r24, r18
 48c:	d0 df       	rcall	.-96     	; 0x42e <nrf24l01_revaddress>
			WriteToNrf(W, RX_ADDR_P0, revaddr, 5);
 48e:	25 e0       	ldi	r18, 0x05	; 5
 490:	ae 01       	movw	r20, r28
 492:	4f 5f       	subi	r20, 0xFF	; 255
 494:	5f 4f       	sbci	r21, 0xFF	; 255
 496:	6a e0       	ldi	r22, 0x0A	; 10
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	7c df       	rcall	.-264    	; 0x394 <WriteToNrf>
 49c:	51 c0       	rjmp	.+162    	; 0x540 <NrfSetRXAddr+0xe0>
	}else if(channel == 1){	
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	a9 f4       	brne	.+42     	; 0x4cc <NrfSetRXAddr+0x6c>
			memcpy(&addr1, addr, 5);
 4a2:	85 e0       	ldi	r24, 0x05	; 5
 4a4:	fb 01       	movw	r30, r22
 4a6:	ae e1       	ldi	r26, 0x1E	; 30
 4a8:	b1 e0       	ldi	r27, 0x01	; 1
 4aa:	01 90       	ld	r0, Z+
 4ac:	0d 92       	st	X+, r0
 4ae:	8a 95       	dec	r24
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <NrfSetRXAddr+0x4a>
			uint8_t revaddr[5];
			nrf24l01_revaddress(addr, (uint8_t *)revaddr);
 4b2:	be 01       	movw	r22, r28
 4b4:	6f 5f       	subi	r22, 0xFF	; 255
 4b6:	7f 4f       	sbci	r23, 0xFF	; 255
 4b8:	c9 01       	movw	r24, r18
 4ba:	b9 df       	rcall	.-142    	; 0x42e <nrf24l01_revaddress>
			WriteToNrf(W, RX_ADDR_P1, revaddr, 5);
 4bc:	25 e0       	ldi	r18, 0x05	; 5
 4be:	ae 01       	movw	r20, r28
 4c0:	4f 5f       	subi	r20, 0xFF	; 255
 4c2:	5f 4f       	sbci	r21, 0xFF	; 255
 4c4:	6b e0       	ldi	r22, 0x0B	; 11
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	65 df       	rcall	.-310    	; 0x394 <WriteToNrf>
 4ca:	3a c0       	rjmp	.+116    	; 0x540 <NrfSetRXAddr+0xe0>
	}else if(channel == 2){
 4cc:	82 30       	cpi	r24, 0x02	; 2
 4ce:	69 f4       	brne	.+26     	; 0x4ea <NrfSetRXAddr+0x8a>
			memcpy(&addr2, addr, 5);
 4d0:	85 e0       	ldi	r24, 0x05	; 5
 4d2:	fb 01       	movw	r30, r22
 4d4:	a9 e1       	ldi	r26, 0x19	; 25
 4d6:	b1 e0       	ldi	r27, 0x01	; 1
 4d8:	01 90       	ld	r0, Z+
 4da:	0d 92       	st	X+, r0
 4dc:	8a 95       	dec	r24
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <NrfSetRXAddr+0x78>
			WriteReg(RX_ADDR_P2, addr[4]);
 4e0:	fb 01       	movw	r30, r22
 4e2:	64 81       	ldd	r22, Z+4	; 0x04
 4e4:	8c e0       	ldi	r24, 0x0C	; 12
 4e6:	98 df       	rcall	.-208    	; 0x418 <WriteReg>
 4e8:	2b c0       	rjmp	.+86     	; 0x540 <NrfSetRXAddr+0xe0>
	}else if(channel == 3){
 4ea:	83 30       	cpi	r24, 0x03	; 3
 4ec:	69 f4       	brne	.+26     	; 0x508 <NrfSetRXAddr+0xa8>
			memcpy(&addr3, addr, 5);
 4ee:	85 e0       	ldi	r24, 0x05	; 5
 4f0:	fb 01       	movw	r30, r22
 4f2:	a4 e1       	ldi	r26, 0x14	; 20
 4f4:	b1 e0       	ldi	r27, 0x01	; 1
 4f6:	01 90       	ld	r0, Z+
 4f8:	0d 92       	st	X+, r0
 4fa:	8a 95       	dec	r24
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <NrfSetRXAddr+0x96>
			WriteReg(RX_ADDR_P3, addr[4]);
 4fe:	fb 01       	movw	r30, r22
 500:	64 81       	ldd	r22, Z+4	; 0x04
 502:	8d e0       	ldi	r24, 0x0D	; 13
 504:	89 df       	rcall	.-238    	; 0x418 <WriteReg>
 506:	1c c0       	rjmp	.+56     	; 0x540 <NrfSetRXAddr+0xe0>
	}else if(channel == 4){
 508:	84 30       	cpi	r24, 0x04	; 4
 50a:	69 f4       	brne	.+26     	; 0x526 <NrfSetRXAddr+0xc6>
			memcpy(&addr4, addr, 5);
 50c:	85 e0       	ldi	r24, 0x05	; 5
 50e:	fb 01       	movw	r30, r22
 510:	af e0       	ldi	r26, 0x0F	; 15
 512:	b1 e0       	ldi	r27, 0x01	; 1
 514:	01 90       	ld	r0, Z+
 516:	0d 92       	st	X+, r0
 518:	8a 95       	dec	r24
 51a:	e1 f7       	brne	.-8      	; 0x514 <NrfSetRXAddr+0xb4>
			WriteReg(RX_ADDR_P4, addr[4]);
 51c:	fb 01       	movw	r30, r22
 51e:	64 81       	ldd	r22, Z+4	; 0x04
 520:	8e e0       	ldi	r24, 0x0E	; 14
 522:	7a df       	rcall	.-268    	; 0x418 <WriteReg>
 524:	0d c0       	rjmp	.+26     	; 0x540 <NrfSetRXAddr+0xe0>
	}else if(channel == 5){
 526:	85 30       	cpi	r24, 0x05	; 5
 528:	59 f4       	brne	.+22     	; 0x540 <NrfSetRXAddr+0xe0>
			memcpy(&addr5, addr, 5);
 52a:	fb 01       	movw	r30, r22
 52c:	aa e0       	ldi	r26, 0x0A	; 10
 52e:	b1 e0       	ldi	r27, 0x01	; 1
 530:	01 90       	ld	r0, Z+
 532:	0d 92       	st	X+, r0
 534:	8a 95       	dec	r24
 536:	e1 f7       	brne	.-8      	; 0x530 <NrfSetRXAddr+0xd0>
			WriteReg(RX_ADDR_P5, addr[4]);
 538:	fb 01       	movw	r30, r22
 53a:	64 81       	ldd	r22, Z+4	; 0x04
 53c:	8f e0       	ldi	r24, 0x0F	; 15
 53e:	6c df       	rcall	.-296    	; 0x418 <WriteReg>
	}
}
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <NrfConfig>:
// Init nFR24L01+

uint8_t NrfConfig(void){
	//setup port
	
	CSN_hi;
 550:	29 9a       	sbi	0x05, 1	; 5
	CE_lo;
 552:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 554:	81 ee       	ldi	r24, 0xE1	; 225
 556:	94 e0       	ldi	r25, 0x04	; 4
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <NrfConfig+0x8>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <NrfConfig+0xe>
 55e:	00 00       	nop
	_delay_ms(5);
	
	// RF power mode and data speed - 1 Mbps, 0 dB
    WriteReg(RF_SETUP,  ReadFromNrf(RF_SETUP) | (3<<RF_PWR));
 560:	86 e0       	ldi	r24, 0x06	; 6
 562:	12 df       	rcall	.-476    	; 0x388 <ReadFromNrf>
 564:	68 2f       	mov	r22, r24
 566:	63 60       	ori	r22, 0x03	; 3
 568:	86 e0       	ldi	r24, 0x06	; 6
 56a:	56 df       	rcall	.-340    	; 0x418 <WriteReg>
	WriteReg(RF_SETUP, ReadFromNrf(RF_SETUP) & ~((1<<RF_DR_HIGH) | (1<<RF_DR_LOW)));
 56c:	86 e0       	ldi	r24, 0x06	; 6
 56e:	0c df       	rcall	.-488    	; 0x388 <ReadFromNrf>
 570:	68 2f       	mov	r22, r24
 572:	67 7d       	andi	r22, 0xD7	; 215
 574:	86 e0       	ldi	r24, 0x06	; 6
 576:	50 df       	rcall	.-352    	; 0x418 <WriteReg>
	
	//Enable CRC with 2 bytes
	WriteReg(CONFIG, ReadFromNrf(CONFIG) | (1<<EN_CRC) | (1<<CRCO));
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	06 df       	rcall	.-500    	; 0x388 <ReadFromNrf>
 57c:	68 2f       	mov	r22, r24
 57e:	6c 60       	ori	r22, 0x0C	; 12
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	4a df       	rcall	.-364    	; 0x418 <WriteReg>
	
	// Retry setup number and delay between them ??
    WriteReg(SETUP_RETR, (2<<ARD) | (10<<ARC));
 584:	6a e2       	ldi	r22, 0x2A	; 42
 586:	84 e0       	ldi	r24, 0x04	; 4
 588:	47 df       	rcall	.-370    	; 0x418 <WriteReg>
	
	// Allow the arbitrary payload length
	//WriteReg(FEATURE, 0x04); // disabled
	
	// Set arbitrary length for channels: in first channel
	WriteReg(DYNPD, 0);
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	8c e1       	ldi	r24, 0x1C	; 28
 58e:	44 df       	rcall	.-376    	; 0x418 <WriteReg>
	
	// RF choose frequency (channel) - 3 (?? GHz)
    WriteReg(RF_CH, 76); 
 590:	6c e4       	ldi	r22, 0x4C	; 76
 592:	85 e0       	ldi	r24, 0x05	; 5
 594:	41 df       	rcall	.-382    	; 0x418 <WriteReg>
	
	//Payload Width Setup 1-32 (How many bytes to send per transmission)
    WriteReg(RX_PW_P0, PAYLOAD_LENGTH);
 596:	60 e1       	ldi	r22, 0x10	; 16
 598:	81 e1       	ldi	r24, 0x11	; 17
 59a:	3e df       	rcall	.-388    	; 0x418 <WriteReg>
	WriteReg(RX_PW_P1, PAYLOAD_LENGTH);
 59c:	60 e1       	ldi	r22, 0x10	; 16
 59e:	82 e1       	ldi	r24, 0x12	; 18
 5a0:	3b df       	rcall	.-394    	; 0x418 <WriteReg>
	WriteReg(RX_PW_P2, PAYLOAD_LENGTH);
 5a2:	60 e1       	ldi	r22, 0x10	; 16
 5a4:	83 e1       	ldi	r24, 0x13	; 19
 5a6:	38 df       	rcall	.-400    	; 0x418 <WriteReg>
	WriteReg(RX_PW_P3, PAYLOAD_LENGTH);
 5a8:	60 e1       	ldi	r22, 0x10	; 16
 5aa:	84 e1       	ldi	r24, 0x14	; 20
 5ac:	35 df       	rcall	.-406    	; 0x418 <WriteReg>
	WriteReg(RX_PW_P4, PAYLOAD_LENGTH);
 5ae:	60 e1       	ldi	r22, 0x10	; 16
 5b0:	85 e1       	ldi	r24, 0x15	; 21
 5b2:	32 df       	rcall	.-412    	; 0x418 <WriteReg>
	WriteReg(RX_PW_P5, PAYLOAD_LENGTH);
 5b4:	60 e1       	ldi	r22, 0x10	; 16
 5b6:	86 e1       	ldi	r24, 0x16	; 22
 5b8:	2f df       	rcall	.-418    	; 0x418 <WriteReg>
	
	// Enabling data pipes
    WriteReg(EN_RXADDR, 0);
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	2c df       	rcall	.-424    	; 0x418 <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P0));
 5c0:	82 e0       	ldi	r24, 0x02	; 2
 5c2:	e2 de       	rcall	.-572    	; 0x388 <ReadFromNrf>
 5c4:	68 2f       	mov	r22, r24
 5c6:	61 60       	ori	r22, 0x01	; 1
 5c8:	82 e0       	ldi	r24, 0x02	; 2
 5ca:	26 df       	rcall	.-436    	; 0x418 <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P1));
 5cc:	82 e0       	ldi	r24, 0x02	; 2
 5ce:	dc de       	rcall	.-584    	; 0x388 <ReadFromNrf>
 5d0:	68 2f       	mov	r22, r24
 5d2:	62 60       	ori	r22, 0x02	; 2
 5d4:	82 e0       	ldi	r24, 0x02	; 2
 5d6:	20 df       	rcall	.-448    	; 0x418 <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P2));
 5d8:	82 e0       	ldi	r24, 0x02	; 2
 5da:	d6 de       	rcall	.-596    	; 0x388 <ReadFromNrf>
 5dc:	68 2f       	mov	r22, r24
 5de:	64 60       	ori	r22, 0x04	; 4
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	1a df       	rcall	.-460    	; 0x418 <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P3));
 5e4:	82 e0       	ldi	r24, 0x02	; 2
 5e6:	d0 de       	rcall	.-608    	; 0x388 <ReadFromNrf>
 5e8:	68 2f       	mov	r22, r24
 5ea:	68 60       	ori	r22, 0x08	; 8
 5ec:	82 e0       	ldi	r24, 0x02	; 2
 5ee:	14 df       	rcall	.-472    	; 0x418 <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P4));
 5f0:	82 e0       	ldi	r24, 0x02	; 2
 5f2:	ca de       	rcall	.-620    	; 0x388 <ReadFromNrf>
 5f4:	68 2f       	mov	r22, r24
 5f6:	60 61       	ori	r22, 0x10	; 16
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	0e df       	rcall	.-484    	; 0x418 <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P5));
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	c4 de       	rcall	.-632    	; 0x388 <ReadFromNrf>
 600:	68 2f       	mov	r22, r24
 602:	60 62       	ori	r22, 0x20	; 32
 604:	82 e0       	ldi	r24, 0x02	; 2
 606:	08 df       	rcall	.-496    	; 0x418 <WriteReg>
	
    // Enable Auto-acknowledgment
    WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P0));
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	be de       	rcall	.-644    	; 0x388 <ReadFromNrf>
 60c:	68 2f       	mov	r22, r24
 60e:	61 60       	ori	r22, 0x01	; 1
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	02 df       	rcall	.-508    	; 0x418 <WriteReg>
	WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P1));
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	b8 de       	rcall	.-656    	; 0x388 <ReadFromNrf>
 618:	68 2f       	mov	r22, r24
 61a:	62 60       	ori	r22, 0x02	; 2
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	fc de       	rcall	.-520    	; 0x418 <WriteReg>
	WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P2));
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	b2 de       	rcall	.-668    	; 0x388 <ReadFromNrf>
 624:	68 2f       	mov	r22, r24
 626:	64 60       	ori	r22, 0x04	; 4
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	f6 de       	rcall	.-532    	; 0x418 <WriteReg>
	WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P3));
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	ac de       	rcall	.-680    	; 0x388 <ReadFromNrf>
 630:	68 2f       	mov	r22, r24
 632:	68 60       	ori	r22, 0x08	; 8
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	f0 de       	rcall	.-544    	; 0x418 <WriteReg>
	WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P4));
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	a6 de       	rcall	.-692    	; 0x388 <ReadFromNrf>
 63c:	68 2f       	mov	r22, r24
 63e:	60 61       	ori	r22, 0x10	; 16
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	ea de       	rcall	.-556    	; 0x418 <WriteReg>
	WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P5));
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	a0 de       	rcall	.-704    	; 0x388 <ReadFromNrf>
 648:	68 2f       	mov	r22, r24
 64a:	60 62       	ori	r22, 0x20	; 32
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	e4 de       	rcall	.-568    	; 0x418 <WriteReg>
	
	// Address width - 5 bytes
    WriteReg(SETUP_AW, 0x03);
 650:	63 e0       	ldi	r22, 0x03	; 3
 652:	83 e0       	ldi	r24, 0x03	; 3
 654:	e1 de       	rcall	.-574    	; 0x418 <WriteReg>
	
	// Set RX address
	NrfSetRXAddr(0,addr0);
 656:	63 e2       	ldi	r22, 0x23	; 35
 658:	71 e0       	ldi	r23, 0x01	; 1
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	01 df       	rcall	.-510    	; 0x460 <NrfSetRXAddr>
	NrfSetRXAddr(1,addr1);
 65e:	6e e1       	ldi	r22, 0x1E	; 30
 660:	71 e0       	ldi	r23, 0x01	; 1
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	fd de       	rcall	.-518    	; 0x460 <NrfSetRXAddr>
	NrfSetRXAddr(2,addr2);
 666:	69 e1       	ldi	r22, 0x19	; 25
 668:	71 e0       	ldi	r23, 0x01	; 1
 66a:	82 e0       	ldi	r24, 0x02	; 2
 66c:	f9 de       	rcall	.-526    	; 0x460 <NrfSetRXAddr>
	NrfSetRXAddr(3,addr3);
 66e:	64 e1       	ldi	r22, 0x14	; 20
 670:	71 e0       	ldi	r23, 0x01	; 1
 672:	83 e0       	ldi	r24, 0x03	; 3
 674:	f5 de       	rcall	.-534    	; 0x460 <NrfSetRXAddr>
	NrfSetRXAddr(4,addr4);
 676:	6f e0       	ldi	r22, 0x0F	; 15
 678:	71 e0       	ldi	r23, 0x01	; 1
 67a:	84 e0       	ldi	r24, 0x04	; 4
 67c:	f1 de       	rcall	.-542    	; 0x460 <NrfSetRXAddr>
	NrfSetRXAddr(5,addr5);
 67e:	6a e0       	ldi	r22, 0x0A	; 10
 680:	71 e0       	ldi	r23, 0x01	; 1
 682:	85 e0       	ldi	r24, 0x05	; 5
 684:	ed de       	rcall	.-550    	; 0x460 <NrfSetRXAddr>

	// Set RX mode
	//NrfSetRX();
	return 1;//(ReadFromNrf(CONFIG) == ((1<<EN_CRC) | (1<<CRCO) | (1<<PWR_UP) | (1<<PRIM_RX))) ? 1 : 0;
	
}
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	08 95       	ret

0000068a <NrfSetTXAddr>:
	}
}

/***************************************************************/
// TX RF_Address setup 5 byte - Set Transmitter address
void NrfSetTXAddr(uint8_t *addr){
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	00 d0       	rcall	.+0      	; 0x690 <NrfSetTXAddr+0x6>
 690:	00 d0       	rcall	.+0      	; 0x692 <NrfSetTXAddr+0x8>
 692:	1f 92       	push	r1
 694:	cd b7       	in	r28, 0x3d	; 61
 696:	de b7       	in	r29, 0x3e	; 62
	memcpy(&addrtx, addr, 5);
 698:	25 e0       	ldi	r18, 0x05	; 5
 69a:	fc 01       	movw	r30, r24
 69c:	a5 e0       	ldi	r26, 0x05	; 5
 69e:	b1 e0       	ldi	r27, 0x01	; 1
 6a0:	01 90       	ld	r0, Z+
 6a2:	0d 92       	st	X+, r0
 6a4:	2a 95       	dec	r18
 6a6:	e1 f7       	brne	.-8      	; 0x6a0 <NrfSetTXAddr+0x16>
	uint8_t revaddr[5];
	nrf24l01_revaddress(addr, (uint8_t *)revaddr);
 6a8:	be 01       	movw	r22, r28
 6aa:	6f 5f       	subi	r22, 0xFF	; 255
 6ac:	7f 4f       	sbci	r23, 0xFF	; 255
 6ae:	bf de       	rcall	.-642    	; 0x42e <nrf24l01_revaddress>
	WriteToNrf(W, RX_ADDR_P0, revaddr, 5);
 6b0:	25 e0       	ldi	r18, 0x05	; 5
 6b2:	ae 01       	movw	r20, r28
 6b4:	4f 5f       	subi	r20, 0xFF	; 255
 6b6:	5f 4f       	sbci	r21, 0xFF	; 255
 6b8:	6a e0       	ldi	r22, 0x0A	; 10
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	6b de       	rcall	.-810    	; 0x394 <WriteToNrf>
	WriteToNrf(W, TX_ADDR, revaddr, 5);
 6be:	25 e0       	ldi	r18, 0x05	; 5
 6c0:	ae 01       	movw	r20, r28
 6c2:	4f 5f       	subi	r20, 0xFF	; 255
 6c4:	5f 4f       	sbci	r21, 0xFF	; 255
 6c6:	60 e1       	ldi	r22, 0x10	; 16
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	64 de       	rcall	.-824    	; 0x394 <WriteToNrf>
}	
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
 6d0:	0f 90       	pop	r0
 6d2:	0f 90       	pop	r0
 6d4:	0f 90       	pop	r0
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	08 95       	ret

000006dc <reset_interrupts>:

/****************************************************************/
void reset_interrupts(void){
    WriteReg(STATUS, nRFGetStatus());
 6dc:	50 de       	rcall	.-864    	; 0x37e <nRFGetStatus>
 6de:	68 2f       	mov	r22, r24
 6e0:	87 e0       	ldi	r24, 0x07	; 7
 6e2:	9a de       	rcall	.-716    	; 0x418 <WriteReg>
 6e4:	08 95       	ret

000006e6 <send_payload>:
	//start transmittion
	send_payload();
}

void send_payload(void){
	CE_hi;
 6e6:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6e8:	85 e0       	ldi	r24, 0x05	; 5
 6ea:	8a 95       	dec	r24
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <send_payload+0x4>
	_delay_us(15);
	CE_lo;
 6ee:	28 98       	cbi	0x05, 0	; 5
 6f0:	08 95       	ret

000006f2 <NrfFlushTXfifo>:
	SPIWriteRead(FLUSH_RX);
	CSN_hi;
}

void NrfFlushTXfifo(void){
	CSN_lo;
 6f2:	29 98       	cbi	0x05, 1	; 5
	SPIWriteRead(FLUSH_TX);
 6f4:	81 ee       	ldi	r24, 0xE1	; 225
 6f6:	54 d0       	rcall	.+168    	; 0x7a0 <SPIWriteRead>
	CSN_hi;
 6f8:	29 9a       	sbi	0x05, 1	; 5
 6fa:	08 95       	ret

000006fc <NrfSetTX>:
	CE_lo;
}


void NrfSetTX(void){
	CE_lo;
 6fc:	28 98       	cbi	0x05, 0	; 5
 6fe:	82 e3       	ldi	r24, 0x32	; 50
 700:	8a 95       	dec	r24
 702:	f1 f7       	brne	.-4      	; 0x700 <NrfSetTX+0x4>
	_delay_us(150);
	WriteReg(CONFIG, ReadFromNrf(CONFIG) & ~(1<<PRIM_RX));// | (1<<EN_CRC) | (1<<CRCO));
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	40 de       	rcall	.-896    	; 0x388 <ReadFromNrf>
 708:	68 2f       	mov	r22, r24
 70a:	6e 7f       	andi	r22, 0xFE	; 254
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	84 de       	rcall	.-760    	; 0x418 <WriteReg>
 710:	82 e3       	ldi	r24, 0x32	; 50
 712:	8a 95       	dec	r24
 714:	f1 f7       	brne	.-4      	; 0x712 <NrfSetTX+0x16>
	_delay_us(150);
	WriteReg(CONFIG, ReadFromNrf(CONFIG) | (1<<PWR_UP));
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	37 de       	rcall	.-914    	; 0x388 <ReadFromNrf>
 71a:	68 2f       	mov	r22, r24
 71c:	62 60       	ori	r22, 0x02	; 2
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	7b de       	rcall	.-778    	; 0x418 <WriteReg>
	WriteReg(STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
 722:	60 e7       	ldi	r22, 0x70	; 112
 724:	87 e0       	ldi	r24, 0x07	; 7
 726:	78 de       	rcall	.-784    	; 0x418 <WriteReg>
	NrfFlushTXfifo();
 728:	e4 df       	rcall	.-56     	; 0x6f2 <NrfFlushTXfifo>
 72a:	82 e3       	ldi	r24, 0x32	; 50
 72c:	8a 95       	dec	r24
 72e:	f1 f7       	brne	.-4      	; 0x72c <NrfSetTX+0x30>
 730:	08 95       	ret

00000732 <transmit_payload>:
    WriteReg(STATUS, nRFGetStatus());
}

/************************************************************************/

void transmit_payload(uint8_t *addr, uint8_t *W_buff, uint8_t num){
 732:	ff 92       	push	r15
 734:	0f 93       	push	r16
 736:	1f 93       	push	r17
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	ec 01       	movw	r28, r24
 73e:	8b 01       	movw	r16, r22
 740:	f4 2e       	mov	r15, r20
    CE_lo;
 742:	28 98       	cbi	0x05, 0	; 5
 744:	82 e3       	ldi	r24, 0x32	; 50
 746:	8a 95       	dec	r24
 748:	f1 f7       	brne	.-4      	; 0x746 <transmit_payload+0x14>
	_delay_us(150);
	NrfSetTX();
 74a:	d8 df       	rcall	.-80     	; 0x6fc <NrfSetTX>
	NrfSetRXAddr(0, addr);
 74c:	be 01       	movw	r22, r28
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	87 de       	rcall	.-754    	; 0x460 <NrfSetRXAddr>
	NrfSetTXAddr(addr);
 752:	ce 01       	movw	r24, r28
 754:	9a df       	rcall	.-204    	; 0x68a <NrfSetTXAddr>
	//sprintf(TextBuffer, "W_buff addr: %i \r\n", W_buff);
	//TransmitStringToUART(TextBuffer);
    WriteToNrf(R, W_TX_PAYLOAD, W_buff, num);
 756:	2f 2d       	mov	r18, r15
 758:	a8 01       	movw	r20, r16
 75a:	60 ea       	ldi	r22, 0xA0	; 160
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	1a de       	rcall	.-972    	; 0x394 <WriteToNrf>
	//start transmittion
	send_payload();
 760:	c2 df       	rcall	.-124    	; 0x6e6 <send_payload>
}
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	ff 90       	pop	r15
 76c:	08 95       	ret

0000076e <reuse_payload>:
	SPIWriteRead(FLUSH_TX);
	CSN_hi;
}

void reuse_payload(void){
	CSN_lo;
 76e:	29 98       	cbi	0x05, 1	; 5
	SPIWriteRead(REUSE_TX_PL);
 770:	83 ee       	ldi	r24, 0xE3	; 227
 772:	16 d0       	rcall	.+44     	; 0x7a0 <SPIWriteRead>
	CSN_hi;
 774:	29 9a       	sbi	0x05, 1	; 5
 776:	08 95       	ret

00000778 <NrfPowerDown>:
}

void NrfPowerDown(void){
	WriteReg(CONFIG, (ReadFromNrf(CONFIG) & (~(1<<PWR_UP))));
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	06 de       	rcall	.-1012   	; 0x388 <ReadFromNrf>
 77c:	68 2f       	mov	r22, r24
 77e:	6d 7f       	andi	r22, 0xFD	; 253
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	4a de       	rcall	.-876    	; 0x418 <WriteReg>
 784:	08 95       	ret

00000786 <SPIInit>:
#include "SPIMethods.h"
#include "macros.h"
// SPI Init
void SPIInit(void){
	
	DDR_SPI &= ~((1<<SPI_MISO) | (1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); // input
 786:	84 b1       	in	r24, 0x04	; 4
 788:	83 7c       	andi	r24, 0xC3	; 195
 78a:	84 b9       	out	0x04, r24	; 4
    DDR_SPI |= ( (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<SPI_SS)); //output
 78c:	84 b1       	in	r24, 0x04	; 4
 78e:	8c 62       	ori	r24, 0x2C	; 44
 790:	84 b9       	out	0x04, r24	; 4
	
	CSN_ddr |=(1<<CSN_pin); // output
 792:	21 9a       	sbi	0x04, 1	; 4
    CE_ddr |=(1<<CE_pin); // output
 794:	20 9a       	sbi	0x04, 0	; 4
	
	SPCR = ((0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(1<<SPR0));
 796:	81 e5       	ldi	r24, 0x51	; 81
 798:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	8d bd       	out	0x2d, r24	; 45
 79e:	08 95       	ret

000007a0 <SPIWriteRead>:
	//SPCR = ((0<<SPIE)|(0<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(1<<SPR0));
}

//Send data via SPI to nRF
uint8_t SPIWriteRead(uint8_t data){
    SPDR=data;
 7a0:	8e bd       	out	0x2e, r24	; 46
    while((SPSR & (1<<SPIF)) == 0);
 7a2:	0d b4       	in	r0, 0x2d	; 45
 7a4:	07 fe       	sbrs	r0, 7
 7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <SPIWriteRead+0x2>
    return SPDR;
 7a8:	8e b5       	in	r24, 0x2e	; 46
}
 7aa:	08 95       	ret

000007ac <twi_disable>:
//2-write data
//3-read data

#include "twi_avr.h"
void twi_disable(void){
	PORTC |= (1<<PINC4)|(1<<PINC5);
 7ac:	88 b1       	in	r24, 0x08	; 8
 7ae:	80 63       	ori	r24, 0x30	; 48
 7b0:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~((1<<PINC4)|(1<<PINC5));
 7b2:	87 b1       	in	r24, 0x07	; 7
 7b4:	8f 7c       	andi	r24, 0xCF	; 207
 7b6:	87 b9       	out	0x07, r24	; 7
 7b8:	08 95       	ret

000007ba <twi_init>:
}

void twi_init(void){
	PORTC |= (1<<PINC4)|(1<<PINC5);
 7ba:	88 b1       	in	r24, 0x08	; 8
 7bc:	80 63       	ori	r24, 0x30	; 48
 7be:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~((1<<PINC4)|(1<<PINC5));
 7c0:	87 b1       	in	r24, 0x07	; 7
 7c2:	8f 7c       	andi	r24, 0xCF	; 207
 7c4:	87 b9       	out	0x07, r24	; 7
    TWSR=0x00;
 7c6:	e9 eb       	ldi	r30, 0xB9	; 185
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	10 82       	st	Z, r1
    TWBR=0x02; //50kHz at 1MHz
 7cc:	82 e0       	ldi	r24, 0x02	; 2
 7ce:	80 93 b8 00 	sts	0x00B8, r24
    //TWBR=0x01;//333.33kHz
    TWSR = 0x00;
 7d2:	10 82       	st	Z, r1
 7d4:	08 95       	ret

000007d6 <twi_start>:
    //TransmitStringToUART("twi initialized");
    //TransmitStringToUART("\r\n");
}

void twi_start(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(1<<TWSTA)|(1<<TWEA)|(1<<TWINT);
 7d6:	85 ee       	ldi	r24, 0xE5	; 229
 7d8:	80 93 bc 00 	sts	0x00BC, r24
 7dc:	83 e0       	ldi	r24, 0x03	; 3
 7de:	8a 95       	dec	r24
 7e0:	f1 f7       	brne	.-4      	; 0x7de <twi_start+0x8>
 7e2:	00 00       	nop
 7e4:	08 95       	ret

000007e6 <twi_stop>:
    _delay_us(10);
}

void twi_stop(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(1<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
 7e6:	85 ed       	ldi	r24, 0xD5	; 213
 7e8:	80 93 bc 00 	sts	0x00BC, r24
 7ec:	83 e0       	ldi	r24, 0x03	; 3
 7ee:	8a 95       	dec	r24
 7f0:	f1 f7       	brne	.-4      	; 0x7ee <twi_stop+0x8>
 7f2:	00 00       	nop
 7f4:	08 95       	ret

000007f6 <twi_sht21_get>:

void twi_send_nack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(0<<TWEA)|(1<<TWINT);
}

float twi_sht21_get(uint8_t var){ // if var==1 then read a temperature, if var==2 humidity;
 7f6:	0f 93       	push	r16
 7f8:	1f 93       	push	r17
 7fa:	cf 93       	push	r28
 7fc:	c8 2f       	mov	r28, r24
	uint16_t tmp = 0;
	float r=0;
	twi_start();
 7fe:	eb df       	rcall	.-42     	; 0x7d6 <twi_start>
	while(!(TWCR&(1<<TWINT)));
 800:	ec eb       	ldi	r30, 0xBC	; 188
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	90 81       	ld	r25, Z
 806:	99 23       	and	r25, r25
 808:	ec f7       	brge	.-6      	; 0x804 <twi_sht21_get+0xe>
	TWDR = 0x80;
 80a:	80 e8       	ldi	r24, 0x80	; 128
 80c:	80 93 bb 00 	sts	0x00BB, r24
void twi_send_ack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
}

void twi_send_nack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(0<<TWEA)|(1<<TWINT);
 810:	85 e8       	ldi	r24, 0x85	; 133
 812:	80 93 bc 00 	sts	0x00BC, r24
	twi_start();
	while(!(TWCR&(1<<TWINT)));
	TWDR = 0x80;
	//TWCR = (1<<TWINT) | (1<<TWEN);
	twi_send_nack();
	while(!(TWCR&(1<<TWINT)));
 816:	ec eb       	ldi	r30, 0xBC	; 188
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	90 81       	ld	r25, Z
 81c:	99 23       	and	r25, r25
 81e:	ec f7       	brge	.-6      	; 0x81a <twi_sht21_get+0x24>
	if (var == 1){
 820:	c1 30       	cpi	r28, 0x01	; 1
 822:	21 f4       	brne	.+8      	; 0x82c <twi_sht21_get+0x36>
		TWDR = 0xF3;	
 824:	83 ef       	ldi	r24, 0xF3	; 243
 826:	80 93 bb 00 	sts	0x00BB, r24
 82a:	05 c0       	rjmp	.+10     	; 0x836 <twi_sht21_get+0x40>
	}else if (var == 2){
 82c:	c2 30       	cpi	r28, 0x02	; 2
 82e:	19 f4       	brne	.+6      	; 0x836 <twi_sht21_get+0x40>
		TWDR = 0xF5;
 830:	85 ef       	ldi	r24, 0xF5	; 245
 832:	80 93 bb 00 	sts	0x00BB, r24
void twi_send_ack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
}

void twi_send_nack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(0<<TWEA)|(1<<TWINT);
 836:	85 e8       	ldi	r24, 0x85	; 133
 838:	80 93 bc 00 	sts	0x00BC, r24
	}else if (var == 2){
		TWDR = 0xF5;
	}
	//TWCR = (1<<TWINT) | (1<<TWEN);
	twi_send_nack();
	while(!(TWCR&(1<<TWINT)));
 83c:	ec eb       	ldi	r30, 0xBC	; 188
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	90 81       	ld	r25, Z
 842:	99 23       	and	r25, r25
 844:	ec f7       	brge	.-6      	; 0x840 <twi_sht21_get+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 846:	87 ea       	ldi	r24, 0xA7	; 167
 848:	91 e6       	ldi	r25, 0x61	; 97
 84a:	01 97       	sbiw	r24, 0x01	; 1
 84c:	f1 f7       	brne	.-4      	; 0x84a <twi_sht21_get+0x54>
 84e:	00 c0       	rjmp	.+0      	; 0x850 <twi_sht21_get+0x5a>
 850:	00 00       	nop
	_delay_ms(100);
	twi_start();
 852:	c1 df       	rcall	.-126    	; 0x7d6 <twi_start>
	while(!(TWCR&(1<<TWINT)));
 854:	ec eb       	ldi	r30, 0xBC	; 188
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	90 81       	ld	r25, Z
 85a:	99 23       	and	r25, r25
 85c:	ec f7       	brge	.-6      	; 0x858 <twi_sht21_get+0x62>
	TWDR = 0x81;
 85e:	81 e8       	ldi	r24, 0x81	; 129
 860:	80 93 bb 00 	sts	0x00BB, r24
    //StringToUart("Stop");
    //StringToUart("\r\n");
}

void twi_send_ack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
 864:	85 ec       	ldi	r24, 0xC5	; 197
 866:	80 93 bc 00 	sts	0x00BC, r24
	twi_start();
	while(!(TWCR&(1<<TWINT)));
	TWDR = 0x81;
	//TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	twi_send_ack();
	while(!(TWCR&(1<<TWINT)));
 86a:	ec eb       	ldi	r30, 0xBC	; 188
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	90 81       	ld	r25, Z
 870:	99 23       	and	r25, r25
 872:	ec f7       	brge	.-6      	; 0x86e <twi_sht21_get+0x78>
    //StringToUart("Stop");
    //StringToUart("\r\n");
}

void twi_send_ack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
 874:	85 ec       	ldi	r24, 0xC5	; 197
 876:	80 93 bc 00 	sts	0x00BC, r24
	//TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	twi_send_ack();
	while(!(TWCR&(1<<TWINT)));
	//TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	twi_send_ack();
	while(!(TWCR&(1<<TWINT)));
 87a:	ec eb       	ldi	r30, 0xBC	; 188
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	90 81       	ld	r25, Z
 880:	99 23       	and	r25, r25
 882:	ec f7       	brge	.-6      	; 0x87e <twi_sht21_get+0x88>
	tmp=0x00ff&TWDR;
 884:	60 91 bb 00 	lds	r22, 0x00BB
 888:	70 e0       	ldi	r23, 0x00	; 0
    //StringToUart("Stop");
    //StringToUart("\r\n");
}

void twi_send_ack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
 88a:	85 ec       	ldi	r24, 0xC5	; 197
 88c:	80 93 bc 00 	sts	0x00BC, r24
	twi_send_ack();
	while(!(TWCR&(1<<TWINT)));
	tmp=0x00ff&TWDR;
	//TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	twi_send_ack();
	while(!(TWCR&(1<<TWINT)));
 890:	ec eb       	ldi	r30, 0xBC	; 188
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	90 81       	ld	r25, Z
 896:	99 23       	and	r25, r25
 898:	ec f7       	brge	.-6      	; 0x894 <twi_sht21_get+0x9e>
	tmp = tmp<<8;
 89a:	76 2f       	mov	r23, r22
 89c:	66 27       	eor	r22, r22
	tmp |= TWDR;
 89e:	80 91 bb 00 	lds	r24, 0x00BB
 8a2:	8b 01       	movw	r16, r22
 8a4:	08 2b       	or	r16, r24
    //StringToUart("Stop");
    //StringToUart("\r\n");
}

void twi_send_ack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
 8a6:	85 ec       	ldi	r24, 0xC5	; 197
 8a8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR&(1<<TWINT)));
	tmp = tmp<<8;
	tmp |= TWDR;
	//TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	twi_send_ack();
	while(!(TWCR&(1<<TWINT)));
 8ac:	ec eb       	ldi	r30, 0xBC	; 188
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	90 81       	ld	r25, Z
 8b2:	99 23       	and	r25, r25
 8b4:	ec f7       	brge	.-6      	; 0x8b0 <twi_sht21_get+0xba>
void twi_send_ack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
}

void twi_send_nack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(0<<TWEA)|(1<<TWINT);
 8b6:	85 e8       	ldi	r24, 0x85	; 133
 8b8:	80 93 bc 00 	sts	0x00BC, r24
	//TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	twi_send_ack();
	while(!(TWCR&(1<<TWINT)));
	//TWCR = (1<<TWINT) | (1<<TWEN);
	twi_send_nack();
	while(!(TWCR&(1<<TWINT)));
 8bc:	ec eb       	ldi	r30, 0xBC	; 188
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	90 81       	ld	r25, Z
 8c2:	99 23       	and	r25, r25
 8c4:	ec f7       	brge	.-6      	; 0x8c0 <twi_sht21_get+0xca>
	twi_stop();
 8c6:	8f df       	rcall	.-226    	; 0x7e6 <twi_stop>
	
	if (var == 1){
 8c8:	c1 30       	cpi	r28, 0x01	; 1
 8ca:	a1 f4       	brne	.+40     	; 0x8f4 <twi_sht21_get+0xfe>
		r = ((float)tmp)/65536*175.72-46.85;
 8cc:	b8 01       	movw	r22, r16
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	c3 d0       	rcall	.+390    	; 0xa5a <__floatunsisf>
 8d4:	20 e0       	ldi	r18, 0x00	; 0
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	40 e8       	ldi	r20, 0x80	; 128
 8da:	57 e3       	ldi	r21, 0x37	; 55
 8dc:	4c d1       	rcall	.+664    	; 0xb76 <__mulsf3>
 8de:	22 e5       	ldi	r18, 0x52	; 82
 8e0:	38 eb       	ldi	r19, 0xB8	; 184
 8e2:	4f e2       	ldi	r20, 0x2F	; 47
 8e4:	53 e4       	ldi	r21, 0x43	; 67
 8e6:	47 d1       	rcall	.+654    	; 0xb76 <__mulsf3>
 8e8:	26 e6       	ldi	r18, 0x66	; 102
 8ea:	36 e6       	ldi	r19, 0x66	; 102
 8ec:	4b e3       	ldi	r20, 0x3B	; 59
 8ee:	52 e4       	ldi	r21, 0x42	; 66
 8f0:	1e d0       	rcall	.+60     	; 0x92e <__subsf3>
 8f2:	19 c0       	rjmp	.+50     	; 0x926 <twi_sht21_get+0x130>
	}else if (var == 2){
 8f4:	c2 30       	cpi	r28, 0x02	; 2
 8f6:	a1 f4       	brne	.+40     	; 0x920 <twi_sht21_get+0x12a>
		r = ((float)tmp)/65536*125-6;
 8f8:	b8 01       	movw	r22, r16
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	ad d0       	rcall	.+346    	; 0xa5a <__floatunsisf>
 900:	20 e0       	ldi	r18, 0x00	; 0
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	40 e8       	ldi	r20, 0x80	; 128
 906:	57 e3       	ldi	r21, 0x37	; 55
 908:	36 d1       	rcall	.+620    	; 0xb76 <__mulsf3>
 90a:	20 e0       	ldi	r18, 0x00	; 0
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	4a ef       	ldi	r20, 0xFA	; 250
 910:	52 e4       	ldi	r21, 0x42	; 66
 912:	31 d1       	rcall	.+610    	; 0xb76 <__mulsf3>
 914:	20 e0       	ldi	r18, 0x00	; 0
 916:	30 e0       	ldi	r19, 0x00	; 0
 918:	40 ec       	ldi	r20, 0xC0	; 192
 91a:	50 e4       	ldi	r21, 0x40	; 64
 91c:	08 d0       	rcall	.+16     	; 0x92e <__subsf3>
 91e:	03 c0       	rjmp	.+6      	; 0x926 <twi_sht21_get+0x130>
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(0<<TWEA)|(1<<TWINT);
}

float twi_sht21_get(uint8_t var){ // if var==1 then read a temperature, if var==2 humidity;
	uint16_t tmp = 0;
	float r=0;
 920:	60 e0       	ldi	r22, 0x00	; 0
 922:	70 e0       	ldi	r23, 0x00	; 0
 924:	cb 01       	movw	r24, r22
		r = ((float)tmp)/65536*175.72-46.85;
	}else if (var == 2){
		r = ((float)tmp)/65536*125-6;
	}
	return r;
 926:	cf 91       	pop	r28
 928:	1f 91       	pop	r17
 92a:	0f 91       	pop	r16
 92c:	08 95       	ret

0000092e <__subsf3>:
 92e:	50 58       	subi	r21, 0x80	; 128

00000930 <__addsf3>:
 930:	bb 27       	eor	r27, r27
 932:	aa 27       	eor	r26, r26
 934:	0e d0       	rcall	.+28     	; 0x952 <__addsf3x>
 936:	e5 c0       	rjmp	.+458    	; 0xb02 <__fp_round>
 938:	d6 d0       	rcall	.+428    	; 0xae6 <__fp_pscA>
 93a:	30 f0       	brcs	.+12     	; 0x948 <__addsf3+0x18>
 93c:	db d0       	rcall	.+438    	; 0xaf4 <__fp_pscB>
 93e:	20 f0       	brcs	.+8      	; 0x948 <__addsf3+0x18>
 940:	31 f4       	brne	.+12     	; 0x94e <__addsf3+0x1e>
 942:	9f 3f       	cpi	r25, 0xFF	; 255
 944:	11 f4       	brne	.+4      	; 0x94a <__addsf3+0x1a>
 946:	1e f4       	brtc	.+6      	; 0x94e <__addsf3+0x1e>
 948:	cb c0       	rjmp	.+406    	; 0xae0 <__fp_nan>
 94a:	0e f4       	brtc	.+2      	; 0x94e <__addsf3+0x1e>
 94c:	e0 95       	com	r30
 94e:	e7 fb       	bst	r30, 7
 950:	c1 c0       	rjmp	.+386    	; 0xad4 <__fp_inf>

00000952 <__addsf3x>:
 952:	e9 2f       	mov	r30, r25
 954:	e7 d0       	rcall	.+462    	; 0xb24 <__fp_split3>
 956:	80 f3       	brcs	.-32     	; 0x938 <__addsf3+0x8>
 958:	ba 17       	cp	r27, r26
 95a:	62 07       	cpc	r22, r18
 95c:	73 07       	cpc	r23, r19
 95e:	84 07       	cpc	r24, r20
 960:	95 07       	cpc	r25, r21
 962:	18 f0       	brcs	.+6      	; 0x96a <__addsf3x+0x18>
 964:	71 f4       	brne	.+28     	; 0x982 <__addsf3x+0x30>
 966:	9e f5       	brtc	.+102    	; 0x9ce <__addsf3x+0x7c>
 968:	ff c0       	rjmp	.+510    	; 0xb68 <__fp_zero>
 96a:	0e f4       	brtc	.+2      	; 0x96e <__addsf3x+0x1c>
 96c:	e0 95       	com	r30
 96e:	0b 2e       	mov	r0, r27
 970:	ba 2f       	mov	r27, r26
 972:	a0 2d       	mov	r26, r0
 974:	0b 01       	movw	r0, r22
 976:	b9 01       	movw	r22, r18
 978:	90 01       	movw	r18, r0
 97a:	0c 01       	movw	r0, r24
 97c:	ca 01       	movw	r24, r20
 97e:	a0 01       	movw	r20, r0
 980:	11 24       	eor	r1, r1
 982:	ff 27       	eor	r31, r31
 984:	59 1b       	sub	r21, r25
 986:	99 f0       	breq	.+38     	; 0x9ae <__addsf3x+0x5c>
 988:	59 3f       	cpi	r21, 0xF9	; 249
 98a:	50 f4       	brcc	.+20     	; 0x9a0 <__addsf3x+0x4e>
 98c:	50 3e       	cpi	r21, 0xE0	; 224
 98e:	68 f1       	brcs	.+90     	; 0x9ea <__addsf3x+0x98>
 990:	1a 16       	cp	r1, r26
 992:	f0 40       	sbci	r31, 0x00	; 0
 994:	a2 2f       	mov	r26, r18
 996:	23 2f       	mov	r18, r19
 998:	34 2f       	mov	r19, r20
 99a:	44 27       	eor	r20, r20
 99c:	58 5f       	subi	r21, 0xF8	; 248
 99e:	f3 cf       	rjmp	.-26     	; 0x986 <__addsf3x+0x34>
 9a0:	46 95       	lsr	r20
 9a2:	37 95       	ror	r19
 9a4:	27 95       	ror	r18
 9a6:	a7 95       	ror	r26
 9a8:	f0 40       	sbci	r31, 0x00	; 0
 9aa:	53 95       	inc	r21
 9ac:	c9 f7       	brne	.-14     	; 0x9a0 <__addsf3x+0x4e>
 9ae:	7e f4       	brtc	.+30     	; 0x9ce <__addsf3x+0x7c>
 9b0:	1f 16       	cp	r1, r31
 9b2:	ba 0b       	sbc	r27, r26
 9b4:	62 0b       	sbc	r22, r18
 9b6:	73 0b       	sbc	r23, r19
 9b8:	84 0b       	sbc	r24, r20
 9ba:	ba f0       	brmi	.+46     	; 0x9ea <__addsf3x+0x98>
 9bc:	91 50       	subi	r25, 0x01	; 1
 9be:	a1 f0       	breq	.+40     	; 0x9e8 <__addsf3x+0x96>
 9c0:	ff 0f       	add	r31, r31
 9c2:	bb 1f       	adc	r27, r27
 9c4:	66 1f       	adc	r22, r22
 9c6:	77 1f       	adc	r23, r23
 9c8:	88 1f       	adc	r24, r24
 9ca:	c2 f7       	brpl	.-16     	; 0x9bc <__addsf3x+0x6a>
 9cc:	0e c0       	rjmp	.+28     	; 0x9ea <__addsf3x+0x98>
 9ce:	ba 0f       	add	r27, r26
 9d0:	62 1f       	adc	r22, r18
 9d2:	73 1f       	adc	r23, r19
 9d4:	84 1f       	adc	r24, r20
 9d6:	48 f4       	brcc	.+18     	; 0x9ea <__addsf3x+0x98>
 9d8:	87 95       	ror	r24
 9da:	77 95       	ror	r23
 9dc:	67 95       	ror	r22
 9de:	b7 95       	ror	r27
 9e0:	f7 95       	ror	r31
 9e2:	9e 3f       	cpi	r25, 0xFE	; 254
 9e4:	08 f0       	brcs	.+2      	; 0x9e8 <__addsf3x+0x96>
 9e6:	b3 cf       	rjmp	.-154    	; 0x94e <__addsf3+0x1e>
 9e8:	93 95       	inc	r25
 9ea:	88 0f       	add	r24, r24
 9ec:	08 f0       	brcs	.+2      	; 0x9f0 <__addsf3x+0x9e>
 9ee:	99 27       	eor	r25, r25
 9f0:	ee 0f       	add	r30, r30
 9f2:	97 95       	ror	r25
 9f4:	87 95       	ror	r24
 9f6:	08 95       	ret

000009f8 <__fixsfsi>:
 9f8:	04 d0       	rcall	.+8      	; 0xa02 <__fixunssfsi>
 9fa:	68 94       	set
 9fc:	b1 11       	cpse	r27, r1
 9fe:	b5 c0       	rjmp	.+362    	; 0xb6a <__fp_szero>
 a00:	08 95       	ret

00000a02 <__fixunssfsi>:
 a02:	98 d0       	rcall	.+304    	; 0xb34 <__fp_splitA>
 a04:	88 f0       	brcs	.+34     	; 0xa28 <__fixunssfsi+0x26>
 a06:	9f 57       	subi	r25, 0x7F	; 127
 a08:	90 f0       	brcs	.+36     	; 0xa2e <__fixunssfsi+0x2c>
 a0a:	b9 2f       	mov	r27, r25
 a0c:	99 27       	eor	r25, r25
 a0e:	b7 51       	subi	r27, 0x17	; 23
 a10:	a0 f0       	brcs	.+40     	; 0xa3a <__fixunssfsi+0x38>
 a12:	d1 f0       	breq	.+52     	; 0xa48 <__fixunssfsi+0x46>
 a14:	66 0f       	add	r22, r22
 a16:	77 1f       	adc	r23, r23
 a18:	88 1f       	adc	r24, r24
 a1a:	99 1f       	adc	r25, r25
 a1c:	1a f0       	brmi	.+6      	; 0xa24 <__fixunssfsi+0x22>
 a1e:	ba 95       	dec	r27
 a20:	c9 f7       	brne	.-14     	; 0xa14 <__fixunssfsi+0x12>
 a22:	12 c0       	rjmp	.+36     	; 0xa48 <__fixunssfsi+0x46>
 a24:	b1 30       	cpi	r27, 0x01	; 1
 a26:	81 f0       	breq	.+32     	; 0xa48 <__fixunssfsi+0x46>
 a28:	9f d0       	rcall	.+318    	; 0xb68 <__fp_zero>
 a2a:	b1 e0       	ldi	r27, 0x01	; 1
 a2c:	08 95       	ret
 a2e:	9c c0       	rjmp	.+312    	; 0xb68 <__fp_zero>
 a30:	67 2f       	mov	r22, r23
 a32:	78 2f       	mov	r23, r24
 a34:	88 27       	eor	r24, r24
 a36:	b8 5f       	subi	r27, 0xF8	; 248
 a38:	39 f0       	breq	.+14     	; 0xa48 <__fixunssfsi+0x46>
 a3a:	b9 3f       	cpi	r27, 0xF9	; 249
 a3c:	cc f3       	brlt	.-14     	; 0xa30 <__fixunssfsi+0x2e>
 a3e:	86 95       	lsr	r24
 a40:	77 95       	ror	r23
 a42:	67 95       	ror	r22
 a44:	b3 95       	inc	r27
 a46:	d9 f7       	brne	.-10     	; 0xa3e <__fixunssfsi+0x3c>
 a48:	3e f4       	brtc	.+14     	; 0xa58 <__fixunssfsi+0x56>
 a4a:	90 95       	com	r25
 a4c:	80 95       	com	r24
 a4e:	70 95       	com	r23
 a50:	61 95       	neg	r22
 a52:	7f 4f       	sbci	r23, 0xFF	; 255
 a54:	8f 4f       	sbci	r24, 0xFF	; 255
 a56:	9f 4f       	sbci	r25, 0xFF	; 255
 a58:	08 95       	ret

00000a5a <__floatunsisf>:
 a5a:	e8 94       	clt
 a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__floatsisf+0x12>

00000a5e <__floatsisf>:
 a5e:	97 fb       	bst	r25, 7
 a60:	3e f4       	brtc	.+14     	; 0xa70 <__floatsisf+0x12>
 a62:	90 95       	com	r25
 a64:	80 95       	com	r24
 a66:	70 95       	com	r23
 a68:	61 95       	neg	r22
 a6a:	7f 4f       	sbci	r23, 0xFF	; 255
 a6c:	8f 4f       	sbci	r24, 0xFF	; 255
 a6e:	9f 4f       	sbci	r25, 0xFF	; 255
 a70:	99 23       	and	r25, r25
 a72:	a9 f0       	breq	.+42     	; 0xa9e <__floatsisf+0x40>
 a74:	f9 2f       	mov	r31, r25
 a76:	96 e9       	ldi	r25, 0x96	; 150
 a78:	bb 27       	eor	r27, r27
 a7a:	93 95       	inc	r25
 a7c:	f6 95       	lsr	r31
 a7e:	87 95       	ror	r24
 a80:	77 95       	ror	r23
 a82:	67 95       	ror	r22
 a84:	b7 95       	ror	r27
 a86:	f1 11       	cpse	r31, r1
 a88:	f8 cf       	rjmp	.-16     	; 0xa7a <__floatsisf+0x1c>
 a8a:	fa f4       	brpl	.+62     	; 0xaca <__floatsisf+0x6c>
 a8c:	bb 0f       	add	r27, r27
 a8e:	11 f4       	brne	.+4      	; 0xa94 <__floatsisf+0x36>
 a90:	60 ff       	sbrs	r22, 0
 a92:	1b c0       	rjmp	.+54     	; 0xaca <__floatsisf+0x6c>
 a94:	6f 5f       	subi	r22, 0xFF	; 255
 a96:	7f 4f       	sbci	r23, 0xFF	; 255
 a98:	8f 4f       	sbci	r24, 0xFF	; 255
 a9a:	9f 4f       	sbci	r25, 0xFF	; 255
 a9c:	16 c0       	rjmp	.+44     	; 0xaca <__floatsisf+0x6c>
 a9e:	88 23       	and	r24, r24
 aa0:	11 f0       	breq	.+4      	; 0xaa6 <__floatsisf+0x48>
 aa2:	96 e9       	ldi	r25, 0x96	; 150
 aa4:	11 c0       	rjmp	.+34     	; 0xac8 <__floatsisf+0x6a>
 aa6:	77 23       	and	r23, r23
 aa8:	21 f0       	breq	.+8      	; 0xab2 <__floatsisf+0x54>
 aaa:	9e e8       	ldi	r25, 0x8E	; 142
 aac:	87 2f       	mov	r24, r23
 aae:	76 2f       	mov	r23, r22
 ab0:	05 c0       	rjmp	.+10     	; 0xabc <__floatsisf+0x5e>
 ab2:	66 23       	and	r22, r22
 ab4:	71 f0       	breq	.+28     	; 0xad2 <__floatsisf+0x74>
 ab6:	96 e8       	ldi	r25, 0x86	; 134
 ab8:	86 2f       	mov	r24, r22
 aba:	70 e0       	ldi	r23, 0x00	; 0
 abc:	60 e0       	ldi	r22, 0x00	; 0
 abe:	2a f0       	brmi	.+10     	; 0xaca <__floatsisf+0x6c>
 ac0:	9a 95       	dec	r25
 ac2:	66 0f       	add	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	da f7       	brpl	.-10     	; 0xac0 <__floatsisf+0x62>
 aca:	88 0f       	add	r24, r24
 acc:	96 95       	lsr	r25
 ace:	87 95       	ror	r24
 ad0:	97 f9       	bld	r25, 7
 ad2:	08 95       	ret

00000ad4 <__fp_inf>:
 ad4:	97 f9       	bld	r25, 7
 ad6:	9f 67       	ori	r25, 0x7F	; 127
 ad8:	80 e8       	ldi	r24, 0x80	; 128
 ada:	70 e0       	ldi	r23, 0x00	; 0
 adc:	60 e0       	ldi	r22, 0x00	; 0
 ade:	08 95       	ret

00000ae0 <__fp_nan>:
 ae0:	9f ef       	ldi	r25, 0xFF	; 255
 ae2:	80 ec       	ldi	r24, 0xC0	; 192
 ae4:	08 95       	ret

00000ae6 <__fp_pscA>:
 ae6:	00 24       	eor	r0, r0
 ae8:	0a 94       	dec	r0
 aea:	16 16       	cp	r1, r22
 aec:	17 06       	cpc	r1, r23
 aee:	18 06       	cpc	r1, r24
 af0:	09 06       	cpc	r0, r25
 af2:	08 95       	ret

00000af4 <__fp_pscB>:
 af4:	00 24       	eor	r0, r0
 af6:	0a 94       	dec	r0
 af8:	12 16       	cp	r1, r18
 afa:	13 06       	cpc	r1, r19
 afc:	14 06       	cpc	r1, r20
 afe:	05 06       	cpc	r0, r21
 b00:	08 95       	ret

00000b02 <__fp_round>:
 b02:	09 2e       	mov	r0, r25
 b04:	03 94       	inc	r0
 b06:	00 0c       	add	r0, r0
 b08:	11 f4       	brne	.+4      	; 0xb0e <__fp_round+0xc>
 b0a:	88 23       	and	r24, r24
 b0c:	52 f0       	brmi	.+20     	; 0xb22 <__fp_round+0x20>
 b0e:	bb 0f       	add	r27, r27
 b10:	40 f4       	brcc	.+16     	; 0xb22 <__fp_round+0x20>
 b12:	bf 2b       	or	r27, r31
 b14:	11 f4       	brne	.+4      	; 0xb1a <__fp_round+0x18>
 b16:	60 ff       	sbrs	r22, 0
 b18:	04 c0       	rjmp	.+8      	; 0xb22 <__fp_round+0x20>
 b1a:	6f 5f       	subi	r22, 0xFF	; 255
 b1c:	7f 4f       	sbci	r23, 0xFF	; 255
 b1e:	8f 4f       	sbci	r24, 0xFF	; 255
 b20:	9f 4f       	sbci	r25, 0xFF	; 255
 b22:	08 95       	ret

00000b24 <__fp_split3>:
 b24:	57 fd       	sbrc	r21, 7
 b26:	90 58       	subi	r25, 0x80	; 128
 b28:	44 0f       	add	r20, r20
 b2a:	55 1f       	adc	r21, r21
 b2c:	59 f0       	breq	.+22     	; 0xb44 <__fp_splitA+0x10>
 b2e:	5f 3f       	cpi	r21, 0xFF	; 255
 b30:	71 f0       	breq	.+28     	; 0xb4e <__fp_splitA+0x1a>
 b32:	47 95       	ror	r20

00000b34 <__fp_splitA>:
 b34:	88 0f       	add	r24, r24
 b36:	97 fb       	bst	r25, 7
 b38:	99 1f       	adc	r25, r25
 b3a:	61 f0       	breq	.+24     	; 0xb54 <__fp_splitA+0x20>
 b3c:	9f 3f       	cpi	r25, 0xFF	; 255
 b3e:	79 f0       	breq	.+30     	; 0xb5e <__fp_splitA+0x2a>
 b40:	87 95       	ror	r24
 b42:	08 95       	ret
 b44:	12 16       	cp	r1, r18
 b46:	13 06       	cpc	r1, r19
 b48:	14 06       	cpc	r1, r20
 b4a:	55 1f       	adc	r21, r21
 b4c:	f2 cf       	rjmp	.-28     	; 0xb32 <__fp_split3+0xe>
 b4e:	46 95       	lsr	r20
 b50:	f1 df       	rcall	.-30     	; 0xb34 <__fp_splitA>
 b52:	08 c0       	rjmp	.+16     	; 0xb64 <__fp_splitA+0x30>
 b54:	16 16       	cp	r1, r22
 b56:	17 06       	cpc	r1, r23
 b58:	18 06       	cpc	r1, r24
 b5a:	99 1f       	adc	r25, r25
 b5c:	f1 cf       	rjmp	.-30     	; 0xb40 <__fp_splitA+0xc>
 b5e:	86 95       	lsr	r24
 b60:	71 05       	cpc	r23, r1
 b62:	61 05       	cpc	r22, r1
 b64:	08 94       	sec
 b66:	08 95       	ret

00000b68 <__fp_zero>:
 b68:	e8 94       	clt

00000b6a <__fp_szero>:
 b6a:	bb 27       	eor	r27, r27
 b6c:	66 27       	eor	r22, r22
 b6e:	77 27       	eor	r23, r23
 b70:	cb 01       	movw	r24, r22
 b72:	97 f9       	bld	r25, 7
 b74:	08 95       	ret

00000b76 <__mulsf3>:
 b76:	0b d0       	rcall	.+22     	; 0xb8e <__mulsf3x>
 b78:	c4 cf       	rjmp	.-120    	; 0xb02 <__fp_round>
 b7a:	b5 df       	rcall	.-150    	; 0xae6 <__fp_pscA>
 b7c:	28 f0       	brcs	.+10     	; 0xb88 <__mulsf3+0x12>
 b7e:	ba df       	rcall	.-140    	; 0xaf4 <__fp_pscB>
 b80:	18 f0       	brcs	.+6      	; 0xb88 <__mulsf3+0x12>
 b82:	95 23       	and	r25, r21
 b84:	09 f0       	breq	.+2      	; 0xb88 <__mulsf3+0x12>
 b86:	a6 cf       	rjmp	.-180    	; 0xad4 <__fp_inf>
 b88:	ab cf       	rjmp	.-170    	; 0xae0 <__fp_nan>
 b8a:	11 24       	eor	r1, r1
 b8c:	ee cf       	rjmp	.-36     	; 0xb6a <__fp_szero>

00000b8e <__mulsf3x>:
 b8e:	ca df       	rcall	.-108    	; 0xb24 <__fp_split3>
 b90:	a0 f3       	brcs	.-24     	; 0xb7a <__mulsf3+0x4>

00000b92 <__mulsf3_pse>:
 b92:	95 9f       	mul	r25, r21
 b94:	d1 f3       	breq	.-12     	; 0xb8a <__mulsf3+0x14>
 b96:	95 0f       	add	r25, r21
 b98:	50 e0       	ldi	r21, 0x00	; 0
 b9a:	55 1f       	adc	r21, r21
 b9c:	62 9f       	mul	r22, r18
 b9e:	f0 01       	movw	r30, r0
 ba0:	72 9f       	mul	r23, r18
 ba2:	bb 27       	eor	r27, r27
 ba4:	f0 0d       	add	r31, r0
 ba6:	b1 1d       	adc	r27, r1
 ba8:	63 9f       	mul	r22, r19
 baa:	aa 27       	eor	r26, r26
 bac:	f0 0d       	add	r31, r0
 bae:	b1 1d       	adc	r27, r1
 bb0:	aa 1f       	adc	r26, r26
 bb2:	64 9f       	mul	r22, r20
 bb4:	66 27       	eor	r22, r22
 bb6:	b0 0d       	add	r27, r0
 bb8:	a1 1d       	adc	r26, r1
 bba:	66 1f       	adc	r22, r22
 bbc:	82 9f       	mul	r24, r18
 bbe:	22 27       	eor	r18, r18
 bc0:	b0 0d       	add	r27, r0
 bc2:	a1 1d       	adc	r26, r1
 bc4:	62 1f       	adc	r22, r18
 bc6:	73 9f       	mul	r23, r19
 bc8:	b0 0d       	add	r27, r0
 bca:	a1 1d       	adc	r26, r1
 bcc:	62 1f       	adc	r22, r18
 bce:	83 9f       	mul	r24, r19
 bd0:	a0 0d       	add	r26, r0
 bd2:	61 1d       	adc	r22, r1
 bd4:	22 1f       	adc	r18, r18
 bd6:	74 9f       	mul	r23, r20
 bd8:	33 27       	eor	r19, r19
 bda:	a0 0d       	add	r26, r0
 bdc:	61 1d       	adc	r22, r1
 bde:	23 1f       	adc	r18, r19
 be0:	84 9f       	mul	r24, r20
 be2:	60 0d       	add	r22, r0
 be4:	21 1d       	adc	r18, r1
 be6:	82 2f       	mov	r24, r18
 be8:	76 2f       	mov	r23, r22
 bea:	6a 2f       	mov	r22, r26
 bec:	11 24       	eor	r1, r1
 bee:	9f 57       	subi	r25, 0x7F	; 127
 bf0:	50 40       	sbci	r21, 0x00	; 0
 bf2:	8a f0       	brmi	.+34     	; 0xc16 <__mulsf3_pse+0x84>
 bf4:	e1 f0       	breq	.+56     	; 0xc2e <__mulsf3_pse+0x9c>
 bf6:	88 23       	and	r24, r24
 bf8:	4a f0       	brmi	.+18     	; 0xc0c <__mulsf3_pse+0x7a>
 bfa:	ee 0f       	add	r30, r30
 bfc:	ff 1f       	adc	r31, r31
 bfe:	bb 1f       	adc	r27, r27
 c00:	66 1f       	adc	r22, r22
 c02:	77 1f       	adc	r23, r23
 c04:	88 1f       	adc	r24, r24
 c06:	91 50       	subi	r25, 0x01	; 1
 c08:	50 40       	sbci	r21, 0x00	; 0
 c0a:	a9 f7       	brne	.-22     	; 0xbf6 <__mulsf3_pse+0x64>
 c0c:	9e 3f       	cpi	r25, 0xFE	; 254
 c0e:	51 05       	cpc	r21, r1
 c10:	70 f0       	brcs	.+28     	; 0xc2e <__mulsf3_pse+0x9c>
 c12:	60 cf       	rjmp	.-320    	; 0xad4 <__fp_inf>
 c14:	aa cf       	rjmp	.-172    	; 0xb6a <__fp_szero>
 c16:	5f 3f       	cpi	r21, 0xFF	; 255
 c18:	ec f3       	brlt	.-6      	; 0xc14 <__mulsf3_pse+0x82>
 c1a:	98 3e       	cpi	r25, 0xE8	; 232
 c1c:	dc f3       	brlt	.-10     	; 0xc14 <__mulsf3_pse+0x82>
 c1e:	86 95       	lsr	r24
 c20:	77 95       	ror	r23
 c22:	67 95       	ror	r22
 c24:	b7 95       	ror	r27
 c26:	f7 95       	ror	r31
 c28:	e7 95       	ror	r30
 c2a:	9f 5f       	subi	r25, 0xFF	; 255
 c2c:	c1 f7       	brne	.-16     	; 0xc1e <__mulsf3_pse+0x8c>
 c2e:	fe 2b       	or	r31, r30
 c30:	88 0f       	add	r24, r24
 c32:	91 1d       	adc	r25, r1
 c34:	96 95       	lsr	r25
 c36:	87 95       	ror	r24
 c38:	97 f9       	bld	r25, 7
 c3a:	08 95       	ret

00000c3c <_exit>:
 c3c:	f8 94       	cli

00000c3e <__stop_program>:
 c3e:	ff cf       	rjmp	.-2      	; 0xc3e <__stop_program>
