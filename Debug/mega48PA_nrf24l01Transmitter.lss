
mega48PA_nrf24l01Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000c84  00000d18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  00800128  00800128  00000d40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001900  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000624  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000871  00000000  00000000  00002e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e4  00000000  00000000  000036b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049e  00000000  00000000  00003a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac1  00000000  00000000  00003f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000049fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	4e c0       	rjmp	.+156    	; 0xa0 <__vector_1>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	b5 c0       	rjmp	.+362    	; 0x178 <__vector_6>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	99 c0       	rjmp	.+306    	; 0x164 <__vector_24>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 e8       	ldi	r30, 0x84	; 132
  48:	fc e0       	ldi	r31, 0x0C	; 12
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a8 32       	cpi	r26, 0x28	; 40
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a8 e2       	ldi	r26, 0x28	; 40
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a2 38       	cpi	r26, 0x82	; 130
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	6d d1       	rcall	.+730    	; 0x342 <main>
  68:	0b c6       	rjmp	.+3094   	; 0xc80 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <InitInterrupts>:

void InitInterrupts(void){
	// INT0: On
	// INT1: Off
	//PORTD &=~(1<<INT0);
	EIMSK |= 0x01;
  6c:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0x02;
  6e:	e9 e6       	ldi	r30, 0x69	; 105
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	80 81       	ld	r24, Z
  74:	82 60       	ori	r24, 0x02	; 2
  76:	80 83       	st	Z, r24
	EIFR |= 0x01;
  78:	e0 9a       	sbi	0x1c, 0	; 28
  7a:	08 95       	ret

0000007c <DisableInterrupts>:
}

void DisableInterrupts(void){
	PORTD |= (1<<INT0);
  7c:	58 9a       	sbi	0x0b, 0	; 11
	PIND &= ~(1<<INT0);
  7e:	48 98       	cbi	0x09, 0	; 9
	EIMSK |= 0x00;
  80:	8d b3       	in	r24, 0x1d	; 29
  82:	8d bb       	out	0x1d, r24	; 29
	EICRA |= 0x00;
  84:	e9 e6       	ldi	r30, 0x69	; 105
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	80 83       	st	Z, r24
	EIFR |= 0x00;
  8c:	8c b3       	in	r24, 0x1c	; 28
  8e:	8c bb       	out	0x1c, r24	; 28
	//POWER_port &= ~(1<<POWER_pin);
	PORTC = 0x00;
  90:	18 b8       	out	0x08, r1	; 8
	//PORTC |= ~(1<<POWER_pin);
	PINC = 0x00;
  92:	16 b8       	out	0x06, r1	; 6
	PORTD = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8b b9       	out	0x0b, r24	; 11
	PIND = 0x00;
  98:	19 b8       	out	0x09, r1	; 9
	PORTB = 0xFF;
  9a:	85 b9       	out	0x05, r24	; 5
	PINB = 0x00;
  9c:	13 b8       	out	0x03, r1	; 3
  9e:	08 95       	ret

000000a0 <__vector_1>:
}


ISR(INT0_vect){
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	3f 93       	push	r19
  ae:	4f 93       	push	r20
  b0:	5f 93       	push	r21
  b2:	6f 93       	push	r22
  b4:	7f 93       	push	r23
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	af 93       	push	r26
  bc:	bf 93       	push	r27
  be:	cf 93       	push	r28
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	cli();
  c4:	f8 94       	cli
	uint8_t status = 0;

	status = nRFGetStatus();
  c6:	7d d1       	rcall	.+762    	; 0x3c2 <nRFGetStatus>
  c8:	c8 2f       	mov	r28, r24
	//sprintf(TextBuffer,"Int. STATUS: 0x%02X \r\n",status);
	//TransmitStringToUART(TextBuffer);
	//_delay_ms(5);
	if (status & (1<<TX_DS)){ // 0x2e
  ca:	85 ff       	sbrs	r24, 5
  cc:	30 c0       	rjmp	.+96     	; 0x12e <__vector_1+0x8e>
			// Data is transmitted
			NrfFlushTXfifo();
  ce:	33 d3       	rcall	.+1638   	; 0x736 <NrfFlushTXfifo>
			reset_interrupts();
  d0:	27 d3       	rcall	.+1614   	; 0x720 <reset_interrupts>
			NrfPowerDown();
  d2:	74 d3       	rcall	.+1768   	; 0x7bc <NrfPowerDown>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	89 ef       	ldi	r24, 0xF9	; 249
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <__vector_1+0x38>
  dc:	00 c0       	rjmp	.+0      	; 0xde <__vector_1+0x3e>
  de:	00 00       	nop
			_delay_ms(1);
			DisableInterrupts();
  e0:	cd df       	rcall	.-102    	; 0x7c <DisableInterrupts>
			//CE_lo;
			//CSN_lo;
			power_spi_disable();
  e2:	e4 e6       	ldi	r30, 0x64	; 100
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	80 83       	st	Z, r24
			//power_timer0_disable();
			//power_timer1_disable();
			power_twi_disable();
  ec:	80 81       	ld	r24, Z
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	80 83       	st	Z, r24
			wdt_reset();
  f2:	a8 95       	wdr
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
  f4:	99 e2       	ldi	r25, 0x29	; 41
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	a8 95       	wdr
  fe:	80 93 60 00 	sts	0x0060, r24
 102:	0f be       	out	0x3f, r0	; 63
 104:	90 93 60 00 	sts	0x0060, r25
			wdt_enable(WDTO_8S);
			WDTCSR |= (1<<WDIE);
 108:	e0 e6       	ldi	r30, 0x60	; 96
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
			sei();
 112:	78 94       	sei
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 114:	83 b7       	in	r24, 0x33	; 51
 116:	81 7f       	andi	r24, 0xF1	; 241
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	83 bf       	out	0x33, r24	; 51
			sleep_enable();
 11c:	83 b7       	in	r24, 0x33	; 51
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	83 bf       	out	0x33, r24	; 51
			sleep_bod_disable();
 122:	85 b7       	in	r24, 0x35	; 53
 124:	80 66       	ori	r24, 0x60	; 96
 126:	85 bf       	out	0x35, r24	; 53
 128:	8f 7d       	andi	r24, 0xDF	; 223
 12a:	85 bf       	out	0x35, r24	; 53
			sleep_cpu();
 12c:	88 95       	sleep
	}		
	
	if (status & (1<<MAX_RT)){ // 0x1e
 12e:	c4 ff       	sbrs	r28, 4
 130:	07 c0       	rjmp	.+14     	; 0x140 <__vector_1+0xa0>
			sei();
 132:	78 94       	sei
			// RF choose frequency (channel) - 3 (?? GHz)
			WriteReg(RF_CH, 76);
 134:	6c e4       	ldi	r22, 0x4C	; 76
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	91 d1       	rcall	.+802    	; 0x45c <WriteReg>
			reuse_payload();
 13a:	3b d3       	rcall	.+1654   	; 0x7b2 <reuse_payload>
			reset_interrupts();
 13c:	f1 d2       	rcall	.+1506   	; 0x720 <reset_interrupts>
			send_payload();
 13e:	f5 d2       	rcall	.+1514   	; 0x72a <send_payload>
	}
}
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	cf 91       	pop	r28
 146:	bf 91       	pop	r27
 148:	af 91       	pop	r26
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	7f 91       	pop	r23
 150:	6f 91       	pop	r22
 152:	5f 91       	pop	r21
 154:	4f 91       	pop	r20
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_24>:

ISR(TWI_vect){}
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_6>:
	
ISR(WDT_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	4f 92       	push	r4
 184:	5f 92       	push	r5
 186:	6f 92       	push	r6
 188:	7f 92       	push	r7
 18a:	bf 92       	push	r11
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	
	if (wtd_counter >= 4){
 1b4:	80 91 28 01 	lds	r24, 0x0128
 1b8:	84 30       	cpi	r24, 0x04	; 4
 1ba:	08 f4       	brcc	.+2      	; 0x1be <__vector_6+0x46>
 1bc:	83 c0       	rjmp	.+262    	; 0x2c4 <__vector_6+0x14c>
		power_twi_enable();
 1be:	04 e6       	ldi	r16, 0x64	; 100
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	f8 01       	movw	r30, r16
 1c4:	80 81       	ld	r24, Z
 1c6:	8f 77       	andi	r24, 0x7F	; 127
 1c8:	80 83       	st	Z, r24
		twi_init();
 1ca:	19 d3       	rcall	.+1586   	; 0x7fe <twi_init>
		TT = twi_sht21_get(1); // temperature
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	35 d3       	rcall	.+1642   	; 0x83a <twi_sht21_get>
 1d0:	60 93 7e 01 	sts	0x017E, r22
 1d4:	70 93 7f 01 	sts	0x017F, r23
 1d8:	80 93 80 01 	sts	0x0180, r24
 1dc:	90 93 81 01 	sts	0x0181, r25
		HH = twi_sht21_get(2); // humidity
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	2b d3       	rcall	.+1622   	; 0x83a <twi_sht21_get>
 1e4:	6b 01       	movw	r12, r22
 1e6:	7c 01       	movw	r14, r24
 1e8:	60 93 75 01 	sts	0x0175, r22
 1ec:	70 93 76 01 	sts	0x0176, r23
 1f0:	80 93 77 01 	sts	0x0177, r24
 1f4:	90 93 78 01 	sts	0x0178, r25

		buff[0]=0;
 1f8:	c5 e6       	ldi	r28, 0x65	; 101
 1fa:	d1 e0       	ldi	r29, 0x01	; 1
 1fc:	18 82       	st	Y, r1
		buff[1]=25;
 1fe:	89 e1       	ldi	r24, 0x19	; 25
 200:	89 83       	std	Y+1, r24	; 0x01
		buff[3]=1;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	8b 83       	std	Y+3, r24	; 0x03
		buff[4]=(uint8_t)(TT);
 206:	40 90 7e 01 	lds	r4, 0x017E
 20a:	50 90 7f 01 	lds	r5, 0x017F
 20e:	60 90 80 01 	lds	r6, 0x0180
 212:	70 90 81 01 	lds	r7, 0x0181
 216:	c3 01       	movw	r24, r6
 218:	b2 01       	movw	r22, r4
 21a:	15 d4       	rcall	.+2090   	; 0xa46 <__fixunssfsi>
 21c:	6c 83       	std	Y+4, r22	; 0x04
		buff[5]=(uint8_t)((int8_t)(TT*10)-((int8_t)(TT))*10);
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	40 e2       	ldi	r20, 0x20	; 32
 224:	51 e4       	ldi	r21, 0x41	; 65
 226:	c3 01       	movw	r24, r6
 228:	b2 01       	movw	r22, r4
 22a:	c7 d4       	rcall	.+2446   	; 0xbba <__mulsf3>
 22c:	07 d4       	rcall	.+2062   	; 0xa3c <__fixsfsi>
 22e:	b6 2e       	mov	r11, r22
 230:	c3 01       	movw	r24, r6
 232:	b2 01       	movw	r22, r4
 234:	03 d4       	rcall	.+2054   	; 0xa3c <__fixsfsi>
 236:	86 2f       	mov	r24, r22
 238:	88 0f       	add	r24, r24
 23a:	68 2f       	mov	r22, r24
 23c:	66 0f       	add	r22, r22
 23e:	66 0f       	add	r22, r22
 240:	86 0f       	add	r24, r22
 242:	b8 1a       	sub	r11, r24
 244:	bd 82       	std	Y+5, r11	; 0x05
		buff[6]=2;
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	8e 83       	std	Y+6, r24	; 0x06
		buff[7]=(uint8_t)(HH);
 24a:	c7 01       	movw	r24, r14
 24c:	b6 01       	movw	r22, r12
 24e:	fb d3       	rcall	.+2038   	; 0xa46 <__fixunssfsi>
 250:	6f 83       	std	Y+7, r22	; 0x07
		buff[8]=(uint8_t)((int8_t)(HH*10)-((int8_t)(HH))*10);
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	40 e2       	ldi	r20, 0x20	; 32
 258:	51 e4       	ldi	r21, 0x41	; 65
 25a:	c7 01       	movw	r24, r14
 25c:	b6 01       	movw	r22, r12
 25e:	ad d4       	rcall	.+2394   	; 0xbba <__mulsf3>
 260:	ed d3       	rcall	.+2010   	; 0xa3c <__fixsfsi>
 262:	b6 2e       	mov	r11, r22
 264:	c7 01       	movw	r24, r14
 266:	b6 01       	movw	r22, r12
 268:	e9 d3       	rcall	.+2002   	; 0xa3c <__fixsfsi>
 26a:	86 2f       	mov	r24, r22
 26c:	88 0f       	add	r24, r24
 26e:	68 2f       	mov	r22, r24
 270:	66 0f       	add	r22, r22
 272:	66 0f       	add	r22, r22
 274:	86 0f       	add	r24, r22
 276:	b8 1a       	sub	r11, r24
 278:	b8 86       	std	Y+8, r11	; 0x08
		twi_disable();
 27a:	ba d2       	rcall	.+1396   	; 0x7f0 <twi_disable>
		power_twi_disable();
 27c:	f8 01       	movw	r30, r16
 27e:	80 81       	ld	r24, Z
 280:	80 68       	ori	r24, 0x80	; 128
 282:	80 83       	st	Z, r24
		
		power_spi_enable();
 284:	80 81       	ld	r24, Z
 286:	8b 7f       	andi	r24, 0xFB	; 251
 288:	80 83       	st	Z, r24
		InitInterrupts();
 28a:	f0 de       	rcall	.-544    	; 0x6c <InitInterrupts>
 28c:	81 ee       	ldi	r24, 0xE1	; 225
 28e:	94 e0       	ldi	r25, 0x04	; 4
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <__vector_6+0x118>
 294:	00 c0       	rjmp	.+0      	; 0x296 <__vector_6+0x11e>
 296:	00 00       	nop
		_delay_ms(5);
		NrfPortInit();
 298:	84 d0       	rcall	.+264    	; 0x3a2 <NrfPortInit>
 29a:	e1 ee       	ldi	r30, 0xE1	; 225
 29c:	f4 e0       	ldi	r31, 0x04	; 4
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <__vector_6+0x126>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <__vector_6+0x12c>
 2a4:	00 00       	nop
		_delay_ms(5);
		
		if(NrfConfig() == 1){
 2a6:	76 d1       	rcall	.+748    	; 0x594 <NrfConfig>
 2a8:	81 ee       	ldi	r24, 0xE1	; 225
 2aa:	94 e0       	ldi	r25, 0x04	; 4
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <__vector_6+0x134>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <__vector_6+0x13a>
 2b2:	00 00       	nop
			}else{
			//TransmitStringToUART("Error in nRF24 configuration... \r\n");
		}
		
		_delay_ms(5);
		transmit_payload(addrtx1, &buff[0], PAYLOAD_LENGTH);
 2b4:	40 e1       	ldi	r20, 0x10	; 16
 2b6:	be 01       	movw	r22, r28
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	5c d2       	rcall	.+1208   	; 0x776 <transmit_payload>
		wtd_counter=0;
 2be:	10 92 28 01 	sts	0x0128, r1
 2c2:	21 c0       	rjmp	.+66     	; 0x306 <__stack+0x7>
	}else{
		wtd_counter++;
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	80 93 28 01 	sts	0x0128, r24
		wdt_reset();
 2ca:	a8 95       	wdr
 2cc:	99 e2       	ldi	r25, 0x29	; 41
 2ce:	88 e1       	ldi	r24, 0x18	; 24
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	a8 95       	wdr
 2d6:	80 93 60 00 	sts	0x0060, r24
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	90 93 60 00 	sts	0x0060, r25
		wdt_enable(WDTO_8S);
		WDTCSR |= (1<<WDIE);
 2e0:	e0 e6       	ldi	r30, 0x60	; 96
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	80 64       	ori	r24, 0x40	; 64
 2e8:	80 83       	st	Z, r24
		sei();
 2ea:	78 94       	sei
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 2ec:	83 b7       	in	r24, 0x33	; 51
 2ee:	81 7f       	andi	r24, 0xF1	; 241
 2f0:	84 60       	ori	r24, 0x04	; 4
 2f2:	83 bf       	out	0x33, r24	; 51
		sleep_enable();
 2f4:	83 b7       	in	r24, 0x33	; 51
 2f6:	81 60       	ori	r24, 0x01	; 1
 2f8:	83 bf       	out	0x33, r24	; 51
		sleep_bod_disable();
 2fa:	85 b7       	in	r24, 0x35	; 53
 2fc:	80 66       	ori	r24, 0x60	; 96
 2fe:	85 bf       	out	0x35, r24	; 53
 300:	8f 7d       	andi	r24, 0xDF	; 223
 302:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();
 304:	88 95       	sleep
	}
}
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	bf 91       	pop	r27
 310:	af 91       	pop	r26
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	7f 91       	pop	r23
 318:	6f 91       	pop	r22
 31a:	5f 91       	pop	r21
 31c:	4f 91       	pop	r20
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	df 90       	pop	r13
 32c:	cf 90       	pop	r12
 32e:	bf 90       	pop	r11
 330:	7f 90       	pop	r7
 332:	6f 90       	pop	r6
 334:	5f 90       	pop	r5
 336:	4f 90       	pop	r4
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <main>:
 342:	83 ed       	ldi	r24, 0xD3	; 211
 344:	90 e3       	ldi	r25, 0x30	; 48
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <main+0x4>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0xa>
 34c:	00 00       	nop
	
int main(void){
	_delay_ms(50);
	power_spi_enable();
 34e:	e4 e6       	ldi	r30, 0x64	; 100
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	8b 7f       	andi	r24, 0xFB	; 251
 356:	80 83       	st	Z, r24
	power_timer0_disable();
 358:	80 81       	ld	r24, Z
 35a:	80 62       	ori	r24, 0x20	; 32
 35c:	80 83       	st	Z, r24
	power_timer1_disable();
 35e:	80 81       	ld	r24, Z
 360:	88 60       	ori	r24, 0x08	; 8
 362:	80 83       	st	Z, r24
	}else{
		//TransmitStringToUART("Error in nRF24 configuration... \r\n");
	}
	*/
	
	wdt_reset();
 364:	a8 95       	wdr
 366:	99 e2       	ldi	r25, 0x29	; 41
 368:	88 e1       	ldi	r24, 0x18	; 24
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	a8 95       	wdr
 370:	80 93 60 00 	sts	0x0060, r24
 374:	0f be       	out	0x3f, r0	; 63
 376:	90 93 60 00 	sts	0x0060, r25
	wdt_enable(WDTO_8S);
	WDTCSR |= (1<<WDIE);
 37a:	e0 e6       	ldi	r30, 0x60	; 96
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	80 64       	ori	r24, 0x40	; 64
 382:	80 83       	st	Z, r24
	sei();
 384:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 386:	83 b7       	in	r24, 0x33	; 51
 388:	81 7f       	andi	r24, 0xF1	; 241
 38a:	84 60       	ori	r24, 0x04	; 4
 38c:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
 38e:	83 b7       	in	r24, 0x33	; 51
 390:	81 60       	ori	r24, 0x01	; 1
 392:	83 bf       	out	0x33, r24	; 51
	sleep_bod_disable();
 394:	85 b7       	in	r24, 0x35	; 53
 396:	80 66       	ori	r24, 0x60	; 96
 398:	85 bf       	out	0x35, r24	; 53
 39a:	8f 7d       	andi	r24, 0xDF	; 223
 39c:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
 39e:	88 95       	sleep
		//}else if(p==3){
			//transmit_payload(addrtx3, &buff[0], PAYLOAD_LENGTH);
			//p=0;
		//}
		//_delay_ms(5000);
    }
 3a0:	ff cf       	rjmp	.-2      	; 0x3a0 <main+0x5e>

000003a2 <NrfPortInit>:
static uint8_t addr4[5] = ADDRP4;
static uint8_t addr5[5] = ADDRP5;
static uint8_t addrtx[5] = ADDRTX;

void NrfPortInit(void){
	SPIInit();
 3a2:	13 d2       	rcall	.+1062   	; 0x7ca <SPIInit>
	IRQ_ddr &= ~(1<<IRQ_pin);
 3a4:	52 98       	cbi	0x0a, 2	; 10
	
	POWER_ddr |= (1<<POWER_pin);
 3a6:	3a 9a       	sbi	0x07, 2	; 7
	POWER_port |= (1<<POWER_pin);
 3a8:	42 9a       	sbi	0x08, 2	; 8
	
	CE_lo;
 3aa:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ac:	82 e3       	ldi	r24, 0x32	; 50
 3ae:	8a 95       	dec	r24
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <NrfPortInit+0xc>
	_delay_us(150);
	CSN_hi;
 3b2:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b4:	83 ed       	ldi	r24, 0xD3	; 211
 3b6:	90 e3       	ldi	r25, 0x30	; 48
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <NrfPortInit+0x16>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <NrfPortInit+0x1c>
 3be:	00 00       	nop
 3c0:	08 95       	ret

000003c2 <nRFGetStatus>:
	_delay_ms(50);
}

uint8_t nRFGetStatus(void){
	uint8_t status=0;
	CSN_lo;
 3c2:	29 98       	cbi	0x05, 1	; 5
	status=SPIWriteRead(NOP);
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	0e d2       	rcall	.+1052   	; 0x7e4 <SPIWriteRead>
	CSN_hi;
 3c8:	29 9a       	sbi	0x05, 1	; 5
	return status;
}
 3ca:	08 95       	ret

000003cc <ReadFromNrf>:

//read data
uint8_t ReadFromNrf(uint8_t reg){
    CSN_lo;
 3cc:	29 98       	cbi	0x05, 1	; 5
	reg=SPIWriteRead(reg);
 3ce:	0a d2       	rcall	.+1044   	; 0x7e4 <SPIWriteRead>
	reg=SPIWriteRead(NOP);
 3d0:	8f ef       	ldi	r24, 0xFF	; 255
 3d2:	08 d2       	rcall	.+1040   	; 0x7e4 <SPIWriteRead>
	CSN_hi;
 3d4:	29 9a       	sbi	0x05, 1	; 5
    return reg;
}
 3d6:	08 95       	ret

000003d8 <WriteToNrf>:

void WriteToNrf(uint8_t ReadWrite,uint8_t reg, uint8_t *val, uint8_t antVal){
 3d8:	af 92       	push	r10
 3da:	bf 92       	push	r11
 3dc:	cf 92       	push	r12
 3de:	df 92       	push	r13
 3e0:	ef 92       	push	r14
 3e2:	ff 92       	push	r15
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	b8 2e       	mov	r11, r24
 3ee:	a6 2e       	mov	r10, r22
 3f0:	8a 01       	movw	r16, r20
 3f2:	e2 2e       	mov	r14, r18
    int i;
    if(ReadWrite == W){
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	b8 12       	cpse	r11, r24
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <WriteToNrf+0x2a>
        reg = (W_REGISTER | (REGISTER_MASK & reg));
 3fa:	86 2f       	mov	r24, r22
 3fc:	8f 71       	andi	r24, 0x1F	; 31
 3fe:	80 62       	ori	r24, 0x20	; 32
 400:	a8 2e       	mov	r10, r24
    }
    CSN_lo;
 402:	29 98       	cbi	0x05, 1	; 5
	SPIWriteRead(reg);
 404:	8a 2d       	mov	r24, r10
 406:	ee d1       	rcall	.+988    	; 0x7e4 <SPIWriteRead>
    for(i=0;i<antVal;i++){
 408:	f1 2c       	mov	r15, r1
 40a:	1e 14       	cp	r1, r14
 40c:	1f 04       	cpc	r1, r15
 40e:	b4 f4       	brge	.+44     	; 0x43c <WriteToNrf+0x64>
 410:	c0 e0       	ldi	r28, 0x00	; 0
 412:	d0 e0       	ldi	r29, 0x00	; 0
        if(ReadWrite == R && reg != W_TX_PAYLOAD){
 414:	b1 10       	cpse	r11, r1
 416:	06 c0       	rjmp	.+12     	; 0x424 <WriteToNrf+0x4c>
 418:	e0 ea       	ldi	r30, 0xA0	; 160
 41a:	ae 16       	cp	r10, r30
 41c:	19 f0       	breq	.+6      	; 0x424 <WriteToNrf+0x4c>
            SPIWriteRead(NOP);
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	e1 d1       	rcall	.+962    	; 0x7e4 <SPIWriteRead>
 422:	08 c0       	rjmp	.+16     	; 0x434 <WriteToNrf+0x5c>
        }else{
            SPIWriteRead(*(val++));
 424:	68 01       	movw	r12, r16
 426:	ff ef       	ldi	r31, 0xFF	; 255
 428:	cf 1a       	sub	r12, r31
 42a:	df 0a       	sbc	r13, r31
 42c:	f8 01       	movw	r30, r16
 42e:	80 81       	ld	r24, Z
 430:	d9 d1       	rcall	.+946    	; 0x7e4 <SPIWriteRead>
 432:	86 01       	movw	r16, r12
    if(ReadWrite == W){
        reg = (W_REGISTER | (REGISTER_MASK & reg));
    }
    CSN_lo;
	SPIWriteRead(reg);
    for(i=0;i<antVal;i++){
 434:	21 96       	adiw	r28, 0x01	; 1
 436:	ce 15       	cp	r28, r14
 438:	df 05       	cpc	r29, r15
 43a:	61 f7       	brne	.-40     	; 0x414 <WriteToNrf+0x3c>
			//sprintf(TextBuffer, "val addr: %i, value: %u \r\n", val, *val);
			//TransmitStringToUART(TextBuffer);
			//val++;
        }
    }
	CSN_hi;
 43c:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43e:	f3 e0       	ldi	r31, 0x03	; 3
 440:	fa 95       	dec	r31
 442:	f1 f7       	brne	.-4      	; 0x440 <WriteToNrf+0x68>
 444:	00 00       	nop
	//ClearBit(LED1_port,LED1_pin);
	_delay_us(10);
    //return val;
}
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	ff 90       	pop	r15
 450:	ef 90       	pop	r14
 452:	df 90       	pop	r13
 454:	cf 90       	pop	r12
 456:	bf 90       	pop	r11
 458:	af 90       	pop	r10
 45a:	08 95       	ret

0000045c <WriteReg>:

void WriteReg(uint8_t reg, uint8_t val){
 45c:	cf 93       	push	r28
 45e:	c6 2f       	mov	r28, r22
	CSN_lo;
 460:	29 98       	cbi	0x05, 1	; 5
	reg=SPIWriteRead(W_REGISTER | (REGISTER_MASK & reg));
 462:	8f 71       	andi	r24, 0x1F	; 31
 464:	80 62       	ori	r24, 0x20	; 32
 466:	be d1       	rcall	.+892    	; 0x7e4 <SPIWriteRead>
	SPIWriteRead(val);
 468:	8c 2f       	mov	r24, r28
 46a:	bc d1       	rcall	.+888    	; 0x7e4 <SPIWriteRead>
	CSN_hi;
 46c:	29 9a       	sbi	0x05, 1	; 5
}	
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	ec 01       	movw	r28, r24
 478:	20 e0       	ldi	r18, 0x00	; 0
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	44 e0       	ldi	r20, 0x04	; 4
 47e:	50 e0       	ldi	r21, 0x00	; 0
 480:	db 01       	movw	r26, r22
 482:	a2 0f       	add	r26, r18
 484:	b3 1f       	adc	r27, r19
 486:	fa 01       	movw	r30, r20
 488:	e2 1b       	sub	r30, r18
 48a:	f3 0b       	sbc	r31, r19
 48c:	ec 0f       	add	r30, r28
 48e:	fd 1f       	adc	r31, r29
	//reverse address
	uint8_t i = 0;
	for(i=0; i<5; i++)
		memcpy(&addrrev[i], &addr[5-1-i], 1);
 490:	90 81       	ld	r25, Z
 492:	9c 93       	st	X, r25
 494:	2f 5f       	subi	r18, 0xFF	; 255
 496:	3f 4f       	sbci	r19, 0xFF	; 255
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<5; i++)
 498:	25 30       	cpi	r18, 0x05	; 5
 49a:	31 05       	cpc	r19, r1
 49c:	89 f7       	brne	.-30     	; 0x480 <nrf24l01_revaddress+0xe>
		memcpy(&addrrev[i], &addr[5-1-i], 1);
}
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <NrfSetRXAddr>:
	
}

//************************************************************/
// RX RF_Adress setup 5 byte - Set Receiver Address
void NrfSetRXAddr(uint8_t channel, uint8_t *addr){
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	00 d0       	rcall	.+0      	; 0x4aa <NrfSetRXAddr+0x6>
 4aa:	00 d0       	rcall	.+0      	; 0x4ac <NrfSetRXAddr+0x8>
 4ac:	1f 92       	push	r1
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	9b 01       	movw	r18, r22
	if(channel == 0){
 4b4:	81 11       	cpse	r24, r1
 4b6:	15 c0       	rjmp	.+42     	; 0x4e2 <NrfSetRXAddr+0x3e>
			memcpy(&addr0, addr, 5);
 4b8:	85 e0       	ldi	r24, 0x05	; 5
 4ba:	fb 01       	movw	r30, r22
 4bc:	a3 e2       	ldi	r26, 0x23	; 35
 4be:	b1 e0       	ldi	r27, 0x01	; 1
 4c0:	01 90       	ld	r0, Z+
 4c2:	0d 92       	st	X+, r0
 4c4:	8a 95       	dec	r24
 4c6:	e1 f7       	brne	.-8      	; 0x4c0 <NrfSetRXAddr+0x1c>
			uint8_t revaddr[5];
			nrf24l01_revaddress(addr, (uint8_t *)revaddr);
 4c8:	be 01       	movw	r22, r28
 4ca:	6f 5f       	subi	r22, 0xFF	; 255
 4cc:	7f 4f       	sbci	r23, 0xFF	; 255
 4ce:	c9 01       	movw	r24, r18
 4d0:	d0 df       	rcall	.-96     	; 0x472 <nrf24l01_revaddress>
			WriteToNrf(W, RX_ADDR_P0, revaddr, 5);
 4d2:	25 e0       	ldi	r18, 0x05	; 5
 4d4:	ae 01       	movw	r20, r28
 4d6:	4f 5f       	subi	r20, 0xFF	; 255
 4d8:	5f 4f       	sbci	r21, 0xFF	; 255
 4da:	6a e0       	ldi	r22, 0x0A	; 10
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	7c df       	rcall	.-264    	; 0x3d8 <WriteToNrf>
 4e0:	51 c0       	rjmp	.+162    	; 0x584 <NrfSetRXAddr+0xe0>
	}else if(channel == 1){	
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	a9 f4       	brne	.+42     	; 0x510 <NrfSetRXAddr+0x6c>
			memcpy(&addr1, addr, 5);
 4e6:	85 e0       	ldi	r24, 0x05	; 5
 4e8:	fb 01       	movw	r30, r22
 4ea:	ae e1       	ldi	r26, 0x1E	; 30
 4ec:	b1 e0       	ldi	r27, 0x01	; 1
 4ee:	01 90       	ld	r0, Z+
 4f0:	0d 92       	st	X+, r0
 4f2:	8a 95       	dec	r24
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <NrfSetRXAddr+0x4a>
			uint8_t revaddr[5];
			nrf24l01_revaddress(addr, (uint8_t *)revaddr);
 4f6:	be 01       	movw	r22, r28
 4f8:	6f 5f       	subi	r22, 0xFF	; 255
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	c9 01       	movw	r24, r18
 4fe:	b9 df       	rcall	.-142    	; 0x472 <nrf24l01_revaddress>
			WriteToNrf(W, RX_ADDR_P1, revaddr, 5);
 500:	25 e0       	ldi	r18, 0x05	; 5
 502:	ae 01       	movw	r20, r28
 504:	4f 5f       	subi	r20, 0xFF	; 255
 506:	5f 4f       	sbci	r21, 0xFF	; 255
 508:	6b e0       	ldi	r22, 0x0B	; 11
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	65 df       	rcall	.-310    	; 0x3d8 <WriteToNrf>
 50e:	3a c0       	rjmp	.+116    	; 0x584 <NrfSetRXAddr+0xe0>
	}else if(channel == 2){
 510:	82 30       	cpi	r24, 0x02	; 2
 512:	69 f4       	brne	.+26     	; 0x52e <NrfSetRXAddr+0x8a>
			memcpy(&addr2, addr, 5);
 514:	85 e0       	ldi	r24, 0x05	; 5
 516:	fb 01       	movw	r30, r22
 518:	a9 e1       	ldi	r26, 0x19	; 25
 51a:	b1 e0       	ldi	r27, 0x01	; 1
 51c:	01 90       	ld	r0, Z+
 51e:	0d 92       	st	X+, r0
 520:	8a 95       	dec	r24
 522:	e1 f7       	brne	.-8      	; 0x51c <NrfSetRXAddr+0x78>
			WriteReg(RX_ADDR_P2, addr[4]);
 524:	fb 01       	movw	r30, r22
 526:	64 81       	ldd	r22, Z+4	; 0x04
 528:	8c e0       	ldi	r24, 0x0C	; 12
 52a:	98 df       	rcall	.-208    	; 0x45c <WriteReg>
 52c:	2b c0       	rjmp	.+86     	; 0x584 <NrfSetRXAddr+0xe0>
	}else if(channel == 3){
 52e:	83 30       	cpi	r24, 0x03	; 3
 530:	69 f4       	brne	.+26     	; 0x54c <NrfSetRXAddr+0xa8>
			memcpy(&addr3, addr, 5);
 532:	85 e0       	ldi	r24, 0x05	; 5
 534:	fb 01       	movw	r30, r22
 536:	a4 e1       	ldi	r26, 0x14	; 20
 538:	b1 e0       	ldi	r27, 0x01	; 1
 53a:	01 90       	ld	r0, Z+
 53c:	0d 92       	st	X+, r0
 53e:	8a 95       	dec	r24
 540:	e1 f7       	brne	.-8      	; 0x53a <NrfSetRXAddr+0x96>
			WriteReg(RX_ADDR_P3, addr[4]);
 542:	fb 01       	movw	r30, r22
 544:	64 81       	ldd	r22, Z+4	; 0x04
 546:	8d e0       	ldi	r24, 0x0D	; 13
 548:	89 df       	rcall	.-238    	; 0x45c <WriteReg>
 54a:	1c c0       	rjmp	.+56     	; 0x584 <NrfSetRXAddr+0xe0>
	}else if(channel == 4){
 54c:	84 30       	cpi	r24, 0x04	; 4
 54e:	69 f4       	brne	.+26     	; 0x56a <NrfSetRXAddr+0xc6>
			memcpy(&addr4, addr, 5);
 550:	85 e0       	ldi	r24, 0x05	; 5
 552:	fb 01       	movw	r30, r22
 554:	af e0       	ldi	r26, 0x0F	; 15
 556:	b1 e0       	ldi	r27, 0x01	; 1
 558:	01 90       	ld	r0, Z+
 55a:	0d 92       	st	X+, r0
 55c:	8a 95       	dec	r24
 55e:	e1 f7       	brne	.-8      	; 0x558 <NrfSetRXAddr+0xb4>
			WriteReg(RX_ADDR_P4, addr[4]);
 560:	fb 01       	movw	r30, r22
 562:	64 81       	ldd	r22, Z+4	; 0x04
 564:	8e e0       	ldi	r24, 0x0E	; 14
 566:	7a df       	rcall	.-268    	; 0x45c <WriteReg>
 568:	0d c0       	rjmp	.+26     	; 0x584 <NrfSetRXAddr+0xe0>
	}else if(channel == 5){
 56a:	85 30       	cpi	r24, 0x05	; 5
 56c:	59 f4       	brne	.+22     	; 0x584 <NrfSetRXAddr+0xe0>
			memcpy(&addr5, addr, 5);
 56e:	fb 01       	movw	r30, r22
 570:	aa e0       	ldi	r26, 0x0A	; 10
 572:	b1 e0       	ldi	r27, 0x01	; 1
 574:	01 90       	ld	r0, Z+
 576:	0d 92       	st	X+, r0
 578:	8a 95       	dec	r24
 57a:	e1 f7       	brne	.-8      	; 0x574 <NrfSetRXAddr+0xd0>
			WriteReg(RX_ADDR_P5, addr[4]);
 57c:	fb 01       	movw	r30, r22
 57e:	64 81       	ldd	r22, Z+4	; 0x04
 580:	8f e0       	ldi	r24, 0x0F	; 15
 582:	6c df       	rcall	.-296    	; 0x45c <WriteReg>
	}
}
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	0f 90       	pop	r0
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <NrfConfig>:
// Init nFR24L01+

uint8_t NrfConfig(void){
	//setup port
	
	CSN_hi;
 594:	29 9a       	sbi	0x05, 1	; 5
	CE_lo;
 596:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 598:	81 ee       	ldi	r24, 0xE1	; 225
 59a:	94 e0       	ldi	r25, 0x04	; 4
 59c:	01 97       	sbiw	r24, 0x01	; 1
 59e:	f1 f7       	brne	.-4      	; 0x59c <NrfConfig+0x8>
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <NrfConfig+0xe>
 5a2:	00 00       	nop
	_delay_ms(5);
	
	// RF power mode and data speed - 1 Mbps, 0 dB
    WriteReg(RF_SETUP,  ReadFromNrf(RF_SETUP) | (3<<RF_PWR));
 5a4:	86 e0       	ldi	r24, 0x06	; 6
 5a6:	12 df       	rcall	.-476    	; 0x3cc <ReadFromNrf>
 5a8:	68 2f       	mov	r22, r24
 5aa:	63 60       	ori	r22, 0x03	; 3
 5ac:	86 e0       	ldi	r24, 0x06	; 6
 5ae:	56 df       	rcall	.-340    	; 0x45c <WriteReg>
	WriteReg(RF_SETUP, ReadFromNrf(RF_SETUP) & ~((1<<RF_DR_HIGH) | (1<<RF_DR_LOW)));
 5b0:	86 e0       	ldi	r24, 0x06	; 6
 5b2:	0c df       	rcall	.-488    	; 0x3cc <ReadFromNrf>
 5b4:	68 2f       	mov	r22, r24
 5b6:	67 7d       	andi	r22, 0xD7	; 215
 5b8:	86 e0       	ldi	r24, 0x06	; 6
 5ba:	50 df       	rcall	.-352    	; 0x45c <WriteReg>
	
	//Enable CRC with 2 bytes
	WriteReg(CONFIG, ReadFromNrf(CONFIG) | (1<<EN_CRC) | (1<<CRCO));
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	06 df       	rcall	.-500    	; 0x3cc <ReadFromNrf>
 5c0:	68 2f       	mov	r22, r24
 5c2:	6c 60       	ori	r22, 0x0C	; 12
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	4a df       	rcall	.-364    	; 0x45c <WriteReg>
	
	// Retry setup number and delay between them ??
    WriteReg(SETUP_RETR, (2<<ARD) | (10<<ARC));
 5c8:	6a e2       	ldi	r22, 0x2A	; 42
 5ca:	84 e0       	ldi	r24, 0x04	; 4
 5cc:	47 df       	rcall	.-370    	; 0x45c <WriteReg>
	
	// Allow the arbitrary payload length
	//WriteReg(FEATURE, 0x04); // disabled
	
	// Set arbitrary length for channels: in first channel
	WriteReg(DYNPD, 0);
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	8c e1       	ldi	r24, 0x1C	; 28
 5d2:	44 df       	rcall	.-376    	; 0x45c <WriteReg>
	
	// RF choose frequency (channel) - 3 (?? GHz)
    WriteReg(RF_CH, 76); 
 5d4:	6c e4       	ldi	r22, 0x4C	; 76
 5d6:	85 e0       	ldi	r24, 0x05	; 5
 5d8:	41 df       	rcall	.-382    	; 0x45c <WriteReg>
	
	//Payload Width Setup 1-32 (How many bytes to send per transmission)
    WriteReg(RX_PW_P0, PAYLOAD_LENGTH);
 5da:	60 e1       	ldi	r22, 0x10	; 16
 5dc:	81 e1       	ldi	r24, 0x11	; 17
 5de:	3e df       	rcall	.-388    	; 0x45c <WriteReg>
	WriteReg(RX_PW_P1, PAYLOAD_LENGTH);
 5e0:	60 e1       	ldi	r22, 0x10	; 16
 5e2:	82 e1       	ldi	r24, 0x12	; 18
 5e4:	3b df       	rcall	.-394    	; 0x45c <WriteReg>
	WriteReg(RX_PW_P2, PAYLOAD_LENGTH);
 5e6:	60 e1       	ldi	r22, 0x10	; 16
 5e8:	83 e1       	ldi	r24, 0x13	; 19
 5ea:	38 df       	rcall	.-400    	; 0x45c <WriteReg>
	WriteReg(RX_PW_P3, PAYLOAD_LENGTH);
 5ec:	60 e1       	ldi	r22, 0x10	; 16
 5ee:	84 e1       	ldi	r24, 0x14	; 20
 5f0:	35 df       	rcall	.-406    	; 0x45c <WriteReg>
	WriteReg(RX_PW_P4, PAYLOAD_LENGTH);
 5f2:	60 e1       	ldi	r22, 0x10	; 16
 5f4:	85 e1       	ldi	r24, 0x15	; 21
 5f6:	32 df       	rcall	.-412    	; 0x45c <WriteReg>
	WriteReg(RX_PW_P5, PAYLOAD_LENGTH);
 5f8:	60 e1       	ldi	r22, 0x10	; 16
 5fa:	86 e1       	ldi	r24, 0x16	; 22
 5fc:	2f df       	rcall	.-418    	; 0x45c <WriteReg>
	
	// Enabling data pipes
    WriteReg(EN_RXADDR, 0);
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	82 e0       	ldi	r24, 0x02	; 2
 602:	2c df       	rcall	.-424    	; 0x45c <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P0));
 604:	82 e0       	ldi	r24, 0x02	; 2
 606:	e2 de       	rcall	.-572    	; 0x3cc <ReadFromNrf>
 608:	68 2f       	mov	r22, r24
 60a:	61 60       	ori	r22, 0x01	; 1
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	26 df       	rcall	.-436    	; 0x45c <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P1));
 610:	82 e0       	ldi	r24, 0x02	; 2
 612:	dc de       	rcall	.-584    	; 0x3cc <ReadFromNrf>
 614:	68 2f       	mov	r22, r24
 616:	62 60       	ori	r22, 0x02	; 2
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	20 df       	rcall	.-448    	; 0x45c <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P2));
 61c:	82 e0       	ldi	r24, 0x02	; 2
 61e:	d6 de       	rcall	.-596    	; 0x3cc <ReadFromNrf>
 620:	68 2f       	mov	r22, r24
 622:	64 60       	ori	r22, 0x04	; 4
 624:	82 e0       	ldi	r24, 0x02	; 2
 626:	1a df       	rcall	.-460    	; 0x45c <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P3));
 628:	82 e0       	ldi	r24, 0x02	; 2
 62a:	d0 de       	rcall	.-608    	; 0x3cc <ReadFromNrf>
 62c:	68 2f       	mov	r22, r24
 62e:	68 60       	ori	r22, 0x08	; 8
 630:	82 e0       	ldi	r24, 0x02	; 2
 632:	14 df       	rcall	.-472    	; 0x45c <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P4));
 634:	82 e0       	ldi	r24, 0x02	; 2
 636:	ca de       	rcall	.-620    	; 0x3cc <ReadFromNrf>
 638:	68 2f       	mov	r22, r24
 63a:	60 61       	ori	r22, 0x10	; 16
 63c:	82 e0       	ldi	r24, 0x02	; 2
 63e:	0e df       	rcall	.-484    	; 0x45c <WriteReg>
	WriteReg(EN_RXADDR, ReadFromNrf(EN_RXADDR) | (1<<ERX_P5));
 640:	82 e0       	ldi	r24, 0x02	; 2
 642:	c4 de       	rcall	.-632    	; 0x3cc <ReadFromNrf>
 644:	68 2f       	mov	r22, r24
 646:	60 62       	ori	r22, 0x20	; 32
 648:	82 e0       	ldi	r24, 0x02	; 2
 64a:	08 df       	rcall	.-496    	; 0x45c <WriteReg>
	
    // Enable Auto-acknowledgment
    WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P0));
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	be de       	rcall	.-644    	; 0x3cc <ReadFromNrf>
 650:	68 2f       	mov	r22, r24
 652:	61 60       	ori	r22, 0x01	; 1
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	02 df       	rcall	.-508    	; 0x45c <WriteReg>
	WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P1));
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	b8 de       	rcall	.-656    	; 0x3cc <ReadFromNrf>
 65c:	68 2f       	mov	r22, r24
 65e:	62 60       	ori	r22, 0x02	; 2
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	fc de       	rcall	.-520    	; 0x45c <WriteReg>
	WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P2));
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	b2 de       	rcall	.-668    	; 0x3cc <ReadFromNrf>
 668:	68 2f       	mov	r22, r24
 66a:	64 60       	ori	r22, 0x04	; 4
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	f6 de       	rcall	.-532    	; 0x45c <WriteReg>
	WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P3));
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	ac de       	rcall	.-680    	; 0x3cc <ReadFromNrf>
 674:	68 2f       	mov	r22, r24
 676:	68 60       	ori	r22, 0x08	; 8
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	f0 de       	rcall	.-544    	; 0x45c <WriteReg>
	WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P4));
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	a6 de       	rcall	.-692    	; 0x3cc <ReadFromNrf>
 680:	68 2f       	mov	r22, r24
 682:	60 61       	ori	r22, 0x10	; 16
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	ea de       	rcall	.-556    	; 0x45c <WriteReg>
	WriteReg(EN_AA, ReadFromNrf(EN_AA) | (1<<ENAA_P5));
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	a0 de       	rcall	.-704    	; 0x3cc <ReadFromNrf>
 68c:	68 2f       	mov	r22, r24
 68e:	60 62       	ori	r22, 0x20	; 32
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	e4 de       	rcall	.-568    	; 0x45c <WriteReg>
	
	// Address width - 5 bytes
    WriteReg(SETUP_AW, 0x03);
 694:	63 e0       	ldi	r22, 0x03	; 3
 696:	83 e0       	ldi	r24, 0x03	; 3
 698:	e1 de       	rcall	.-574    	; 0x45c <WriteReg>
	
	// Set RX address
	NrfSetRXAddr(0,addr0);
 69a:	63 e2       	ldi	r22, 0x23	; 35
 69c:	71 e0       	ldi	r23, 0x01	; 1
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	01 df       	rcall	.-510    	; 0x4a4 <NrfSetRXAddr>
	NrfSetRXAddr(1,addr1);
 6a2:	6e e1       	ldi	r22, 0x1E	; 30
 6a4:	71 e0       	ldi	r23, 0x01	; 1
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	fd de       	rcall	.-518    	; 0x4a4 <NrfSetRXAddr>
	NrfSetRXAddr(2,addr2);
 6aa:	69 e1       	ldi	r22, 0x19	; 25
 6ac:	71 e0       	ldi	r23, 0x01	; 1
 6ae:	82 e0       	ldi	r24, 0x02	; 2
 6b0:	f9 de       	rcall	.-526    	; 0x4a4 <NrfSetRXAddr>
	NrfSetRXAddr(3,addr3);
 6b2:	64 e1       	ldi	r22, 0x14	; 20
 6b4:	71 e0       	ldi	r23, 0x01	; 1
 6b6:	83 e0       	ldi	r24, 0x03	; 3
 6b8:	f5 de       	rcall	.-534    	; 0x4a4 <NrfSetRXAddr>
	NrfSetRXAddr(4,addr4);
 6ba:	6f e0       	ldi	r22, 0x0F	; 15
 6bc:	71 e0       	ldi	r23, 0x01	; 1
 6be:	84 e0       	ldi	r24, 0x04	; 4
 6c0:	f1 de       	rcall	.-542    	; 0x4a4 <NrfSetRXAddr>
	NrfSetRXAddr(5,addr5);
 6c2:	6a e0       	ldi	r22, 0x0A	; 10
 6c4:	71 e0       	ldi	r23, 0x01	; 1
 6c6:	85 e0       	ldi	r24, 0x05	; 5
 6c8:	ed de       	rcall	.-550    	; 0x4a4 <NrfSetRXAddr>

	// Set RX mode
	//NrfSetRX();
	return 1;//(ReadFromNrf(CONFIG) == ((1<<EN_CRC) | (1<<CRCO) | (1<<PWR_UP) | (1<<PRIM_RX))) ? 1 : 0;
	
}
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	08 95       	ret

000006ce <NrfSetTXAddr>:
	}
}

/***************************************************************/
// TX RF_Address setup 5 byte - Set Transmitter address
void NrfSetTXAddr(uint8_t *addr){
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	00 d0       	rcall	.+0      	; 0x6d4 <NrfSetTXAddr+0x6>
 6d4:	00 d0       	rcall	.+0      	; 0x6d6 <NrfSetTXAddr+0x8>
 6d6:	1f 92       	push	r1
 6d8:	cd b7       	in	r28, 0x3d	; 61
 6da:	de b7       	in	r29, 0x3e	; 62
	memcpy(&addrtx, addr, 5);
 6dc:	25 e0       	ldi	r18, 0x05	; 5
 6de:	fc 01       	movw	r30, r24
 6e0:	a5 e0       	ldi	r26, 0x05	; 5
 6e2:	b1 e0       	ldi	r27, 0x01	; 1
 6e4:	01 90       	ld	r0, Z+
 6e6:	0d 92       	st	X+, r0
 6e8:	2a 95       	dec	r18
 6ea:	e1 f7       	brne	.-8      	; 0x6e4 <NrfSetTXAddr+0x16>
	uint8_t revaddr[5];
	nrf24l01_revaddress(addr, (uint8_t *)revaddr);
 6ec:	be 01       	movw	r22, r28
 6ee:	6f 5f       	subi	r22, 0xFF	; 255
 6f0:	7f 4f       	sbci	r23, 0xFF	; 255
 6f2:	bf de       	rcall	.-642    	; 0x472 <nrf24l01_revaddress>
	WriteToNrf(W, RX_ADDR_P0, revaddr, 5);
 6f4:	25 e0       	ldi	r18, 0x05	; 5
 6f6:	ae 01       	movw	r20, r28
 6f8:	4f 5f       	subi	r20, 0xFF	; 255
 6fa:	5f 4f       	sbci	r21, 0xFF	; 255
 6fc:	6a e0       	ldi	r22, 0x0A	; 10
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	6b de       	rcall	.-810    	; 0x3d8 <WriteToNrf>
	WriteToNrf(W, TX_ADDR, revaddr, 5);
 702:	25 e0       	ldi	r18, 0x05	; 5
 704:	ae 01       	movw	r20, r28
 706:	4f 5f       	subi	r20, 0xFF	; 255
 708:	5f 4f       	sbci	r21, 0xFF	; 255
 70a:	60 e1       	ldi	r22, 0x10	; 16
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	64 de       	rcall	.-824    	; 0x3d8 <WriteToNrf>
}	
 710:	0f 90       	pop	r0
 712:	0f 90       	pop	r0
 714:	0f 90       	pop	r0
 716:	0f 90       	pop	r0
 718:	0f 90       	pop	r0
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	08 95       	ret

00000720 <reset_interrupts>:

/****************************************************************/
void reset_interrupts(void){
    WriteReg(STATUS, nRFGetStatus());
 720:	50 de       	rcall	.-864    	; 0x3c2 <nRFGetStatus>
 722:	68 2f       	mov	r22, r24
 724:	87 e0       	ldi	r24, 0x07	; 7
 726:	9a de       	rcall	.-716    	; 0x45c <WriteReg>
 728:	08 95       	ret

0000072a <send_payload>:
	//start transmittion
	send_payload();
}

void send_payload(void){
	CE_hi;
 72a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 72c:	85 e0       	ldi	r24, 0x05	; 5
 72e:	8a 95       	dec	r24
 730:	f1 f7       	brne	.-4      	; 0x72e <send_payload+0x4>
	_delay_us(15);
	CE_lo;
 732:	28 98       	cbi	0x05, 0	; 5
 734:	08 95       	ret

00000736 <NrfFlushTXfifo>:
	SPIWriteRead(FLUSH_RX);
	CSN_hi;
}

void NrfFlushTXfifo(void){
	CSN_lo;
 736:	29 98       	cbi	0x05, 1	; 5
	SPIWriteRead(FLUSH_TX);
 738:	81 ee       	ldi	r24, 0xE1	; 225
 73a:	54 d0       	rcall	.+168    	; 0x7e4 <SPIWriteRead>
	CSN_hi;
 73c:	29 9a       	sbi	0x05, 1	; 5
 73e:	08 95       	ret

00000740 <NrfSetTX>:
	CE_lo;
}


void NrfSetTX(void){
	CE_lo;
 740:	28 98       	cbi	0x05, 0	; 5
 742:	82 e3       	ldi	r24, 0x32	; 50
 744:	8a 95       	dec	r24
 746:	f1 f7       	brne	.-4      	; 0x744 <NrfSetTX+0x4>
	_delay_us(150);
	WriteReg(CONFIG, ReadFromNrf(CONFIG) & ~(1<<PRIM_RX));// | (1<<EN_CRC) | (1<<CRCO));
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	40 de       	rcall	.-896    	; 0x3cc <ReadFromNrf>
 74c:	68 2f       	mov	r22, r24
 74e:	6e 7f       	andi	r22, 0xFE	; 254
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	84 de       	rcall	.-760    	; 0x45c <WriteReg>
 754:	82 e3       	ldi	r24, 0x32	; 50
 756:	8a 95       	dec	r24
 758:	f1 f7       	brne	.-4      	; 0x756 <NrfSetTX+0x16>
	_delay_us(150);
	WriteReg(CONFIG, ReadFromNrf(CONFIG) | (1<<PWR_UP));
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	37 de       	rcall	.-914    	; 0x3cc <ReadFromNrf>
 75e:	68 2f       	mov	r22, r24
 760:	62 60       	ori	r22, 0x02	; 2
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	7b de       	rcall	.-778    	; 0x45c <WriteReg>
	WriteReg(STATUS, (1<<RX_DR) | (1<<TX_DS) | (1<<MAX_RT));
 766:	60 e7       	ldi	r22, 0x70	; 112
 768:	87 e0       	ldi	r24, 0x07	; 7
 76a:	78 de       	rcall	.-784    	; 0x45c <WriteReg>
	NrfFlushTXfifo();
 76c:	e4 df       	rcall	.-56     	; 0x736 <NrfFlushTXfifo>
 76e:	82 e3       	ldi	r24, 0x32	; 50
 770:	8a 95       	dec	r24
 772:	f1 f7       	brne	.-4      	; 0x770 <NrfSetTX+0x30>
 774:	08 95       	ret

00000776 <transmit_payload>:
    WriteReg(STATUS, nRFGetStatus());
}

/************************************************************************/

void transmit_payload(uint8_t *addr, uint8_t *W_buff, uint8_t num){
 776:	ff 92       	push	r15
 778:	0f 93       	push	r16
 77a:	1f 93       	push	r17
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	ec 01       	movw	r28, r24
 782:	8b 01       	movw	r16, r22
 784:	f4 2e       	mov	r15, r20
    CE_lo;
 786:	28 98       	cbi	0x05, 0	; 5
 788:	82 e3       	ldi	r24, 0x32	; 50
 78a:	8a 95       	dec	r24
 78c:	f1 f7       	brne	.-4      	; 0x78a <transmit_payload+0x14>
	_delay_us(150);
	NrfSetTX();
 78e:	d8 df       	rcall	.-80     	; 0x740 <NrfSetTX>
	NrfSetRXAddr(0, addr);
 790:	be 01       	movw	r22, r28
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	87 de       	rcall	.-754    	; 0x4a4 <NrfSetRXAddr>
	NrfSetTXAddr(addr);
 796:	ce 01       	movw	r24, r28
 798:	9a df       	rcall	.-204    	; 0x6ce <NrfSetTXAddr>
	//sprintf(TextBuffer, "W_buff addr: %i \r\n", W_buff);
	//TransmitStringToUART(TextBuffer);
    WriteToNrf(R, W_TX_PAYLOAD, W_buff, num);
 79a:	2f 2d       	mov	r18, r15
 79c:	a8 01       	movw	r20, r16
 79e:	60 ea       	ldi	r22, 0xA0	; 160
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	1a de       	rcall	.-972    	; 0x3d8 <WriteToNrf>
	//start transmittion
	send_payload();
 7a4:	c2 df       	rcall	.-124    	; 0x72a <send_payload>
}
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	1f 91       	pop	r17
 7ac:	0f 91       	pop	r16
 7ae:	ff 90       	pop	r15
 7b0:	08 95       	ret

000007b2 <reuse_payload>:
	SPIWriteRead(FLUSH_TX);
	CSN_hi;
}

void reuse_payload(void){
	CSN_lo;
 7b2:	29 98       	cbi	0x05, 1	; 5
	SPIWriteRead(REUSE_TX_PL);
 7b4:	83 ee       	ldi	r24, 0xE3	; 227
 7b6:	16 d0       	rcall	.+44     	; 0x7e4 <SPIWriteRead>
	CSN_hi;
 7b8:	29 9a       	sbi	0x05, 1	; 5
 7ba:	08 95       	ret

000007bc <NrfPowerDown>:
}

void NrfPowerDown(void){
	WriteReg(CONFIG, (ReadFromNrf(CONFIG) & (~(1<<PWR_UP))));
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	06 de       	rcall	.-1012   	; 0x3cc <ReadFromNrf>
 7c0:	68 2f       	mov	r22, r24
 7c2:	6d 7f       	andi	r22, 0xFD	; 253
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	4a de       	rcall	.-876    	; 0x45c <WriteReg>
 7c8:	08 95       	ret

000007ca <SPIInit>:
#include "SPIMethods.h"
#include "macros.h"
// SPI Init
void SPIInit(void){
	
	DDR_SPI &= ~((1<<SPI_MISO) | (1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); // input
 7ca:	84 b1       	in	r24, 0x04	; 4
 7cc:	83 7c       	andi	r24, 0xC3	; 195
 7ce:	84 b9       	out	0x04, r24	; 4
    DDR_SPI |= ( (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<SPI_SS)); //output
 7d0:	84 b1       	in	r24, 0x04	; 4
 7d2:	8c 62       	ori	r24, 0x2C	; 44
 7d4:	84 b9       	out	0x04, r24	; 4
	
	CSN_ddr |=(1<<CSN_pin); // output
 7d6:	21 9a       	sbi	0x04, 1	; 4
    CE_ddr |=(1<<CE_pin); // output
 7d8:	20 9a       	sbi	0x04, 0	; 4
	
	SPCR = ((0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(1<<SPR0));
 7da:	81 e5       	ldi	r24, 0x51	; 81
 7dc:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	8d bd       	out	0x2d, r24	; 45
 7e2:	08 95       	ret

000007e4 <SPIWriteRead>:
	//SPCR = ((0<<SPIE)|(0<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(1<<SPR0));
}

//Send data via SPI to nRF
uint8_t SPIWriteRead(uint8_t data){
    SPDR=data;
 7e4:	8e bd       	out	0x2e, r24	; 46
    while((SPSR & (1<<SPIF)) == 0);
 7e6:	0d b4       	in	r0, 0x2d	; 45
 7e8:	07 fe       	sbrs	r0, 7
 7ea:	fd cf       	rjmp	.-6      	; 0x7e6 <SPIWriteRead+0x2>
    return SPDR;
 7ec:	8e b5       	in	r24, 0x2e	; 46
}
 7ee:	08 95       	ret

000007f0 <twi_disable>:
//2-write data
//3-read data

#include "twi_avr.h"
void twi_disable(void){
	PORTC |= (1<<PINC4)|(1<<PINC5);
 7f0:	88 b1       	in	r24, 0x08	; 8
 7f2:	80 63       	ori	r24, 0x30	; 48
 7f4:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~((1<<PINC4)|(1<<PINC5));
 7f6:	87 b1       	in	r24, 0x07	; 7
 7f8:	8f 7c       	andi	r24, 0xCF	; 207
 7fa:	87 b9       	out	0x07, r24	; 7
 7fc:	08 95       	ret

000007fe <twi_init>:
}

void twi_init(void){
	PORTC |= (1<<PINC4)|(1<<PINC5);
 7fe:	88 b1       	in	r24, 0x08	; 8
 800:	80 63       	ori	r24, 0x30	; 48
 802:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~((1<<PINC4)|(1<<PINC5));
 804:	87 b1       	in	r24, 0x07	; 7
 806:	8f 7c       	andi	r24, 0xCF	; 207
 808:	87 b9       	out	0x07, r24	; 7
    TWSR=0x00;
 80a:	e9 eb       	ldi	r30, 0xB9	; 185
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	10 82       	st	Z, r1
    TWBR=0x02; //50kHz at 1MHz
 810:	82 e0       	ldi	r24, 0x02	; 2
 812:	80 93 b8 00 	sts	0x00B8, r24
    //TWBR=0x01;//333.33kHz
    TWSR = 0x00;
 816:	10 82       	st	Z, r1
 818:	08 95       	ret

0000081a <twi_start>:
    //TransmitStringToUART("twi initialized");
    //TransmitStringToUART("\r\n");
}

void twi_start(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(1<<TWSTA)|(1<<TWEA)|(1<<TWINT);
 81a:	85 ee       	ldi	r24, 0xE5	; 229
 81c:	80 93 bc 00 	sts	0x00BC, r24
 820:	83 e0       	ldi	r24, 0x03	; 3
 822:	8a 95       	dec	r24
 824:	f1 f7       	brne	.-4      	; 0x822 <twi_start+0x8>
 826:	00 00       	nop
 828:	08 95       	ret

0000082a <twi_stop>:
    _delay_us(10);
}

void twi_stop(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(1<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
 82a:	85 ed       	ldi	r24, 0xD5	; 213
 82c:	80 93 bc 00 	sts	0x00BC, r24
 830:	83 e0       	ldi	r24, 0x03	; 3
 832:	8a 95       	dec	r24
 834:	f1 f7       	brne	.-4      	; 0x832 <twi_stop+0x8>
 836:	00 00       	nop
 838:	08 95       	ret

0000083a <twi_sht21_get>:

void twi_send_nack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(0<<TWEA)|(1<<TWINT);
}

float twi_sht21_get(uint8_t var){ // if var==1 then read a temperature, if var==2 humidity;
 83a:	0f 93       	push	r16
 83c:	1f 93       	push	r17
 83e:	cf 93       	push	r28
 840:	c8 2f       	mov	r28, r24
	uint16_t tmp = 0;
	float r=0;
	twi_start();
 842:	eb df       	rcall	.-42     	; 0x81a <twi_start>
	while(!(TWCR&(1<<TWINT)));
 844:	ec eb       	ldi	r30, 0xBC	; 188
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	90 81       	ld	r25, Z
 84a:	99 23       	and	r25, r25
 84c:	ec f7       	brge	.-6      	; 0x848 <twi_sht21_get+0xe>
	TWDR = 0x80;
 84e:	80 e8       	ldi	r24, 0x80	; 128
 850:	80 93 bb 00 	sts	0x00BB, r24
void twi_send_ack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
}

void twi_send_nack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(0<<TWEA)|(1<<TWINT);
 854:	85 e8       	ldi	r24, 0x85	; 133
 856:	80 93 bc 00 	sts	0x00BC, r24
	twi_start();
	while(!(TWCR&(1<<TWINT)));
	TWDR = 0x80;
	//TWCR = (1<<TWINT) | (1<<TWEN);
	twi_send_nack();
	while(!(TWCR&(1<<TWINT)));
 85a:	ec eb       	ldi	r30, 0xBC	; 188
 85c:	f0 e0       	ldi	r31, 0x00	; 0
 85e:	90 81       	ld	r25, Z
 860:	99 23       	and	r25, r25
 862:	ec f7       	brge	.-6      	; 0x85e <twi_sht21_get+0x24>
	if (var == 1){
 864:	c1 30       	cpi	r28, 0x01	; 1
 866:	21 f4       	brne	.+8      	; 0x870 <twi_sht21_get+0x36>
		TWDR = 0xF3;	
 868:	83 ef       	ldi	r24, 0xF3	; 243
 86a:	80 93 bb 00 	sts	0x00BB, r24
 86e:	05 c0       	rjmp	.+10     	; 0x87a <twi_sht21_get+0x40>
	}else if (var == 2){
 870:	c2 30       	cpi	r28, 0x02	; 2
 872:	19 f4       	brne	.+6      	; 0x87a <twi_sht21_get+0x40>
		TWDR = 0xF5;
 874:	85 ef       	ldi	r24, 0xF5	; 245
 876:	80 93 bb 00 	sts	0x00BB, r24
void twi_send_ack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
}

void twi_send_nack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(0<<TWEA)|(1<<TWINT);
 87a:	85 e8       	ldi	r24, 0x85	; 133
 87c:	80 93 bc 00 	sts	0x00BC, r24
	}else if (var == 2){
		TWDR = 0xF5;
	}
	//TWCR = (1<<TWINT) | (1<<TWEN);
	twi_send_nack();
	while(!(TWCR&(1<<TWINT)));
 880:	ec eb       	ldi	r30, 0xBC	; 188
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	90 81       	ld	r25, Z
 886:	99 23       	and	r25, r25
 888:	ec f7       	brge	.-6      	; 0x884 <twi_sht21_get+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 88a:	87 ea       	ldi	r24, 0xA7	; 167
 88c:	91 e6       	ldi	r25, 0x61	; 97
 88e:	01 97       	sbiw	r24, 0x01	; 1
 890:	f1 f7       	brne	.-4      	; 0x88e <twi_sht21_get+0x54>
 892:	00 c0       	rjmp	.+0      	; 0x894 <twi_sht21_get+0x5a>
 894:	00 00       	nop
	_delay_ms(100);
	twi_start();
 896:	c1 df       	rcall	.-126    	; 0x81a <twi_start>
	while(!(TWCR&(1<<TWINT)));
 898:	ec eb       	ldi	r30, 0xBC	; 188
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	90 81       	ld	r25, Z
 89e:	99 23       	and	r25, r25
 8a0:	ec f7       	brge	.-6      	; 0x89c <twi_sht21_get+0x62>
	TWDR = 0x81;
 8a2:	81 e8       	ldi	r24, 0x81	; 129
 8a4:	80 93 bb 00 	sts	0x00BB, r24
    //StringToUart("Stop");
    //StringToUart("\r\n");
}

void twi_send_ack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
 8a8:	85 ec       	ldi	r24, 0xC5	; 197
 8aa:	80 93 bc 00 	sts	0x00BC, r24
	twi_start();
	while(!(TWCR&(1<<TWINT)));
	TWDR = 0x81;
	//TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	twi_send_ack();
	while(!(TWCR&(1<<TWINT)));
 8ae:	ec eb       	ldi	r30, 0xBC	; 188
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	90 81       	ld	r25, Z
 8b4:	99 23       	and	r25, r25
 8b6:	ec f7       	brge	.-6      	; 0x8b2 <twi_sht21_get+0x78>
    //StringToUart("Stop");
    //StringToUart("\r\n");
}

void twi_send_ack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
 8b8:	85 ec       	ldi	r24, 0xC5	; 197
 8ba:	80 93 bc 00 	sts	0x00BC, r24
	//TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	twi_send_ack();
	while(!(TWCR&(1<<TWINT)));
	//TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	twi_send_ack();
	while(!(TWCR&(1<<TWINT)));
 8be:	ec eb       	ldi	r30, 0xBC	; 188
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	90 81       	ld	r25, Z
 8c4:	99 23       	and	r25, r25
 8c6:	ec f7       	brge	.-6      	; 0x8c2 <twi_sht21_get+0x88>
	tmp=0x00ff&TWDR;
 8c8:	60 91 bb 00 	lds	r22, 0x00BB
 8cc:	70 e0       	ldi	r23, 0x00	; 0
    //StringToUart("Stop");
    //StringToUart("\r\n");
}

void twi_send_ack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
 8ce:	85 ec       	ldi	r24, 0xC5	; 197
 8d0:	80 93 bc 00 	sts	0x00BC, r24
	twi_send_ack();
	while(!(TWCR&(1<<TWINT)));
	tmp=0x00ff&TWDR;
	//TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	twi_send_ack();
	while(!(TWCR&(1<<TWINT)));
 8d4:	ec eb       	ldi	r30, 0xBC	; 188
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	90 81       	ld	r25, Z
 8da:	99 23       	and	r25, r25
 8dc:	ec f7       	brge	.-6      	; 0x8d8 <twi_sht21_get+0x9e>
	tmp = tmp<<8;
 8de:	76 2f       	mov	r23, r22
 8e0:	66 27       	eor	r22, r22
	tmp |= TWDR;
 8e2:	80 91 bb 00 	lds	r24, 0x00BB
 8e6:	8b 01       	movw	r16, r22
 8e8:	08 2b       	or	r16, r24
    //StringToUart("Stop");
    //StringToUart("\r\n");
}

void twi_send_ack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
 8ea:	85 ec       	ldi	r24, 0xC5	; 197
 8ec:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR&(1<<TWINT)));
	tmp = tmp<<8;
	tmp |= TWDR;
	//TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	twi_send_ack();
	while(!(TWCR&(1<<TWINT)));
 8f0:	ec eb       	ldi	r30, 0xBC	; 188
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	90 81       	ld	r25, Z
 8f6:	99 23       	and	r25, r25
 8f8:	ec f7       	brge	.-6      	; 0x8f4 <twi_sht21_get+0xba>
void twi_send_ack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(1<<TWEA)|(1<<TWINT);
}

void twi_send_nack(void){
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(0<<TWEA)|(1<<TWINT);
 8fa:	85 e8       	ldi	r24, 0x85	; 133
 8fc:	80 93 bc 00 	sts	0x00BC, r24
	//TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	twi_send_ack();
	while(!(TWCR&(1<<TWINT)));
	//TWCR = (1<<TWINT) | (1<<TWEN);
	twi_send_nack();
	while(!(TWCR&(1<<TWINT)));
 900:	ec eb       	ldi	r30, 0xBC	; 188
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	90 81       	ld	r25, Z
 906:	99 23       	and	r25, r25
 908:	ec f7       	brge	.-6      	; 0x904 <twi_sht21_get+0xca>
	twi_stop();
 90a:	8f df       	rcall	.-226    	; 0x82a <twi_stop>
	
	if (var == 1){
 90c:	c1 30       	cpi	r28, 0x01	; 1
 90e:	a1 f4       	brne	.+40     	; 0x938 <twi_sht21_get+0xfe>
		r = ((float)tmp)/65536*175.72-46.85;
 910:	b8 01       	movw	r22, r16
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	c3 d0       	rcall	.+390    	; 0xa9e <__floatunsisf>
 918:	20 e0       	ldi	r18, 0x00	; 0
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	40 e8       	ldi	r20, 0x80	; 128
 91e:	57 e3       	ldi	r21, 0x37	; 55
 920:	4c d1       	rcall	.+664    	; 0xbba <__mulsf3>
 922:	22 e5       	ldi	r18, 0x52	; 82
 924:	38 eb       	ldi	r19, 0xB8	; 184
 926:	4f e2       	ldi	r20, 0x2F	; 47
 928:	53 e4       	ldi	r21, 0x43	; 67
 92a:	47 d1       	rcall	.+654    	; 0xbba <__mulsf3>
 92c:	26 e6       	ldi	r18, 0x66	; 102
 92e:	36 e6       	ldi	r19, 0x66	; 102
 930:	4b e3       	ldi	r20, 0x3B	; 59
 932:	52 e4       	ldi	r21, 0x42	; 66
 934:	1e d0       	rcall	.+60     	; 0x972 <__subsf3>
 936:	19 c0       	rjmp	.+50     	; 0x96a <twi_sht21_get+0x130>
	}else if (var == 2){
 938:	c2 30       	cpi	r28, 0x02	; 2
 93a:	a1 f4       	brne	.+40     	; 0x964 <twi_sht21_get+0x12a>
		r = ((float)tmp)/65536*125-6;
 93c:	b8 01       	movw	r22, r16
 93e:	80 e0       	ldi	r24, 0x00	; 0
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	ad d0       	rcall	.+346    	; 0xa9e <__floatunsisf>
 944:	20 e0       	ldi	r18, 0x00	; 0
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	40 e8       	ldi	r20, 0x80	; 128
 94a:	57 e3       	ldi	r21, 0x37	; 55
 94c:	36 d1       	rcall	.+620    	; 0xbba <__mulsf3>
 94e:	20 e0       	ldi	r18, 0x00	; 0
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	4a ef       	ldi	r20, 0xFA	; 250
 954:	52 e4       	ldi	r21, 0x42	; 66
 956:	31 d1       	rcall	.+610    	; 0xbba <__mulsf3>
 958:	20 e0       	ldi	r18, 0x00	; 0
 95a:	30 e0       	ldi	r19, 0x00	; 0
 95c:	40 ec       	ldi	r20, 0xC0	; 192
 95e:	50 e4       	ldi	r21, 0x40	; 64
 960:	08 d0       	rcall	.+16     	; 0x972 <__subsf3>
 962:	03 c0       	rjmp	.+6      	; 0x96a <twi_sht21_get+0x130>
    TWCR = (1<<TWIE)|(1<<TWEN)|(0<<TWSTO)|(0<<TWSTA)|(0<<TWEA)|(1<<TWINT);
}

float twi_sht21_get(uint8_t var){ // if var==1 then read a temperature, if var==2 humidity;
	uint16_t tmp = 0;
	float r=0;
 964:	60 e0       	ldi	r22, 0x00	; 0
 966:	70 e0       	ldi	r23, 0x00	; 0
 968:	cb 01       	movw	r24, r22
		r = ((float)tmp)/65536*175.72-46.85;
	}else if (var == 2){
		r = ((float)tmp)/65536*125-6;
	}
	return r;
 96a:	cf 91       	pop	r28
 96c:	1f 91       	pop	r17
 96e:	0f 91       	pop	r16
 970:	08 95       	ret

00000972 <__subsf3>:
 972:	50 58       	subi	r21, 0x80	; 128

00000974 <__addsf3>:
 974:	bb 27       	eor	r27, r27
 976:	aa 27       	eor	r26, r26
 978:	0e d0       	rcall	.+28     	; 0x996 <__addsf3x>
 97a:	e5 c0       	rjmp	.+458    	; 0xb46 <__fp_round>
 97c:	d6 d0       	rcall	.+428    	; 0xb2a <__fp_pscA>
 97e:	30 f0       	brcs	.+12     	; 0x98c <__addsf3+0x18>
 980:	db d0       	rcall	.+438    	; 0xb38 <__fp_pscB>
 982:	20 f0       	brcs	.+8      	; 0x98c <__addsf3+0x18>
 984:	31 f4       	brne	.+12     	; 0x992 <__addsf3+0x1e>
 986:	9f 3f       	cpi	r25, 0xFF	; 255
 988:	11 f4       	brne	.+4      	; 0x98e <__addsf3+0x1a>
 98a:	1e f4       	brtc	.+6      	; 0x992 <__addsf3+0x1e>
 98c:	cb c0       	rjmp	.+406    	; 0xb24 <__fp_nan>
 98e:	0e f4       	brtc	.+2      	; 0x992 <__addsf3+0x1e>
 990:	e0 95       	com	r30
 992:	e7 fb       	bst	r30, 7
 994:	c1 c0       	rjmp	.+386    	; 0xb18 <__fp_inf>

00000996 <__addsf3x>:
 996:	e9 2f       	mov	r30, r25
 998:	e7 d0       	rcall	.+462    	; 0xb68 <__fp_split3>
 99a:	80 f3       	brcs	.-32     	; 0x97c <__addsf3+0x8>
 99c:	ba 17       	cp	r27, r26
 99e:	62 07       	cpc	r22, r18
 9a0:	73 07       	cpc	r23, r19
 9a2:	84 07       	cpc	r24, r20
 9a4:	95 07       	cpc	r25, r21
 9a6:	18 f0       	brcs	.+6      	; 0x9ae <__addsf3x+0x18>
 9a8:	71 f4       	brne	.+28     	; 0x9c6 <__addsf3x+0x30>
 9aa:	9e f5       	brtc	.+102    	; 0xa12 <__addsf3x+0x7c>
 9ac:	ff c0       	rjmp	.+510    	; 0xbac <__fp_zero>
 9ae:	0e f4       	brtc	.+2      	; 0x9b2 <__addsf3x+0x1c>
 9b0:	e0 95       	com	r30
 9b2:	0b 2e       	mov	r0, r27
 9b4:	ba 2f       	mov	r27, r26
 9b6:	a0 2d       	mov	r26, r0
 9b8:	0b 01       	movw	r0, r22
 9ba:	b9 01       	movw	r22, r18
 9bc:	90 01       	movw	r18, r0
 9be:	0c 01       	movw	r0, r24
 9c0:	ca 01       	movw	r24, r20
 9c2:	a0 01       	movw	r20, r0
 9c4:	11 24       	eor	r1, r1
 9c6:	ff 27       	eor	r31, r31
 9c8:	59 1b       	sub	r21, r25
 9ca:	99 f0       	breq	.+38     	; 0x9f2 <__addsf3x+0x5c>
 9cc:	59 3f       	cpi	r21, 0xF9	; 249
 9ce:	50 f4       	brcc	.+20     	; 0x9e4 <__addsf3x+0x4e>
 9d0:	50 3e       	cpi	r21, 0xE0	; 224
 9d2:	68 f1       	brcs	.+90     	; 0xa2e <__addsf3x+0x98>
 9d4:	1a 16       	cp	r1, r26
 9d6:	f0 40       	sbci	r31, 0x00	; 0
 9d8:	a2 2f       	mov	r26, r18
 9da:	23 2f       	mov	r18, r19
 9dc:	34 2f       	mov	r19, r20
 9de:	44 27       	eor	r20, r20
 9e0:	58 5f       	subi	r21, 0xF8	; 248
 9e2:	f3 cf       	rjmp	.-26     	; 0x9ca <__addsf3x+0x34>
 9e4:	46 95       	lsr	r20
 9e6:	37 95       	ror	r19
 9e8:	27 95       	ror	r18
 9ea:	a7 95       	ror	r26
 9ec:	f0 40       	sbci	r31, 0x00	; 0
 9ee:	53 95       	inc	r21
 9f0:	c9 f7       	brne	.-14     	; 0x9e4 <__addsf3x+0x4e>
 9f2:	7e f4       	brtc	.+30     	; 0xa12 <__addsf3x+0x7c>
 9f4:	1f 16       	cp	r1, r31
 9f6:	ba 0b       	sbc	r27, r26
 9f8:	62 0b       	sbc	r22, r18
 9fa:	73 0b       	sbc	r23, r19
 9fc:	84 0b       	sbc	r24, r20
 9fe:	ba f0       	brmi	.+46     	; 0xa2e <__addsf3x+0x98>
 a00:	91 50       	subi	r25, 0x01	; 1
 a02:	a1 f0       	breq	.+40     	; 0xa2c <__addsf3x+0x96>
 a04:	ff 0f       	add	r31, r31
 a06:	bb 1f       	adc	r27, r27
 a08:	66 1f       	adc	r22, r22
 a0a:	77 1f       	adc	r23, r23
 a0c:	88 1f       	adc	r24, r24
 a0e:	c2 f7       	brpl	.-16     	; 0xa00 <__addsf3x+0x6a>
 a10:	0e c0       	rjmp	.+28     	; 0xa2e <__addsf3x+0x98>
 a12:	ba 0f       	add	r27, r26
 a14:	62 1f       	adc	r22, r18
 a16:	73 1f       	adc	r23, r19
 a18:	84 1f       	adc	r24, r20
 a1a:	48 f4       	brcc	.+18     	; 0xa2e <__addsf3x+0x98>
 a1c:	87 95       	ror	r24
 a1e:	77 95       	ror	r23
 a20:	67 95       	ror	r22
 a22:	b7 95       	ror	r27
 a24:	f7 95       	ror	r31
 a26:	9e 3f       	cpi	r25, 0xFE	; 254
 a28:	08 f0       	brcs	.+2      	; 0xa2c <__addsf3x+0x96>
 a2a:	b3 cf       	rjmp	.-154    	; 0x992 <__addsf3+0x1e>
 a2c:	93 95       	inc	r25
 a2e:	88 0f       	add	r24, r24
 a30:	08 f0       	brcs	.+2      	; 0xa34 <__addsf3x+0x9e>
 a32:	99 27       	eor	r25, r25
 a34:	ee 0f       	add	r30, r30
 a36:	97 95       	ror	r25
 a38:	87 95       	ror	r24
 a3a:	08 95       	ret

00000a3c <__fixsfsi>:
 a3c:	04 d0       	rcall	.+8      	; 0xa46 <__fixunssfsi>
 a3e:	68 94       	set
 a40:	b1 11       	cpse	r27, r1
 a42:	b5 c0       	rjmp	.+362    	; 0xbae <__fp_szero>
 a44:	08 95       	ret

00000a46 <__fixunssfsi>:
 a46:	98 d0       	rcall	.+304    	; 0xb78 <__fp_splitA>
 a48:	88 f0       	brcs	.+34     	; 0xa6c <__fixunssfsi+0x26>
 a4a:	9f 57       	subi	r25, 0x7F	; 127
 a4c:	90 f0       	brcs	.+36     	; 0xa72 <__fixunssfsi+0x2c>
 a4e:	b9 2f       	mov	r27, r25
 a50:	99 27       	eor	r25, r25
 a52:	b7 51       	subi	r27, 0x17	; 23
 a54:	a0 f0       	brcs	.+40     	; 0xa7e <__fixunssfsi+0x38>
 a56:	d1 f0       	breq	.+52     	; 0xa8c <__fixunssfsi+0x46>
 a58:	66 0f       	add	r22, r22
 a5a:	77 1f       	adc	r23, r23
 a5c:	88 1f       	adc	r24, r24
 a5e:	99 1f       	adc	r25, r25
 a60:	1a f0       	brmi	.+6      	; 0xa68 <__fixunssfsi+0x22>
 a62:	ba 95       	dec	r27
 a64:	c9 f7       	brne	.-14     	; 0xa58 <__fixunssfsi+0x12>
 a66:	12 c0       	rjmp	.+36     	; 0xa8c <__fixunssfsi+0x46>
 a68:	b1 30       	cpi	r27, 0x01	; 1
 a6a:	81 f0       	breq	.+32     	; 0xa8c <__fixunssfsi+0x46>
 a6c:	9f d0       	rcall	.+318    	; 0xbac <__fp_zero>
 a6e:	b1 e0       	ldi	r27, 0x01	; 1
 a70:	08 95       	ret
 a72:	9c c0       	rjmp	.+312    	; 0xbac <__fp_zero>
 a74:	67 2f       	mov	r22, r23
 a76:	78 2f       	mov	r23, r24
 a78:	88 27       	eor	r24, r24
 a7a:	b8 5f       	subi	r27, 0xF8	; 248
 a7c:	39 f0       	breq	.+14     	; 0xa8c <__fixunssfsi+0x46>
 a7e:	b9 3f       	cpi	r27, 0xF9	; 249
 a80:	cc f3       	brlt	.-14     	; 0xa74 <__fixunssfsi+0x2e>
 a82:	86 95       	lsr	r24
 a84:	77 95       	ror	r23
 a86:	67 95       	ror	r22
 a88:	b3 95       	inc	r27
 a8a:	d9 f7       	brne	.-10     	; 0xa82 <__fixunssfsi+0x3c>
 a8c:	3e f4       	brtc	.+14     	; 0xa9c <__fixunssfsi+0x56>
 a8e:	90 95       	com	r25
 a90:	80 95       	com	r24
 a92:	70 95       	com	r23
 a94:	61 95       	neg	r22
 a96:	7f 4f       	sbci	r23, 0xFF	; 255
 a98:	8f 4f       	sbci	r24, 0xFF	; 255
 a9a:	9f 4f       	sbci	r25, 0xFF	; 255
 a9c:	08 95       	ret

00000a9e <__floatunsisf>:
 a9e:	e8 94       	clt
 aa0:	09 c0       	rjmp	.+18     	; 0xab4 <__floatsisf+0x12>

00000aa2 <__floatsisf>:
 aa2:	97 fb       	bst	r25, 7
 aa4:	3e f4       	brtc	.+14     	; 0xab4 <__floatsisf+0x12>
 aa6:	90 95       	com	r25
 aa8:	80 95       	com	r24
 aaa:	70 95       	com	r23
 aac:	61 95       	neg	r22
 aae:	7f 4f       	sbci	r23, 0xFF	; 255
 ab0:	8f 4f       	sbci	r24, 0xFF	; 255
 ab2:	9f 4f       	sbci	r25, 0xFF	; 255
 ab4:	99 23       	and	r25, r25
 ab6:	a9 f0       	breq	.+42     	; 0xae2 <__floatsisf+0x40>
 ab8:	f9 2f       	mov	r31, r25
 aba:	96 e9       	ldi	r25, 0x96	; 150
 abc:	bb 27       	eor	r27, r27
 abe:	93 95       	inc	r25
 ac0:	f6 95       	lsr	r31
 ac2:	87 95       	ror	r24
 ac4:	77 95       	ror	r23
 ac6:	67 95       	ror	r22
 ac8:	b7 95       	ror	r27
 aca:	f1 11       	cpse	r31, r1
 acc:	f8 cf       	rjmp	.-16     	; 0xabe <__floatsisf+0x1c>
 ace:	fa f4       	brpl	.+62     	; 0xb0e <__floatsisf+0x6c>
 ad0:	bb 0f       	add	r27, r27
 ad2:	11 f4       	brne	.+4      	; 0xad8 <__floatsisf+0x36>
 ad4:	60 ff       	sbrs	r22, 0
 ad6:	1b c0       	rjmp	.+54     	; 0xb0e <__floatsisf+0x6c>
 ad8:	6f 5f       	subi	r22, 0xFF	; 255
 ada:	7f 4f       	sbci	r23, 0xFF	; 255
 adc:	8f 4f       	sbci	r24, 0xFF	; 255
 ade:	9f 4f       	sbci	r25, 0xFF	; 255
 ae0:	16 c0       	rjmp	.+44     	; 0xb0e <__floatsisf+0x6c>
 ae2:	88 23       	and	r24, r24
 ae4:	11 f0       	breq	.+4      	; 0xaea <__floatsisf+0x48>
 ae6:	96 e9       	ldi	r25, 0x96	; 150
 ae8:	11 c0       	rjmp	.+34     	; 0xb0c <__floatsisf+0x6a>
 aea:	77 23       	and	r23, r23
 aec:	21 f0       	breq	.+8      	; 0xaf6 <__floatsisf+0x54>
 aee:	9e e8       	ldi	r25, 0x8E	; 142
 af0:	87 2f       	mov	r24, r23
 af2:	76 2f       	mov	r23, r22
 af4:	05 c0       	rjmp	.+10     	; 0xb00 <__floatsisf+0x5e>
 af6:	66 23       	and	r22, r22
 af8:	71 f0       	breq	.+28     	; 0xb16 <__floatsisf+0x74>
 afa:	96 e8       	ldi	r25, 0x86	; 134
 afc:	86 2f       	mov	r24, r22
 afe:	70 e0       	ldi	r23, 0x00	; 0
 b00:	60 e0       	ldi	r22, 0x00	; 0
 b02:	2a f0       	brmi	.+10     	; 0xb0e <__floatsisf+0x6c>
 b04:	9a 95       	dec	r25
 b06:	66 0f       	add	r22, r22
 b08:	77 1f       	adc	r23, r23
 b0a:	88 1f       	adc	r24, r24
 b0c:	da f7       	brpl	.-10     	; 0xb04 <__floatsisf+0x62>
 b0e:	88 0f       	add	r24, r24
 b10:	96 95       	lsr	r25
 b12:	87 95       	ror	r24
 b14:	97 f9       	bld	r25, 7
 b16:	08 95       	ret

00000b18 <__fp_inf>:
 b18:	97 f9       	bld	r25, 7
 b1a:	9f 67       	ori	r25, 0x7F	; 127
 b1c:	80 e8       	ldi	r24, 0x80	; 128
 b1e:	70 e0       	ldi	r23, 0x00	; 0
 b20:	60 e0       	ldi	r22, 0x00	; 0
 b22:	08 95       	ret

00000b24 <__fp_nan>:
 b24:	9f ef       	ldi	r25, 0xFF	; 255
 b26:	80 ec       	ldi	r24, 0xC0	; 192
 b28:	08 95       	ret

00000b2a <__fp_pscA>:
 b2a:	00 24       	eor	r0, r0
 b2c:	0a 94       	dec	r0
 b2e:	16 16       	cp	r1, r22
 b30:	17 06       	cpc	r1, r23
 b32:	18 06       	cpc	r1, r24
 b34:	09 06       	cpc	r0, r25
 b36:	08 95       	ret

00000b38 <__fp_pscB>:
 b38:	00 24       	eor	r0, r0
 b3a:	0a 94       	dec	r0
 b3c:	12 16       	cp	r1, r18
 b3e:	13 06       	cpc	r1, r19
 b40:	14 06       	cpc	r1, r20
 b42:	05 06       	cpc	r0, r21
 b44:	08 95       	ret

00000b46 <__fp_round>:
 b46:	09 2e       	mov	r0, r25
 b48:	03 94       	inc	r0
 b4a:	00 0c       	add	r0, r0
 b4c:	11 f4       	brne	.+4      	; 0xb52 <__fp_round+0xc>
 b4e:	88 23       	and	r24, r24
 b50:	52 f0       	brmi	.+20     	; 0xb66 <__fp_round+0x20>
 b52:	bb 0f       	add	r27, r27
 b54:	40 f4       	brcc	.+16     	; 0xb66 <__fp_round+0x20>
 b56:	bf 2b       	or	r27, r31
 b58:	11 f4       	brne	.+4      	; 0xb5e <__fp_round+0x18>
 b5a:	60 ff       	sbrs	r22, 0
 b5c:	04 c0       	rjmp	.+8      	; 0xb66 <__fp_round+0x20>
 b5e:	6f 5f       	subi	r22, 0xFF	; 255
 b60:	7f 4f       	sbci	r23, 0xFF	; 255
 b62:	8f 4f       	sbci	r24, 0xFF	; 255
 b64:	9f 4f       	sbci	r25, 0xFF	; 255
 b66:	08 95       	ret

00000b68 <__fp_split3>:
 b68:	57 fd       	sbrc	r21, 7
 b6a:	90 58       	subi	r25, 0x80	; 128
 b6c:	44 0f       	add	r20, r20
 b6e:	55 1f       	adc	r21, r21
 b70:	59 f0       	breq	.+22     	; 0xb88 <__fp_splitA+0x10>
 b72:	5f 3f       	cpi	r21, 0xFF	; 255
 b74:	71 f0       	breq	.+28     	; 0xb92 <__fp_splitA+0x1a>
 b76:	47 95       	ror	r20

00000b78 <__fp_splitA>:
 b78:	88 0f       	add	r24, r24
 b7a:	97 fb       	bst	r25, 7
 b7c:	99 1f       	adc	r25, r25
 b7e:	61 f0       	breq	.+24     	; 0xb98 <__fp_splitA+0x20>
 b80:	9f 3f       	cpi	r25, 0xFF	; 255
 b82:	79 f0       	breq	.+30     	; 0xba2 <__fp_splitA+0x2a>
 b84:	87 95       	ror	r24
 b86:	08 95       	ret
 b88:	12 16       	cp	r1, r18
 b8a:	13 06       	cpc	r1, r19
 b8c:	14 06       	cpc	r1, r20
 b8e:	55 1f       	adc	r21, r21
 b90:	f2 cf       	rjmp	.-28     	; 0xb76 <__fp_split3+0xe>
 b92:	46 95       	lsr	r20
 b94:	f1 df       	rcall	.-30     	; 0xb78 <__fp_splitA>
 b96:	08 c0       	rjmp	.+16     	; 0xba8 <__fp_splitA+0x30>
 b98:	16 16       	cp	r1, r22
 b9a:	17 06       	cpc	r1, r23
 b9c:	18 06       	cpc	r1, r24
 b9e:	99 1f       	adc	r25, r25
 ba0:	f1 cf       	rjmp	.-30     	; 0xb84 <__fp_splitA+0xc>
 ba2:	86 95       	lsr	r24
 ba4:	71 05       	cpc	r23, r1
 ba6:	61 05       	cpc	r22, r1
 ba8:	08 94       	sec
 baa:	08 95       	ret

00000bac <__fp_zero>:
 bac:	e8 94       	clt

00000bae <__fp_szero>:
 bae:	bb 27       	eor	r27, r27
 bb0:	66 27       	eor	r22, r22
 bb2:	77 27       	eor	r23, r23
 bb4:	cb 01       	movw	r24, r22
 bb6:	97 f9       	bld	r25, 7
 bb8:	08 95       	ret

00000bba <__mulsf3>:
 bba:	0b d0       	rcall	.+22     	; 0xbd2 <__mulsf3x>
 bbc:	c4 cf       	rjmp	.-120    	; 0xb46 <__fp_round>
 bbe:	b5 df       	rcall	.-150    	; 0xb2a <__fp_pscA>
 bc0:	28 f0       	brcs	.+10     	; 0xbcc <__mulsf3+0x12>
 bc2:	ba df       	rcall	.-140    	; 0xb38 <__fp_pscB>
 bc4:	18 f0       	brcs	.+6      	; 0xbcc <__mulsf3+0x12>
 bc6:	95 23       	and	r25, r21
 bc8:	09 f0       	breq	.+2      	; 0xbcc <__mulsf3+0x12>
 bca:	a6 cf       	rjmp	.-180    	; 0xb18 <__fp_inf>
 bcc:	ab cf       	rjmp	.-170    	; 0xb24 <__fp_nan>
 bce:	11 24       	eor	r1, r1
 bd0:	ee cf       	rjmp	.-36     	; 0xbae <__fp_szero>

00000bd2 <__mulsf3x>:
 bd2:	ca df       	rcall	.-108    	; 0xb68 <__fp_split3>
 bd4:	a0 f3       	brcs	.-24     	; 0xbbe <__mulsf3+0x4>

00000bd6 <__mulsf3_pse>:
 bd6:	95 9f       	mul	r25, r21
 bd8:	d1 f3       	breq	.-12     	; 0xbce <__mulsf3+0x14>
 bda:	95 0f       	add	r25, r21
 bdc:	50 e0       	ldi	r21, 0x00	; 0
 bde:	55 1f       	adc	r21, r21
 be0:	62 9f       	mul	r22, r18
 be2:	f0 01       	movw	r30, r0
 be4:	72 9f       	mul	r23, r18
 be6:	bb 27       	eor	r27, r27
 be8:	f0 0d       	add	r31, r0
 bea:	b1 1d       	adc	r27, r1
 bec:	63 9f       	mul	r22, r19
 bee:	aa 27       	eor	r26, r26
 bf0:	f0 0d       	add	r31, r0
 bf2:	b1 1d       	adc	r27, r1
 bf4:	aa 1f       	adc	r26, r26
 bf6:	64 9f       	mul	r22, r20
 bf8:	66 27       	eor	r22, r22
 bfa:	b0 0d       	add	r27, r0
 bfc:	a1 1d       	adc	r26, r1
 bfe:	66 1f       	adc	r22, r22
 c00:	82 9f       	mul	r24, r18
 c02:	22 27       	eor	r18, r18
 c04:	b0 0d       	add	r27, r0
 c06:	a1 1d       	adc	r26, r1
 c08:	62 1f       	adc	r22, r18
 c0a:	73 9f       	mul	r23, r19
 c0c:	b0 0d       	add	r27, r0
 c0e:	a1 1d       	adc	r26, r1
 c10:	62 1f       	adc	r22, r18
 c12:	83 9f       	mul	r24, r19
 c14:	a0 0d       	add	r26, r0
 c16:	61 1d       	adc	r22, r1
 c18:	22 1f       	adc	r18, r18
 c1a:	74 9f       	mul	r23, r20
 c1c:	33 27       	eor	r19, r19
 c1e:	a0 0d       	add	r26, r0
 c20:	61 1d       	adc	r22, r1
 c22:	23 1f       	adc	r18, r19
 c24:	84 9f       	mul	r24, r20
 c26:	60 0d       	add	r22, r0
 c28:	21 1d       	adc	r18, r1
 c2a:	82 2f       	mov	r24, r18
 c2c:	76 2f       	mov	r23, r22
 c2e:	6a 2f       	mov	r22, r26
 c30:	11 24       	eor	r1, r1
 c32:	9f 57       	subi	r25, 0x7F	; 127
 c34:	50 40       	sbci	r21, 0x00	; 0
 c36:	8a f0       	brmi	.+34     	; 0xc5a <__mulsf3_pse+0x84>
 c38:	e1 f0       	breq	.+56     	; 0xc72 <__mulsf3_pse+0x9c>
 c3a:	88 23       	and	r24, r24
 c3c:	4a f0       	brmi	.+18     	; 0xc50 <__mulsf3_pse+0x7a>
 c3e:	ee 0f       	add	r30, r30
 c40:	ff 1f       	adc	r31, r31
 c42:	bb 1f       	adc	r27, r27
 c44:	66 1f       	adc	r22, r22
 c46:	77 1f       	adc	r23, r23
 c48:	88 1f       	adc	r24, r24
 c4a:	91 50       	subi	r25, 0x01	; 1
 c4c:	50 40       	sbci	r21, 0x00	; 0
 c4e:	a9 f7       	brne	.-22     	; 0xc3a <__mulsf3_pse+0x64>
 c50:	9e 3f       	cpi	r25, 0xFE	; 254
 c52:	51 05       	cpc	r21, r1
 c54:	70 f0       	brcs	.+28     	; 0xc72 <__mulsf3_pse+0x9c>
 c56:	60 cf       	rjmp	.-320    	; 0xb18 <__fp_inf>
 c58:	aa cf       	rjmp	.-172    	; 0xbae <__fp_szero>
 c5a:	5f 3f       	cpi	r21, 0xFF	; 255
 c5c:	ec f3       	brlt	.-6      	; 0xc58 <__mulsf3_pse+0x82>
 c5e:	98 3e       	cpi	r25, 0xE8	; 232
 c60:	dc f3       	brlt	.-10     	; 0xc58 <__mulsf3_pse+0x82>
 c62:	86 95       	lsr	r24
 c64:	77 95       	ror	r23
 c66:	67 95       	ror	r22
 c68:	b7 95       	ror	r27
 c6a:	f7 95       	ror	r31
 c6c:	e7 95       	ror	r30
 c6e:	9f 5f       	subi	r25, 0xFF	; 255
 c70:	c1 f7       	brne	.-16     	; 0xc62 <__mulsf3_pse+0x8c>
 c72:	fe 2b       	or	r31, r30
 c74:	88 0f       	add	r24, r24
 c76:	91 1d       	adc	r25, r1
 c78:	96 95       	lsr	r25
 c7a:	87 95       	ror	r24
 c7c:	97 f9       	bld	r25, 7
 c7e:	08 95       	ret

00000c80 <_exit>:
 c80:	f8 94       	cli

00000c82 <__stop_program>:
 c82:	ff cf       	rjmp	.-2      	; 0xc82 <__stop_program>
